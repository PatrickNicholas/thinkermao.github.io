<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Coding</title>
  
  <subtitle>纸上得来终觉浅，绝知此事要躬行</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.hashcoding.net/"/>
  <updated>2018-01-13T09:21:30.377Z</updated>
  <id>http://www.hashcoding.net/</id>
  
  <author>
    <name>Patrick</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Raft-实现指北-领导选举</title>
    <link href="http://www.hashcoding.net/2018/01/07/Raft-%E5%AE%9E%E7%8E%B0%E6%8C%87%E5%8C%97-%E9%A2%86%E5%AF%BC%E9%80%89%E4%B8%BE/"/>
    <id>http://www.hashcoding.net/2018/01/07/Raft-实现指北-领导选举/</id>
    <published>2018-01-07T05:31:18.000Z</published>
    <updated>2018-01-13T09:21:30.377Z</updated>
    
    <content type="html"><![CDATA[<p>和其他一致性算法相比，Raft 使用一种更强的领导能力形式。比如，日志条目只从领导者发送给其他的服务器。在选举上，Raft 算法使用一个随机计时器来选举领导者，这种方式只是在任何一致性算法都必须实现的心跳机制上增加了一点机制。[1]</p><p><img src="https://camo.githubusercontent.com/f9b80d45d67996bb9ce63ba6e5d37b6a03150097/68747470733a2f2f646e2d307830312d696f2e71626f782e6d652f726166742d254535253942254245352e706e67" alt="时间被划分成一个个的任期，每个任期开始都是一次选举"></p><p>Raft 把时间分割任意长度的任期（term），并使用连续整数标记，每个任期都从一次选举开始。每次选举有一个或多个候选人参选，如果一个候选人赢得选举，其就会在该任期充当领导人的职责。某些情况下会出现选票瓜分的现象，那么该任期无法选出领导人，所以进入下一期选举，其中 Raft 通过随机计时来保证选举成功。[1]</p><h1 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h1><p>实现领导人选举之前，先看到上一节提到的纯函数式的状态机，将 Raft 实现成为一个无副作用的纯函数状态机。Raft 算法可以看作一个角色状态机，通过其他节点传递的消息、计时器、客户端的提交请求和快照等输入消息，从一个状态转移到另一个状态、或修改部分内部状态并返回一个发送给外部的信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(state, message) -&gt; state machine -&gt; message</span><br></pre></td></tr></table></figure><p>state machine 是一个纯函数式的状态机，负责处理消息，并将改动写入到 state 里，然后返回给外部的消息。</p><p>根据 Raft 论文，一个 state 几部分组成：</p><table><thead><tr><th>状态</th><th>所有服务器上持久存在的</th></tr></thead><tbody><tr><td>currentTerm</td><td>服务器最后一次知道的任期号（初始化为 0，持续递增）</td></tr><tr><td>votedFor</td><td>在当前获得选票的候选人的 Id</td></tr><tr><td>log[]</td><td>日志条目集；每一个条目包含一个用户状态机执行的指令，和收到时的任期号</td></tr></tbody></table><table><thead><tr><th>状态</th><th>所有服务器上经常变的</th></tr></thead><tbody><tr><td>commitIndex</td><td>已知的最大的已经被提交的日志条目的索引值</td></tr><tr><td>lastApplied</td><td>最后被应用到状态机的日志条目索引值（初始化为 0，持续递增）</td></tr></tbody></table><table><thead><tr><th>状态</th><th>在领导人里经常改变的 （选举后重新初始化）</th></tr></thead><tbody><tr><td>nextIndex[]</td><td>对于每一个服务器，需要发送给他的下一个日志条目的索引值（初始化为领导人最后索引值加一）</td></tr><tr><td>matchIndex[]</td><td>对于每一个服务器，已经复制给他的日志的最高索引值</td></tr></tbody></table><p>实现大体是类似的，不过以后需要加入流量控制、成员加入退出等，所以将 state 中保存的其他服务器的信息抽象一下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> node <span class="keyword">struct</span> &#123;</span><br><span class="line">    id <span class="keyword">uint64</span> </span><br><span class="line">    nextIdx <span class="keyword">uint64</span> </span><br><span class="line">    matched <span class="keyword">uint64</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>id</code> 表示其他服务器在 Raft 中的唯一 ID，<code>nextIdx</code> 与 <code>matched</code> 分别是 <code>nextIndex</code> 数组和 <code>matchIndex</code> 数据中第 <code>id</code> 个元素。</p><p>Raft 通过超时来驱动心跳和选举，一共由两种超时：1、心跳超时，领导人定期给跟随者发送心跳信息宣布自己的领导权；2、选举超时，超时时间是随机选择的。</p><p>整个 state 如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> core <span class="keyword">struct</span> &#123;</span><br><span class="line">    id <span class="keyword">uint64</span> </span><br><span class="line">    leaderId <span class="keyword">uint64</span></span><br><span class="line">    state StateRole</span><br><span class="line"></span><br><span class="line">    term <span class="keyword">uint64</span> </span><br><span class="line">    vote <span class="keyword">uint64</span> </span><br><span class="line">    log *LogHolder </span><br><span class="line"></span><br><span class="line">    nodes []node </span><br><span class="line"></span><br><span class="line">    timeElapsed <span class="keyword">int</span> </span><br><span class="line">    randomizedElectionTimtout <span class="keyword">int</span> </span><br><span class="line">    electionTimeout <span class="keyword">int</span> </span><br><span class="line">    heartbeatTimeout <span class="keyword">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>id</code> 是 Raft weiyiqueding d  <code>term</code> 和 <code>vote</code> 分别是 <code>currentTerm</code> 和 <code>voteFor</code> 的实现，而日志由应用负责持久化。<code>lastApplied</code> 和 <code>commitIndex</code> 由 <code>log</code> 负责管理。<code>nodes</code> 表示该 Raft 集群的其他服务器的状态。<code>timeElapsed</code> 表示从时间累积，<code>randomizedElectionTimeout</code> 表示随机生成的选举超时阈值，每次转为跟随者、候选人状态时都会改变。<code>heartbeatTimeout</code> 表示领导人两次心跳的间隔。<code>electionTimeout</code> 用来表示领导人选举超时基准，其用于计算<code>randomizedElectionTimeout</code>，使用公式：$electionTimeout + rand() \% electionTimeout$ 计算得到。另外还有 <code>leaderId</code> 和 <code>state</code> 状态，<code>leaderId</code> 表示当前领导人的 ID，<code>state</code> 则是 Raft 目前所处的角色。</p><p>此外，还需要设计消息结构作为外部应用、服务器和 Raft 状态机进行数据交换。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Message <span class="keyword">struct</span> &#123;</span><br><span class="line">    From <span class="keyword">uint64</span> </span><br><span class="line">    To <span class="keyword">uint64</span> </span><br><span class="line">    MsgType MessageType</span><br><span class="line">    Term <span class="keyword">uint64</span> </span><br><span class="line">    Index <span class="keyword">uint64</span></span><br><span class="line">    LogIndex <span class="keyword">uint64</span> </span><br><span class="line">    LogTerm <span class="keyword">uint64</span> </span><br><span class="line">    Reject <span class="keyword">uint64</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该结构不仅仅用于发起请求，也用于状态机返回数据，所以需要 <code>Reject</code> 字段表示拒绝请求，比如拒绝给某个候选人投票。</p><p>最后，状态机需要返回消息给消息发送者，由于希望将 Raft 设计为一个纯函数式状态机，消息的接受发送交给了应用处理，所以还得提供一个 <code>Application</code> 接口，供 Raft 和应用交互。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Application <span class="keyword">interface</span> &#123;</span><br><span class="line">    send(msg *raftpd.Message)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当应用接收到消息后，将其输入到 Raft 状态机，处理完后，调用 <code>send</code> 发送回复消息，并保存信息到机中。整个状态机由消息驱动，所以 Raft 接口如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Raft <span class="keyword">interface</span> &#123;</span><br><span class="line">    Step(msg *raftpd.Message)</span><br><span class="line">    Periodic(millsSinceLastPeriod <span class="keyword">int</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当应用接受到外部传递的消息后，调用 <code>Step</code> 驱动状态机改变状态。Raft 中通过超时进行心跳或选举，外部应用需要通过某个固定的定时源隔一段时间调用 <code>Periodic</code> 驱动状态机进行心跳、选举等。</p><h1 id="选举过程"><a href="#选举过程" class="headerlink" title="选举过程"></a>选举过程</h1><p><img src="https://camo.githubusercontent.com/6396d99ee401327500ef9eafe92617d7812ecd4d/68747470733a2f2f646e2d307830312d696f2e71626f782e6d652f726166742d254535253942254245342d30312e706e67" alt="服务器状态变化图"></p><p>系统进行初始化时，每个节点都处于跟随者状态，由于没有领导人定期广播心跳，所以一段时间后部分跟随者成为候选人并进行下一届选举。</p><p>当某个候选人获得了超过半数的投票后，成为领导人，并向所有节点广播自己成功的信息。当候选人接收到其他候选人成为领导人的信息后，一届只能选出一个领导人（<strong>选举安全特性</strong>），该候选人退回到跟随者的状态，并投票给该领导人。</p><p>如果到了下一个选举超时，仍然没有候选人成为领导人，就会跳过这一届，开始下一届的领导人选举。</p><h1 id="PreVote"><a href="#PreVote" class="headerlink" title="PreVote"></a>PreVote</h1><p>由于<strong>选举安全特性</strong>的限制，成员会忽略已经过期的信息时，并返回自己所在的任期，用于发送者更新自己。由于这一特性的存在，在一个存在网络延迟的网络中，某个节点由于延迟进入了选举，而实际上大多数节点都能接收到领导人的心跳，也会进入选举。Raft 原论文 9.6 节中提出了 Prevote 算法：在选举前可以选询问其他节点是否愿意参与选举，如果节点能够感知到领导人的心跳，那么它就不会参与选举，否则参与选举。只有过半的节点参与选举，才能开始下一届领导人选举。</p><h1 id="领导人选举实现"><a href="#领导人选举实现" class="headerlink" title="领导人选举实现"></a>领导人选举实现</h1><p>加入了 PreVote 算法后，Raft 的状态变为 4 个：领导人、跟随者，候选人，预候选人。此时的外部事件为：选举、心跳超时；以及：</p><ul><li>MsgPreVoteRequest</li><li>MsgPreVoteResponse</li><li>MsgVoteRequest</li><li>MsgVoteResponse</li><li>MsgAppendRequest</li></ul><p><code>MsgAppendRequest</code> 这种消息类型发生在某个节点成竞选成功后向其他节点宣示领导权，在选举过程中也由该种类型在节点间传递。比如 PreVote 阶段正常的跟随者能够接收到领导人的心跳；又或者新晋领导人首次对外宣誓领导权。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *core)</span> <span class="title">Periodic</span><span class="params">(millsSinceLastPeriod <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    c.timeElapsed += millsSinceLastPeriod</span><br><span class="line">    log.Debugf(<span class="string">"%d periodic %d, time elapsed %d"</span>, c.id, millsSinceLastPeriod, c.timeElapsed)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> c.state.IsLeader() &#123;</span><br><span class="line">        <span class="keyword">if</span> c.heartbeatTick &lt;= c.timeElapsed &#123;</span><br><span class="line">            c.broadcastAppend()</span><br><span class="line">            c.timeElapsed = <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> c.randomizedElectionTick &lt;= c.timeElapsed &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(c.nodes) &gt; <span class="number">1</span> &#123;</span><br><span class="line">            c.campaign(campaignPreCandidate)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每次应用程序调用 <code>Periodic</code> 时，Raft 判断是否为 leader，是判断 <code>timeElapsed</code> 是否超过 <code>heartbeatTick</code>，然后向其他节点发送追加日志（心跳）信息，并清空 <code>timElapsed</code>；如果不是领导人，且已经超过随机生成的选举超时，那么状态转移到预候选人同时开始 PreVote 阶段。</p><p>除此之外，PreVote 算法还需要记录其他节点对某次预选举请求的响应状态，所以在 node 结构中添加字段标记：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> voteState <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    voteNone    voteState = <span class="literal">iota</span></span><br><span class="line">    voteReject</span><br><span class="line">    voteGranted</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> node <span class="keyword">struct</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    vote    voteState</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="状态间转换"><a href="#状态间转换" class="headerlink" title="状态间转换"></a>状态间转换</h2><p>继续之前需要看看 Raft 状态机的状态转换是如何实现的：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *core)</span> <span class="title">resetRandomizedElectionTimeout</span><span class="params">()</span></span> &#123;</span><br><span class="line">    c.randomizedElectionTick =</span><br><span class="line">        c.electionTick + rand.Intn(c.electionTick)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *core)</span> <span class="title">reset</span><span class="params">(term <span class="keyword">uint64</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> c.term != term &#123;</span><br><span class="line">        c.term = term</span><br><span class="line">        c.vote = InvalidId</span><br><span class="line">    &#125;</span><br><span class="line">    c.leaderId = InvalidId</span><br><span class="line">    c.timeElapsed = <span class="number">0</span></span><br><span class="line">    c.resetRandomizedElectionTimeout()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *core)</span> <span class="title">becomeFollower</span><span class="params">(term, leaderId <span class="keyword">uint64</span>)</span></span> &#123;</span><br><span class="line">    c.reset(term)</span><br><span class="line">    c.leaderId = leaderId</span><br><span class="line">    c.state = FOLLOWER</span><br><span class="line">    c.vote = leaderId</span><br><span class="line"></span><br><span class="line">    log.Infof(<span class="string">"%v become follower at %d"</span>, c.id, c.term)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *core)</span> <span class="title">becomeLeader</span><span class="params">()</span></span> &#123;</span><br><span class="line">    utils.Assert(c.state == CANDIDATE, <span class="string">"invalid translation [%v =&gt; Leader]"</span>, c.state)</span><br><span class="line"></span><br><span class="line">    c.reset(c.term)</span><br><span class="line">    c.leaderId = c.id</span><br><span class="line">    c.state = LEADER</span><br><span class="line">    c.vote = c.id</span><br><span class="line"></span><br><span class="line">    log.Infof(<span class="string">"%v become leader at %d"</span>, c.id, c.term)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *core)</span> <span class="title">becomeCandidate</span><span class="params">()</span></span> &#123;</span><br><span class="line">    utils.Assert(c.state != LEADER, <span class="string">"invalid translation [Leader =&gt; Candidate]"</span>)</span><br><span class="line"></span><br><span class="line">    c.reset(c.term + <span class="number">1</span>)</span><br><span class="line">    c.vote = c.id</span><br><span class="line">    c.state = CANDIDATE</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(c.nodes); i++ &#123;</span><br><span class="line">        node := &amp;c.nodes[i]</span><br><span class="line">        node.resetVoteState()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    log.Infof(<span class="string">"%v become candidate at %d"</span>, c.id, c.term)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *core)</span> <span class="title">becomePreCandidate</span><span class="params">()</span></span> &#123;</span><br><span class="line">    c.reset(c.term)</span><br><span class="line">    c.state = PRE_CANDIDATE</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(c.nodes); i++ &#123;</span><br><span class="line">        node := &amp;c.nodes[i]</span><br><span class="line">        node.resetVoteState()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Becoming a pre-candidate changes our state,</span></span><br><span class="line">    <span class="comment">// but doesn't change anything else. In particular it does not increase</span></span><br><span class="line">    <span class="comment">// currentTerm or change votedFor.</span></span><br><span class="line">    log.Infof(<span class="string">"%x became pre-candidate at term %d"</span>, c.id, c.term)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先看到 <code>reset</code>，它是负责在 Raft 状态转换过程中重置部分状态。<code>reset</code> 中第一步是根据任期是否改变决定重置 <code>vote</code> 和 <code>term</code> 信息；除此之外还重置了 <code>leaderId</code> 以及超时相关的两个属性: <code>timeElapsed</code> 和 <code>randomizedElectionTimeout</code>。</p><p>进入预选举的节点在被大多数节点拒绝后会回退到跟随者的状态，因此在 <code>becomePreCandidate</code> 中除了重置基础状态外，仅仅修改了 <code>state</code> 属性和重置其他节点的投票情况。<strong>特别需要注意的是不能修改 <code>currentTerm</code> 和 <code>votedFor</code></strong>。</p><p>如果预选举的节点获得了半数的节点参选支持，就会进入候选人状态，因此任期加一，同时给自己投票。</p><p>此外，当领导者和跟随者在发送心跳或接收到领导人的通知后，都需要重置 <code>timeElappsed</code>，因此将 <code>becomeLeader</code> 和 <code>becomeFollower</code> 设计为重入只会影响到 <code>timeElapsed</code> 和 <code>randomizedElectinTimeout</code> 属性。</p><h2 id="PreCampaign"><a href="#PreCampaign" class="headerlink" title="PreCampaign"></a>PreCampaign</h2><p>竞选时首先调用 <code>campaign</code> 给其他节点发送 <code>MsgPreVoteRequest</code> 请求。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *core)</span> <span class="title">campaign</span><span class="params">(ct campaignState)</span></span> &#123;</span><br><span class="line">    utils.Assert(c.state != LEADER,</span><br><span class="line">        <span class="string">"invalid translation [Leader =&gt; PreCandidate/Candidate]"</span>)</span><br><span class="line"></span><br><span class="line">    msg := raftpd.Message&#123;&#125;</span><br><span class="line">    msg.LogIndex = c.log.lastIndex()</span><br><span class="line">    msg.LogTerm = c.log.lastTerm()</span><br><span class="line">    <span class="keyword">if</span> ct == campaignPreCandidate &#123;</span><br><span class="line">        msg.Term = c.term + <span class="number">1</span></span><br><span class="line">        msg.MsgType = raftpd.MsgPreVoteRequest</span><br><span class="line">        c.becomePreCandidate()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        msg.Term = c.term</span><br><span class="line">        msg.MsgType = raftpd.MsgVoteRequest</span><br><span class="line">        c.becomeCandidate()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(c.nodes); i++ &#123;</span><br><span class="line">        node := &amp;c.nodes[i]</span><br><span class="line">        msg.To = node.id</span><br><span class="line"></span><br><span class="line">        log.Infof(<span class="string">"%x [term: %d, index: %d] send %v request to %x at term %d"</span>,</span><br><span class="line">            c.id, c.log.lastTerm(), c.log.lastIndex(), msg.MsgType, msg.To, c.term)</span><br><span class="line">        c.send(&amp;msg)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PreVote 要求某个节点只有在长时间未和领导人交换心跳时才参与选举。同时参与选举要求候选人的日志必须是最新的（<strong>领导人完全特性</strong>）。所以在接收到其他节点发送的 <code>MsgPreVoteRequest</code> 时，1、如果在一个选举超时内（注意：<code>electionTimeout</code>）有和领导交换过一次心跳；2、或者候选人的任期号小于自身的任期号；3、或者候选人的日志不是最新的都拒绝参加选举。否则回复参加选举。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *core)</span> <span class="title">handlePreVote</span><span class="params">(msg *raftpd.Message)</span></span> &#123;</span><br><span class="line">    reply := raftpd.Message&#123;&#125;</span><br><span class="line">    reply.To = msg.From</span><br><span class="line">    reply.MsgType = raftpd.MsgPreVoteResponse</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Reply false if last AppendEntries call was received less than election timeout ago.</span></span><br><span class="line">    <span class="comment">// Reply false if term &lt; currentTerm.</span></span><br><span class="line">    <span class="comment">// Reply false if candidate's log isn't at least as up­to­date as receiver's log.</span></span><br><span class="line">    <span class="keyword">if</span> (c.leaderId != InvalidId &amp;&amp; c.timeElapsed &lt; c.electionTick) ||</span><br><span class="line">        (msg.Term &lt; c.term) ||</span><br><span class="line">        !c.log.IsUpToDate(msg.LogIndex, msg.LogTerm) &#123;</span><br><span class="line">        reply.Reject = <span class="literal">false</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        reply.Reject = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    c.send(&amp;reply)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：实际上在处理远程信息时，如果接收到了过期信息，会直接丢弃（后面有讲），不会进入 <code>handlePreVote</code> 函数，所以上面第二点实际上永远为假。</p><p>预候选人接收到其他节点回复的信息时:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *core)</span> <span class="title">handleVoteResponse</span><span class="params">(msg *raftpd.Message)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> msg.Reject &#123;</span><br><span class="line">        log.Infof(<span class="string">"%x received %v rejection from %x at term %d"</span>,</span><br><span class="line">            c.id, msg.MsgType, msg.From, c.term)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        log.Infof(<span class="string">"%x received %v from %x at term %s"</span>,</span><br><span class="line">            c.id, msg.MsgType, msg.From, msg.Term)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    node := c.getNodeById(msg.From)</span><br><span class="line">    node.updateVoteState(msg.Reject)</span><br><span class="line"></span><br><span class="line">    count := c.voteStateCount(voteGranted)</span><br><span class="line">    <span class="keyword">if</span> count &gt;= c.quorum() &#123;</span><br><span class="line">        <span class="keyword">if</span> msg.MsgType == raftpd.MsgVoteResponse &#123;</span><br><span class="line">            c.becomeLeader()</span><br><span class="line">            c.broadcastVictory()</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            c.campaign(campaignCandidate)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// return to follower state if it receives vote denial from a majority</span></span><br><span class="line">    count = c.voteStateCount(voteReject)</span><br><span class="line">    <span class="keyword">if</span> count &gt;= c.quorum() &#123;</span><br><span class="line">        c.becomeFollower(msg.Term, InvalidId)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更新某个 node 对此次请求的投票情况，并判断支持者和反对者人数，如果支持者人数过半，那么调用 <code>campaign(campaignCandidate)</code> 进入候选人状态。如果反对者人数过半，那么节点会回退到跟随者的状态。</p><h2 id="Campaign"><a href="#Campaign" class="headerlink" title="Campaign"></a>Campaign</h2><p>在候选人一方，选举过程使用了相同的函数，不同的是跟随者对候选人的处理。只有当候选人未投票或者上一次投给了该候选人，候选人才能获得跟随者的选票。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *core)</span> <span class="title">handleVote</span><span class="params">(msg *raftpd.Message)</span></span> &#123;</span><br><span class="line">    reply := raftpd.Message&#123;&#125;</span><br><span class="line">    reply.To = msg.From</span><br><span class="line">    reply.MsgType = raftpd.MsgVoteResponse</span><br><span class="line"></span><br><span class="line">    <span class="comment">// no vote or vote for candidate, and log is at least as up-to-date as receiver's.</span></span><br><span class="line">    <span class="keyword">if</span> c.vote == InvalidId || c.vote == msg.From ||</span><br><span class="line">        c.log.IsUpToDate(msg.LogIndex, msg.LogTerm) &#123;</span><br><span class="line">        reply.Reject = <span class="literal">false</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        reply.Reject = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    c.send(&amp;reply)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="处理过时消息"><a href="#处理过时消息" class="headerlink" title="处理过时消息"></a>处理过时消息</h2><p>根据 Raft 论文中将 term 用作逻辑时间，判断过期的消息。在论文图 2 中提到如果接收到来自高任期的消息，应该回退到跟随者状态；接收到过时消息，直接忽略。所以代码可以写为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> msg.Term &lt; c.term &#123;</span><br><span class="line">    c.reject(msg)</span><br><span class="line">&#125; <span class="keyword">if</span> msg.Term &gt; c.term &#123;</span><br><span class="line">    c.becomeFollower()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际上可能某个节点成为候选人后，又重新连接到网络中。此时发起投票会导致其他节点增大任期，因此对投票相关的消息做特殊处理。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *core)</span> <span class="title">Step</span><span class="params">(msg *raftpd.Message)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> msg.Term &lt; c.term &#123;</span><br><span class="line">        c.reject(msg)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> msg.Term &gt; c.term &#123;</span><br><span class="line">        <span class="keyword">if</span> msg.MsgType == raftpd.MsgPreVoteRequest &#123;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> msg.MsgType == raftpd.MsgPreVoteResponse &amp;&amp; msg.Reject &#123;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            c.becomeFollower(msg.Term, leaderId)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> msg.MsgType &#123;</span><br><span class="line">    <span class="keyword">case</span> raftpd.MsgPreVoteRequest:</span><br><span class="line">        c.handlePreVote(msg)</span><br><span class="line">    <span class="keyword">case</span> raftpd.MsgVoteRequest:</span><br><span class="line">        c.handleVote(msg)</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        c.dispatch(msg)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Raft 算法虽然更易于理解，但是实现并不简单。就以上述代码为例，Raft 如果没有 PreVote 机制，那么重新上线的候选人会通过 <code>c.reject(msg)</code> 强制让候选人参与选举。加入 PreVote 机制也不能完全避免这种情况。如果一个节点成为了候选人，此时领导人重新上线，那么候选人仍然会强制发起一次选举[3]。</p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ol><li><a href="https://ramcloud.atlassian.net/wiki/download/attachments/6586375/raft.pdf" target="_blank" rel="noopener">寻找一种易于理解的一致性算法（扩展版）</a></li><li><a href="http://blog.neverchanje.com/2017/01/30/etcd_raft_core/" target="_blank" rel="noopener">Etcd-raft-core 阅读</a></li><li><a href="http://blog.neverchanje.com/2017/01/31/morning_paper_four_modifications_mongo_raft/" target="_blank" rel="noopener">Morning Paper, MongoDB 对 Raft 算法的 4 个改动</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;和其他一致性算法相比，Raft 使用一种更强的领导能力形式。比如，日志条目只从领导者发送给其他的服务器。在选举上，Raft 算法使用一个随机计时器来选举领导者，这种方式只是在任何一致性算法都必须实现的心跳机制上增加了一点机制。[1]&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;htt
      
    
    </summary>
    
      <category term="Destribution" scheme="http://www.hashcoding.net/categories/Destribution/"/>
    
    
      <category term="Raft" scheme="http://www.hashcoding.net/tags/Raft/"/>
    
      <category term="Consensus" scheme="http://www.hashcoding.net/tags/Consensus/"/>
    
      <category term="Practice" scheme="http://www.hashcoding.net/tags/Practice/"/>
    
      <category term="Destribution" scheme="http://www.hashcoding.net/tags/Destribution/"/>
    
  </entry>
  
  <entry>
    <title>Raft 实现指北-日志模块</title>
    <link href="http://www.hashcoding.net/2018/01/02/Raft-%E5%AE%9E%E7%8E%B0%E6%8C%87%E5%8C%97-%E6%97%A5%E5%BF%97%E6%A8%A1%E5%9D%97/"/>
    <id>http://www.hashcoding.net/2018/01/02/Raft-实现指北-日志模块/</id>
    <published>2018-01-02T13:14:14.000Z</published>
    <updated>2018-01-07T04:11:06.867Z</updated>
    
    <content type="html"><![CDATA[<p>在真正开始设计之前，需要考虑好 Raft 框架的搭建。如下图所示，一个服务器由三部分组成：共识算法、状态机以及日志系统。共识算法控制多副本之间日志的同步、广播。Raft 算法主要的工作是管理日志复制，所以在 Raft 应该有一个可操作的日志模块。</p><p><img src="https://camo.githubusercontent.com/ad683fbaefbc0bc0fcb31b1d6ca6ca8f715c12cd/68747470733a2f2f646e2d307830312d696f2e71626f782e6d652f726166742d254535253942254245312d30312e706e67" alt="图一：复制状态机的结构"></p><h1 id="Write-Ahead-Log"><a href="#Write-Ahead-Log" class="headerlink" title="Write Ahead Log"></a>Write Ahead Log</h1><p>在设计日志模块之前，需要先说说<strong>预写式日志</strong>（Write Ahead Log, WAL）。预写式日志通常出现在存储系统中，以保证数据的持久性[1]。WAL 的中心思想是对数据文件进行修改前，需要保证操作日志已经同步到稳定存储介质中。如果在进行操作时出现了错误导致程序崩溃，重启的程序可以通过读取日志重建原有状态。</p><p>Raft 算法中也需要 WAL 配合工作，比如领导人得知某条日志已经有超过半数的人响应，便将其应用到状态机并将其应用结果返回给客户端。状态机将数据保存在内存中，等待系统写入磁盘。此时如果发生错误，客户端的操作日志丢失，而它又接收到了应用成功的消息，便出现了不一致。</p><h1 id="日志模块"><a href="#日志模块" class="headerlink" title="日志模块"></a>日志模块</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LogHolder</span> &#123;</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;Entry&gt; entries;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>日志的存储结构可以简单如上设计，<code>Entry</code> 表示一套操作日志记录。所有已经通过 WAL 持久化的操作日志保存在 Raft 的 <code>LogHolder</code> 中做缓存。IO 操作非常耗时，在实际的项目中每次操作先进行 IO 操作，效率不高。通常考虑 Batch 操作，将结构修改为：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LogHolder</span> &#123;</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;Entry&gt; entries;</span><br><span class="line">    <span class="keyword">size_t</span> stabled_to;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样操作日志和已经持久化的日志保存在一起，并通过 <code>stable_to</code> 区分开。这样将多个日志 <code>Entry</code> 一起写入 WAL，Batch 的方法可以提升系统整体的吞吐量，不过对于单条数据，会有部分延迟，与提升比起来是非常值得的。</p><p>当某条日志被成功复制到集群中过半数的节点中时，Raft 变认为这条日志可以被应用到状态机中，并标记这部分日志为提交状态。提交的日志采用追加的方式，那么原有数据将一直占用存储空间，而对于系统而言，已经被应用了的日志是无用的，所以 Raft 也提出了日志压缩思想。和存储系统中的日志压缩思路一致，都是通过选取某个时间点的日志创建状态机的快照，将时间点之前的日志全部丢弃。[2]</p><p>这里将上述的思想也设计到日志系统中：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// +--------------+--------------+-------------+-------------+</span></span><br><span class="line"><span class="comment">// | wait compact |  wait apply  | wait commit | wait stable |</span></span><br><span class="line"><span class="comment">// +--------------+--------------+-------------+-------------+</span></span><br><span class="line"><span class="comment">// ^ offset       ^ Applied      ^ committed   ^ stabled     ^ last</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LogHolder</span> &#123;</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;Entry&gt; entries;</span><br><span class="line">    <span class="keyword">size_t</span> offset;</span><br><span class="line">    <span class="keyword">size_t</span> last_applied;</span><br><span class="line">    <span class="keyword">size_t</span> last_committed;</span><br><span class="line">    <span class="keyword">size_t</span> last_stabled;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>offset</code> 表示日志压缩后日志系统里存储的第一条日志在整个日志中的偏移。整个模块需要保证 $0 \le offset \le last\_applied \lt last\_committed \lt entreis.size()$。需要注意，<code>last_stabled</code> 和 <code>last_committed</code> 之前不一定存在着先后顺序，比如一个出现了网络隔离的节点在一段时间后上线，领导者将将其日志复制给该节点并告知其已经全部提交了，那么就会出现日志属于已经提交的状态，但是还未持久化。</p><p>在 Raft 论文中提到，在生成日志快照时，需要保存快照最后一条日志的 <code>index</code> 和 <code>term</code> 作为元信息。也有很多访问该元信息的需求，因此可以在 <code>entries</code> 中保留一个空白（dummy）日志作为快照元信息，那么 <code>offset</code> 完全可以被该日志项替代。</p><p>整个 <code>LogHolder</code> 只负责维护日志在内存中的缓存，提供日志追加、应用、提交、持久化以及压缩的基本功能，至于具体的操作实际由使用者负责管理。</p><h2 id="API-设计"><a href="#API-设计" class="headerlink" title="API 设计"></a>API 设计</h2><p>API 设计是一个模块好用与否的关键，良好的 API 设计可以减少内部设计的暴露，减少模块间的耦合，同时提供最大程度的灵活性。这里希望 API 设计简单易用，接口数量少，粒度适中。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> LogHolder <span class="keyword">interface</span> &#123;</span><br><span class="line">    compactTo(to, term <span class="keyword">uint64</span>)</span><br><span class="line">    commitTo(<span class="keyword">uint64</span>)</span><br><span class="line">    applyEntries() []Entry</span><br><span class="line">    stableEntries() []Entry</span><br><span class="line">    term(<span class="keyword">uint64</span>) <span class="keyword">uint64</span></span><br><span class="line">    isUpToDate(idx, term <span class="keyword">uint64</span>) <span class="keyword">bool</span></span><br><span class="line">    tryAppend(idx, term, commitIdx <span class="keyword">uint64</span>, entries []Entry) (<span class="keyword">uint64</span>, <span class="keyword">bool</span>)</span><br><span class="line">    <span class="built_in">append</span>(entries []Entry) <span class="keyword">uint64</span></span><br><span class="line">    slice(lo, hi <span class="keyword">uint64</span>) []Entry</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>compactTo</code>: 当应用生成了快照后，需要对冗余的日志进行压缩；</li><li><code>commitTo</code>: 日志复制到集群中半数节点中或跟随者接收到领导人提交日志的命令时调用，修改 <code>last_commit</code> 属性；</li><li><code>stableEntries</code>: 读取待持久化的日志，并将这部分日志标记为已经持久化；</li><li><code>applyEntries</code>: 读取待应用到状态机的日志，同时将其日志标记为已经应用；</li><li><code>term</code>: 返回某个日志提交到集群中的 <code>term</code>；</li><li><code>isUpToDate</code>: 用于判断候选人是否拥有最新的日志；</li><li><code>tryAppend</code>: 跟随者添加日志，会将冲突的日志丢弃；</li><li><code>append</code>: 领导添加日志，只有追加功能；</li><li><code>slice</code>: 分片</li></ul><p><code>compactTo</code>，<code>commitTo</code> 负责修改其只修改日志模块属性信息。<code>compactTo</code> 对日志进行压缩，其可用范围为 $[offset, last\_applied]$，范围内的数据均已经应用到状态机中。实际上在跟随者从网络隔离中恢复或新加入集群时，领导人会选择发送日志来加速跟随者的同步，此时快照并没有落到可用范围内，或者日志与快照的元信息冲突（跟随者在一个少数派的网络中增加了很多日志），因此需要对整个日志系统进行重建。<code>commitTo</code> 只需要对 <code>to</code> 范围进行验证，修改 <code>last_commit</code> 即可。</p><p><code>stableEntries</code> 和 <code>applyEntries</code> 不需要任何参数，根据属性设置对应的 <code>slice</code>，并返回需要持久化、应用的日志队列。</p><p><code>isUpToDate</code> 比较给出的日志项和日志模块谁更新。根据 Raft 论文中给出了谁<strong>比较新</strong>的定义：如果两份日志最后的条目的任期号不同，那么任期号大的日志更加新；如果两份日志最后的条目任期号相同，那么日志比较长的那个就更加新。</p><p><code>tryAppend</code> 是用于提交领导人复制给候选人的日志，由于网络分化或者节点的加入退出，获选人的日志可能落后、冲突于领导人提供的日志，日志模块需要对待追加的日志进行检查，并找出冲突项目并替换。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p><code>compactTo</code> 设计如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(holder *LogHolder)</span> <span class="title">CompactTo</span><span class="params">(to, term <span class="keyword">uint64</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> holder.Term(to) != term || to &lt;= holder.offset() || to &gt; holder.lastApplied &#123;</span><br><span class="line"><span class="comment">// log entry conflict with exists, or less than offset, or great than applied</span></span><br><span class="line"><span class="comment">// so need to rebuild log</span></span><br><span class="line">entries := <span class="built_in">make</span>([]raftpd.Entry, <span class="number">1</span>)</span><br><span class="line">entries[<span class="number">0</span>].Index = to</span><br><span class="line">entries[<span class="number">0</span>].Term = term</span><br><span class="line">holder.entries = entries</span><br><span class="line">holder.lastApplied = to</span><br><span class="line">holder.commitIndex = to</span><br><span class="line">holder.lastStabled = to</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">offset := holder.offset()</span><br><span class="line">utils.Assert(offset &lt;= to, <span class="string">"%d compact idx: %d less than first index: %d"</span>,</span><br><span class="line">holder.id, to, offset)</span><br><span class="line">holder.entries = drain(holder.entries, <span class="keyword">int</span>(to-offset))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先检查是否存在冲突、或者没有在范围之内，都不存在才对日志队列进行压缩；否则重建日志模块，清空日志队列。因为使用了 dummy 日志项的缘故，这里也要把快照元信息作为一个 dummy log 保存。</p><p>和 <code>compactTo</code> 比起来，<code>commitTo</code> 的实现就容易得多。<code>commitTo</code> 需要保证<strong>状态机安全性</strong>和<strong>领导人完全性</strong>[2]，不能减少 <code>commit_index</code>；同时也要保证容错，即在服务器宕机恢复后数据具有一致性，每个可提交的日志需要已经持久化到本地。<code>commitTo</code> 需要保证数据范围在 $[commit_index, last\_stabled]$ 之间。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(holder *LogHolder)</span> <span class="title">CommitTo</span><span class="params">(to <span class="keyword">uint64</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> holder.commitIndex &gt;= to &#123;</span><br><span class="line"><span class="comment">/* never decrease commit */</span></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> holder.lastStabled &lt; to &#123;</span><br><span class="line"><span class="comment">/* cannot commit unstable log entry */</span></span><br><span class="line">to = utils.MinUint64(to, holder.lastStabled)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">utils.Assert(holder.lastIndex() &gt;= to, <span class="string">"%d toCommit %d is out of range [last index: %d]"</span>,</span><br><span class="line">holder.id, to, holder.lastIndex())</span><br><span class="line"></span><br><span class="line">holder.commitIndex = to</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>stableEntries</code> 和 <code>applyEntries</code> 需要返回待持久化或待应用的日志，同时会修改属性，将这已返回的日志标记为已持久化或已经应用。<code>term</code> 的实现比较直观，<code>isUpToDate</code> 的实现按照论文给出的定义即可。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(holder *LogHolder)</span> <span class="title">IsUpToDate</span><span class="params">(idx, term <span class="keyword">uint64</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> term &gt; holder.lastTerm() || (term == holder.lastTerm() &amp;&amp; idx &gt;= holder.lastIndex())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>append</code> 由领导人负责调用，由<strong>领导人只附加原则</strong>决定其只追加新日志到模块中。因为 Raft 的日志具有连续性，追加时要保证第一条追加的日志要紧接着日志模块的最后一条日志。<code>tryAppend</code> 由跟随者调用，正常情况下领导人发送的日志可以直接追加到跟随者的日志模块中。跟随者可能是新加入集群，并通过快照已经恢复到了快照所处的状态，此时也可以直接追加到日志模块里。当跟随者出现网络隔离导致日志远低于领导人复制来的第一条日志项（重新选举时），或日志项与领导人提供的存在冲突。如果第一条日志存在冲突，那么需要提醒领导人发送合适的日志；如果仅仅部分日志存在冲突，跟随者需要丢弃冲突日志，然后将领导人提供的日志追加到日志模块中（根据<strong>日志匹配原则</strong>），此时需要保证不能抛弃任何已经提交的日志（<strong>状态机安全性</strong>和<strong>领导人完全性</strong>）。</p><p><code>tryAppend</code> 的第一步是找出第一个与现有日志存在冲突的日志索引，然后根据冲突索引丢弃存在冲突的日志，并返回。<code>tryAppend</code> 的返回值表示是否成功的将日志追加到系统中。Raft 论文 5.3 节提出了一个优化方式，<em>算法可以通过减少被拒绝的附加日志 RPCs 的次数来优化</em>，这里可以使用算法给出的一种优化方式：当附加日志 RPC 的请求被拒绝的时候，跟随者可以包含冲突的条目的任期号和自己存储的那个任期的最早的索引地址。因此在拒绝该追加请求时，还给领导人返回提示索引。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(holder *LogHolder)</span> <span class="title">getHintIndex</span><span class="params">(prevIdx, prevTerm <span class="keyword">uint64</span>)</span> <span class="title">uint64</span></span> &#123;</span><br><span class="line">utils.Assert(prevIdx != InvalidIndex &amp;&amp; prevTerm != InvalidTerm,</span><br><span class="line"><span class="string">"%d get hint index with invalid idx or Term"</span>, holder.id)</span><br><span class="line"></span><br><span class="line">idx := prevIdx</span><br><span class="line">term := holder.Term(idx)</span><br><span class="line"><span class="keyword">for</span> idx &gt; InvalidIndex &#123;</span><br><span class="line"><span class="keyword">if</span> holder.Term(idx) != term &#123;</span><br><span class="line"><span class="keyword">return</span> utils.MaxUint64(holder.commitIndex, idx)</span><br><span class="line">&#125;</span><br><span class="line">idx--</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> holder.commitIndex</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// findConflict return the first index which Entries[i].Term is not equal</span></span><br><span class="line"><span class="comment">// to holder.Term(Entries[i].Index), if all Term with same index are equals,</span></span><br><span class="line"><span class="comment">// return zero.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(holder *LogHolder)</span> <span class="title">findConflict</span><span class="params">(entries []raftpd.Entry)</span> <span class="title">uint64</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(entries); i++ &#123;</span><br><span class="line">entry := &amp;entries[i]</span><br><span class="line"><span class="keyword">if</span> holder.Term(entry.Index) != entry.Term &#123;</span><br><span class="line"><span class="keyword">if</span> entry.Index &lt;= holder.lastIndex() &#123;</span><br><span class="line">log.Infof(<span class="string">"%d found conflict at index %d, "</span>+</span><br><span class="line"><span class="string">"[existing Term: %d, conflicting Term: %d]"</span>,</span><br><span class="line">holder.id, entry.Index, holder.Term(entry.Index), entry.Term)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> entry.Index</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(holder *LogHolder)</span> <span class="title">TryAppend</span><span class="params">(prevIdx, prevTerm, leaderCommittedIdx <span class="keyword">uint64</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">entries []raftpd.Entry)</span> <span class="params">(<span class="keyword">uint64</span>, <span class="keyword">bool</span>)</span></span> &#123;</span><br><span class="line">lastIdxOfEntries := prevIdx + (<span class="keyword">uint64</span>)(<span class="built_in">len</span>(entries))</span><br><span class="line"><span class="keyword">if</span> holder.Term(prevIdx) == prevTerm &#123;</span><br><span class="line">conflictIdx := holder.findConflict(entries)</span><br><span class="line"><span class="keyword">if</span> conflictIdx == <span class="number">0</span> &#123;</span><br><span class="line"><span class="comment">/* success, no conflict */</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> conflictIdx &lt;= holder.commitIndex &#123;</span><br><span class="line">log.Panicf(<span class="string">"%d entry %d conflict with committed entry %d"</span>,</span><br><span class="line">holder.id, conflictIdx, holder.commitIndex)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">offset := prevIdx + <span class="number">1</span></span><br><span class="line">holder.Append(entries[conflictIdx-offset:])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> lastIdxOfEntries, <span class="literal">true</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">utils.Assert(prevIdx &gt; holder.commitIndex,</span><br><span class="line"><span class="string">"%d entry %d [Term: %d] conflict with committed entry Term: %d"</span>,</span><br><span class="line">holder.id, prevIdx, prevTerm, holder.Term(prevIdx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> holder.getHintIndex(prevIdx, prevTerm), <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="done"><a href="#done" class="headerlink" title="done"></a>done</h1><p>至此，日志模块的实现就结束了。日志模块是整个 Raft 算法的基础，这里将日志模块剥离出来，并将提供一些原子方法。每个方法只干一件事，从而使分析方法正确性的分析更容易；每个方法都可以看作是纯函数，所以输入一定，输出则一定。实际上分布式程序的调试是一个非常困难的方式：</p><blockquote><p>你的并发模型往往会成为你代码库中的病毒。你希望有细粒度的并发控制，好吧，你得到了，代码里到处都是。因此是并发导致了不确定性，而不确定性造成了麻烦。因此必须得把并发给踢出去。可是你又不能抛弃并发，你需要它。那么，你一定要禁止把并发和你的分布式状态机结合在一起。换句话说，你的分布式状态机必须成为纯函数式的。没有IO操作，没有并发，什么都没有。[3]</p></blockquote><p>好的办法是将其抽象成纯函数式的，通过消息进行驱动，这样能够对程序拥有控制力，出现问题是可以完美重现，也能够跟踪定位到问题所在。从 Raft 算法的角度看，在上面的实现里，日志模块只是一个黑匣子，每个操作好比一个按钮，如果得到的不是想要的结果，那肯定是输入有问题（前提是黑匣子实现正确）。因此上面的代码很好的解开了算法和日志模块的耦合，隔离了双方的错误干扰。</p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ol><li><a href="https://zh.wikipedia.org/wiki/%E9%A2%84%E5%86%99%E5%BC%8F%E6%97%A5%E5%BF%97" target="_blank" rel="noopener">预写式日志</a></li><li><a href="https://ramcloud.atlassian.net/wiki/download/attachments/6586375/raft.pdf" target="_blank" rel="noopener">寻找一种易于理解的一致性算法（扩展版）</a></li><li><a href="http://blog.jobbole.com/20304/" target="_blank" rel="noopener">分布式系统编程，你到哪一级了？</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在真正开始设计之前，需要考虑好 Raft 框架的搭建。如下图所示，一个服务器由三部分组成：共识算法、状态机以及日志系统。共识算法控制多副本之间日志的同步、广播。Raft 算法主要的工作是管理日志复制，所以在 Raft 应该有一个可操作的日志模块。&lt;/p&gt;
&lt;p&gt;&lt;img s
      
    
    </summary>
    
      <category term="Destribution" scheme="http://www.hashcoding.net/categories/Destribution/"/>
    
    
      <category term="Raft" scheme="http://www.hashcoding.net/tags/Raft/"/>
    
      <category term="Consensus" scheme="http://www.hashcoding.net/tags/Consensus/"/>
    
      <category term="Practice" scheme="http://www.hashcoding.net/tags/Practice/"/>
    
      <category term="Destribution" scheme="http://www.hashcoding.net/tags/Destribution/"/>
    
  </entry>
  
  <entry>
    <title>Raft 实现指北-开篇</title>
    <link href="http://www.hashcoding.net/2018/01/01/Raft-%E5%AE%9E%E7%8E%B0%E6%8C%87%E5%8C%97-%E5%BC%80%E7%AF%87/"/>
    <id>http://www.hashcoding.net/2018/01/01/Raft-实现指北-开篇/</id>
    <published>2018-01-01T01:34:16.000Z</published>
    <updated>2018-01-02T13:15:43.064Z</updated>
    
    <content type="html"><![CDATA[<p>Raft 是一种解决分布式共识问题的算法。何为分布式共识问题？在此之前，还得说说分布式系统中的基础模型。基础模型是对分布式算法的一个定性的评估（分类）标准，它说明了算法的作用范围，可解决什么问题。</p><h1 id="基础模型"><a href="#基础模型" class="headerlink" title="基础模型"></a>基础模型</h1><p>基础模型也可以称为算法的属性，这里主要关心两个部分：定时模型（Timing Model）、失效模式（Failure Model）、失效检测器（Failure Detectors）[1]。</p><p>定时模型是研究分布式系统的网络传输时延特性，分布式系统通过消息传递来进行通信，根据消息在网络中传递时间是否有上界，可以将消息系统分类为：<strong>同步模型（Synchronous Model）</strong>和<strong>异步模型（Asynchronous Model）</strong>[2]。在同步模型中，消息传递时间是已知的，每个进程的速度也是确定的，即每个进程执行一个算法步骤耗时是确定的。在异步模型中，每个组件自行决定算法步骤的执行顺序，每一步的耗时也没有保证[1]。注意，这里的<em>同步</em>和<em>异步</em>要与编程中出现的同步异步加以区分。</p><p>失效模式是对分布式系统中节点失效种类的假设。最基础的是<strong>崩溃-结束（crash-stop）失效模式</strong>，节点一直正常运行，直至崩溃，节点崩溃后不会恢复。相较于崩溃-结束失效模式，另一种<strong>崩溃-恢复（crash-recovery）失效模式</strong>更为常见，即节点崩溃后，会被恢复。值得一提的是崩溃-恢复模式中，一个节点恢复时，并不等同于没崩溃的原始节点（比如 Raft 算法动态调整系群组关系，某个节点被另一个新加入节点顶替）。一种更复杂的失效模式叫做<strong>拜占庭失效模式</strong>或者<strong>任意失效模式（Byzantine or arbitrary failures mode）</strong>：进程有可能向同伴发送错误的信息；进程可能是冒充的；应答给其他进程的数据是正确的，但是篡改了本地数据库的内容，等等[2]。设计分布式系统时，失效模式必须考虑进去，通常来说，我们并不需要考虑拜占庭失效模式。</p><p>上述两种属性能够描述分布式系统所处的问题，另外还有部分属性用于对系统工作方式进行分类，失效检测器便是这样的一种属性。<strong>失效检测器</strong>是对<em>报告系统状态</em>的抽象，即检测节点是否已经崩溃（或者怀疑是否崩溃）。失效检测器是在异步系统中解决共识问题的关键。在著名的FLP论文中指出，在异步的分布式系统中，如果进程有可能失效，那么就不可能达成共识。要达成共识，就必须为系统引入一个能够规避上述问题的失效检测器[1]。</p><h1 id="分布式共识问题"><a href="#分布式共识问题" class="headerlink" title="分布式共识问题"></a>分布式共识问题</h1><p>分布式共识问题，简单说，就是在一个或多个进程提议了一个值应当是什么后，使系统中所有进程对这个值达成一致意见。为了达到共识，每个进程都提出自己的提议（propose），最终通过共识算法，所有正确运行的进程决定（decide）相同的值[2]。</p><p>在同步、可靠的系统中，想要多个节点达成一致比较容易。实际的分布式场景多为异步模型，FLP不可能性说明：没有任何算法可以在存在任何故障的异步系统中确保达到共识，绕过不可能性结论的办法是考虑部分同步系统，利用故障屏蔽、故障检测器或随机化手段避开异步系统模型[2]。</p><p>分布式问题最常见的应用场景是多副本状态机（Replicated state machine）。<strong>多副本状态机是指多台机器具有完全相同的状态，并且运行有完全相同的确定性状态机</strong>[2]。多副本状态机主要用于解决分布式系统中的容错问题，因为副本冗余了状态机，只要保证大多数副本存活且一致，就能向外部提供服务。多副本状态机的实现思想：状态机的每个副本上都保存有完全相同的操作日志，保证所有副本状态机按照相同的顺序执行操作，这样由于状态机是确定性的，则一定会得到相同的状态[2]。具体的实现方式主要分为两种[3]：</p><ul><li>日志复制：由 primary 机接受操作日志，并广播给 backup 机，backup 机需要跟 primary 机的操作日志保持一致；</li><li>状态重演：操作日志由多个副本共享，每个副本通过重新执行操作日志从放状态；</li></ul><h1 id="Raft-算法"><a href="#Raft-算法" class="headerlink" title="Raft 算法"></a>Raft 算法</h1><p>有三种非常具有代表性的分布式共识算法：分别是 Viewstamped Replication 、Raft 和大名鼎鼎的 Paxos 算法，前两个工作本身就是基于多副本状态机的场景完成的，而 Paxos 算法是作为独立的分布式共识算法提出，并给出了使用该算法实现多副本状态机的范例[2]。</p><p>Raft 是一种为了管理复制日志的一致性算法。它提供了和 Paxos 算法相同的功能和性能，但是它的算法结构和 Paxos 不同，使得 Raft 算法更加容易理解并且更容易构建实际的系统。为了提升可理解性，Raft 将一致性算法分解成了几个关键模块，例如领导人选举、日志复制和安全性。同时它通过实施一个更强的一致性来减少需要考虑的状态的数量。从一个用户研究的结果可以证明，对于学生而言，Raft 算法比 Paxos 算法更加容易学习。Raft 算法还包括一个新的机制来允许集群成员的动态改变，它利用重叠的大多数来保证安全性[4]。</p><p>与其他共识算法相比，Raft 算法有三个特点[4]：</p><ul><li>强领导者：和其他一致性算法相比，Raft 使用一种更强的领导能力形式。比如，日志条目只从领导者发送给其他的服务器。这种方式简化了对复制日志的管理并且使得 Raft 算法更加易于理解。</li><li>领导选举：Raft 算法使用一个随机计时器来选举领导者。这种方式只是在任何一致性算法都必须实现的心跳机制上增加了一点机制。在解决冲突的时候会更加简单快捷。</li><li>成员关系调整：Raft 使用一种共同一致的方法来处理集群成员变换的问题，在这种方法下，处于调整过程中的两种不同的配置集群中大多数机器会有重叠，这就使得集群在成员变换的时候依然可以继续工作。</li></ul><p>虽然这篇文章标题有“Raft 实现”关键字，但并不会讲 Raft 算法的原理，这只是 Raft 的功能实现介绍，所以我建议在继续阅读之前，先学习一下 Raft 算法：<a href="https://github.com/maemual/raft-zh_cn/blob/master/raft-zh_cn.md" target="_blank" rel="noopener">寻找一种易于理解的一致性算法（扩展版）</a>。</p><h1 id="挖坑"><a href="#挖坑" class="headerlink" title="挖坑"></a>挖坑</h1><p>一个基础的 Raft 功能只需要实现选举和日志复制，但这远远不够。想要应用到实际的工程中，还需要实现日至压缩、成员关系调整，才算完整的 Raft 实现。这里给出个 Raft 功能清单，实际上也是本系列文章希望实现的功能：</p><ul><li>leader election</li><li>prevote </li><li>log replication </li><li>log compaction &amp; snapshot </li><li>linearizable read(read index &amp; lease)</li><li>membership change </li><li>leadership transfer</li></ul><p>拥有上述功能可以算上一个工业级的 Raft 实现，不过在实际应用中，还会有许多工业上的优化技巧比如 Batch 和 Pipeline，具体有哪些可以优化的，放到以后的章节详述。</p><p>这是我在学习 Raft 算法，并以之为基础实现分布式系统过程中的学习总结。在接下来的几篇文章中，将按照上述清单依次谈谈对应的实现方法和优化原理。实现方法参考优秀的开源实现：etcd/raft 以及其各语言移植版本。</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ol><li><a href="http://alvaro-videla.com/2015/12/learning-about-distributed-systems.html" target="_blank" rel="noopener">WHAT WE TALK ABOUT WHEN WE TALK ABOUT DISTRIBUTED SYSTEMS</a></li><li><a href="http://blog.kongfy.com/2016/05/%E5%88%86%E5%B8%83%E5%BC%8F%E5%85%B1%E8%AF%86consensus%EF%BC%9Aviewstamped%E3%80%81raft%E5%8F%8Apaxos/" target="_blank" rel="noopener">分布式共识(Consensus)：Viewstamped Replication、Raft以及Paxos</a></li><li>The design of a practical system for Fault-Tolerant Virtual Machines</li><li><a href="https://ramcloud.atlassian.net/wiki/download/attachments/6586375/raft.pdf" target="_blank" rel="noopener">寻找一种易于理解的一致性算法（扩展版）</a></li><li><a href="http://blog.jobbole.com/20304/" target="_blank" rel="noopener">分布式系统编程，你到哪一级了？</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Raft 是一种解决分布式共识问题的算法。何为分布式共识问题？在此之前，还得说说分布式系统中的基础模型。基础模型是对分布式算法的一个定性的评估（分类）标准，它说明了算法的作用范围，可解决什么问题。&lt;/p&gt;
&lt;h1 id=&quot;基础模型&quot;&gt;&lt;a href=&quot;#基础模型&quot; clas
      
    
    </summary>
    
      <category term="Destribution" scheme="http://www.hashcoding.net/categories/Destribution/"/>
    
    
      <category term="Raft" scheme="http://www.hashcoding.net/tags/Raft/"/>
    
      <category term="Consensus" scheme="http://www.hashcoding.net/tags/Consensus/"/>
    
      <category term="Practice" scheme="http://www.hashcoding.net/tags/Practice/"/>
    
      <category term="Destribution" scheme="http://www.hashcoding.net/tags/Destribution/"/>
    
  </entry>
  
  <entry>
    <title>Mysql 事务隔离级别的使用</title>
    <link href="http://www.hashcoding.net/2017/12/07/Mysql%20%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://www.hashcoding.net/2017/12/07/Mysql 事务隔离级别的使用/</id>
    <published>2017-12-07T07:00:00.000Z</published>
    <updated>2017-12-07T12:05:34.963Z</updated>
    
    <content type="html"><![CDATA[<p>最近在项目中遇到一个问题，在 Mysql 的 Repeatable Read 隔离级别下，出现了数据丢失更新。一开始怀疑的是事务失效，被排查后否定。最后定位到 Mysql 事务的使用问题上。我们的 Sql 场景类似于：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT number FROM A WHERE ID = 1;</span><br><span class="line">UPDATE A SET NUMBER = number + 1 WHERE ID = 1;</span><br></pre></td></tr></table></figure><h2 id="事务回顾"><a href="#事务回顾" class="headerlink" title="事务回顾"></a>事务回顾</h2><p>事务有四种特性（ACID）：</p><ul><li>原子性</li><li>隔离性</li><li>一致性</li><li>持久性</li></ul><p>在执行事务时可能出现以下问题：</p><ul><li>丢失更新：<ol><li>第一类丢失更新：事务失败回滚时将其他事务已经提交的数据覆盖</li><li>第二类丢失更新：事务提交时，覆盖了其他事务的提交（类似 += ，是不可重复读的特例）</li></ol></li><li>脏读：事务读取了其他事务还未提交的内容</li><li>不可重复读：一个事务中多次读取同一个内容，结果不一致</li><li>幻读：一个事务中两次查询，但第二次查询比第一次查询多了或少了几行或几列数据</li></ul><p>为了解决上述问题，数据库系统提供了四种事务隔离级别供用户选择：</p><ul><li>Read Uncommitted 读未提交：不允许第一类更新丢失。允许脏读，不隔离事务。</li><li>Read Committed 读已提交：不允许脏读，允许不可重复读。</li><li>Repeatable Read 可重复读：不允许不可重复读。但可能出现幻读。</li><li>Serializable 串行化：所有的增删改查串行执行。</li></ul><p>在传统的事务隔离级别的实现中，可重复读已经能够避免了两类丢失更新，对于绝大多数的事务，只需要将<br>隔离级别设置为可重复读。</p><h2 id="Snapshot-isolation-amp-MVCC"><a href="#Snapshot-isolation-amp-MVCC" class="headerlink" title="Snapshot isolation &amp; MVCC"></a>Snapshot isolation &amp; MVCC</h2><p>需要明确的是，以上的ACID和隔离级别定义是在SQL规范层面的定义，不同数据库的实现方式和使用方式并不相同。上面的隔离级别标准是SQL92 基于读写锁的实现方式制定的规范。</p><p>为了克服并发问题，各个数据库厂商都引入了 MVCC （多版本并发控制）来提高并发度。所以实际上的事务实现与规范定义的出现了细微的差别，而这细微的差别，就是本文出现的原因。（下文主要以 Mysql innoDB 存储引擎的 MVCC 实现为主，InnoDB 中的 MVCC 为表添加了隐藏的列，打上版本号，来提供多版本功能）。</p><p>所以在 MVCC 中，SELECT 语句执行时，会执行快照读取（称为快照读，也称为一致性读）。如果数据被锁，直接读取 undo log 来读取其被锁前的副本。在 Read Commit 隔离级别中，快照读总是读取对应行的最新版本；如果该行被锁住，则会读取最近一次的快照。在 Repeatable Read 隔离级别中，快照读总是读取事务开始时的数据版本。</p><p>这种方式极大的提升了并发读取的效率，本质也非常类似乐观锁。所以这种方式实现的隔离级别与规范定义存在一定差异，在 Repeatable Read 中，这种差异导致了 innoDB 第二类更新丢失的出现。因此，使用 MVCC 实现的隔离级别也被称为快照隔离级别。</p><p>SI 隔离与规范的 RR 隔离级别的区别在于读取 SI 的 SELECT 语句为快照读，而传统的 SELECT 语句则为当前读（加读锁:locking read, LR）。</p><p>在 InnoDB 中，update, delete 执行的是加锁读，想要将 SELECT 语句也设置为加锁读，需要在语句后加上 FOR UPDATE, LOCK IN SHARE MODE。具体的加锁方式取决于用户使用的是那种查询计划：</p><ul><li>unique index with a unique search condition</li><li>a range-type search condition</li></ul><p>对于第一种方式，InnoDB 只对其所在的索引进行加锁，不影响其他内容。对于第二种方式，InnoDB 通过使用间隙锁（gap locks)或者 next-key locks 来实现。因为这种加锁落实到区间上，所以也有可能锁住不必要的内容。因此 InnoDB 也号称在 RR 级别上实现了 Serializable 隔离级别。</p><p>next-key locks 能排除大多数的幻读现象，只会存在 write skew style 的幻读。</p><p>回到题目最开始的问题上，因为这种不规范的事务实现，导致了在高并发情况下会存在第二类丢失更新问题。只需要在 SELECT 后面加上 FOR UPDATE 就能避免出现的问题。</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="http://www.jianshu.com/p/71a79d838443" target="_blank" rel="noopener">事务并发的问题以及其解决方案</a></li><li><a href="http://www.fanyilun.me/2015/12/29/%E4%BA%8B%E5%8A%A1%E7%9A%84%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB%E4%BB%A5%E5%8F%8AMysql%E4%BA%8B%E5%8A%A1%E7%9A%84%E4%BD%BF%E7%94%A8/" target="_blank" rel="noopener">事务隔离级别与 Mysql 中事务的使用</a></li><li><a href="https://tech.meituan.com/innodb-lock.html" target="_blank" rel="noopener">Innodb中的事务隔离级别和锁的关系</a></li><li><a href="https://dev.mysql.com/doc/refman/5.6/en/innodb-consistent-read.html" target="_blank" rel="noopener">Consistent Nonlocking Reads</a></li><li><a href="https://dev.mysql.com/doc/refman/5.6/en/innodb-transaction-isolation-levels.html" target="_blank" rel="noopener">innodb-transaction-isolation-levels</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在项目中遇到一个问题，在 Mysql 的 Repeatable Read 隔离级别下，出现了数据丢失更新。一开始怀疑的是事务失效，被排查后否定。最后定位到 Mysql 事务的使用问题上。我们的 Sql 场景类似于：&lt;/p&gt;
&lt;figure class=&quot;highligh
      
    
    </summary>
    
      <category term="总结" scheme="http://www.hashcoding.net/categories/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="Mysql" scheme="http://www.hashcoding.net/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>个人站点：Mysql 5.6 内存占用配置</title>
    <link href="http://www.hashcoding.net/2017/09/07/%E4%B8%AA%E4%BA%BA%E7%AB%99%E7%82%B9%EF%BC%9AMysql-5-6-%E5%86%85%E5%AD%98%E5%8D%A0%E7%94%A8%E9%85%8D%E7%BD%AE/"/>
    <id>http://www.hashcoding.net/2017/09/07/个人站点：Mysql-5-6-内存占用配置/</id>
    <published>2017-09-07T14:58:09.000Z</published>
    <updated>2017-09-07T15:14:59.151Z</updated>
    
    <content type="html"><![CDATA[<p>前两天刚把服务器部署上，今天就出现了异常。在 App 上看是服务器直接宕机。原本以为仅仅是服务端挂了，在服务器上使用 <code>ps aux | grep java</code> 发现进程还在，只是不服务了。打开 log 发现 Java run out of memory，导致无法创建新的线程。</p><p>使用 <code>top -o %MEM</code> 查看，java 占用近 200M，mysql 占用近 500 M。因为是个人用的小服务器，只有 1G 内存，吃紧得很。既然 mysql 占用了最多的内存，就让它吐出一点好了。</p><p>一开始猜测是 InnoDB 缓冲区过大，不过在 <code>/etc/mysql/my.cnf</code> 中发现配置的缓存已经非常小了。后来在网上发现是因为 Mysql 5.6 版本默认 GA 配置过大，导致初始需要近 400M 空间。通过下面配置，直接讲内存降到 100M 以下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">performance_schema_max_table_instances=400</span><br><span class="line">table_definition_cache=400</span><br><span class="line">table_open_cache=256</span><br></pre></td></tr></table></figure><p>参数意义：</p><ul><li><code>performance_schema_max_table_instances</code></li></ul><p>The maximum number of instrumented table objects</p><p>检测的表对象的最大数目。</p><ul><li><code>table_definition_cache</code></li></ul><p>The number of table definitions (from .frm files) that can be stored in the definition cache. If you use a large number of tables, you can create a large table definition cache to speed up opening of tables. The table definition cache takes less space and does not use file descriptors, unlike the normal table cache. The minimum and default values are both 400. </p><p>缓存 <code>frm</code> 文件</p><ul><li><code>table_open_cache</code><br>The number of open tables for all threads. Increasing this value increases the number of file descriptors that mysqld requires. </li></ul><p><code>table_open_cache</code> 指的是缓存数据文件的描述符(Linux/Unix)相关信息</p><p>在 5.6 中的默认配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">performance_schema_max_table_instances 12500</span><br><span class="line">table_definition_cache 1400</span><br><span class="line">table_open_cache 2000</span><br></pre></td></tr></table></figure><p><em>References:</em></p><ul><li><a href="http://www.cnblogs.com/yum777/p/6554901.html" target="_blank" rel="noopener">解决 Mysql 内存占用巨大问题</a></li><li><a href="http://blog.csdn.net/wulantian/article/details/41119755" target="_blank" rel="noopener">MySQL 5.6内存占用过高解决方案</a></li><li><a href="http://bbs.csdn.net/topics/390724779" target="_blank" rel="noopener">linux 下mysql内存占用过高</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前两天刚把服务器部署上，今天就出现了异常。在 App 上看是服务器直接宕机。原本以为仅仅是服务端挂了，在服务器上使用 &lt;code&gt;ps aux | grep java&lt;/code&gt; 发现进程还在，只是不服务了。打开 log 发现 Java run out of memory
      
    
    </summary>
    
      <category term="Linux 服务器" scheme="http://www.hashcoding.net/categories/Linux-%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="Mysql" scheme="http://www.hashcoding.net/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>CSKS-(三)、设计模式</title>
    <link href="http://www.hashcoding.net/2017/08/26/CSKS-%E4%B8%89-%E3%80%81%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://www.hashcoding.net/2017/08/26/CSKS-三-、设计模式/</id>
    <published>2017-08-26T02:00:49.000Z</published>
    <updated>2017-08-26T02:01:47.093Z</updated>
    
    <content type="html"><![CDATA[<h1 id="面对对象原则"><a href="#面对对象原则" class="headerlink" title="面对对象原则"></a>面对对象原则</h1><ul><li>单一职责：不要存在多于一个导致类变更的原因；通俗的说，即一个类只负责一项职责；</li><li>里氏替换：所有引用基类的地方必须能透明地使用其子类的对象；通俗的来讲就是：子类可以扩展父类的功能，但不能改变父类原有的功能；</li><li>依赖倒置：高层模块不应该依赖低层模块，二者都应该依赖其抽象；抽象不应该依赖细节；细节应该依赖抽象；</li><li>接口隔离：客户端不应该依赖它不需要的接口；一个类对另一个类的依赖应该建立在最小的接口上；</li><li>迪米特法则：一个对象应该对其他对象保持最少的了解；</li><li>开闭原则：一个软件实体如类、模块和函数应该对扩展开放，对修改关闭；</li></ul><h1 id="23种设计模式"><a href="#23种设计模式" class="headerlink" title="23种设计模式"></a>23种设计模式</h1><p><em>References</em></p><ul><li><p><a href="http://www.jianshu.com/p/dbc8a279165d" target="_blank" rel="noopener">设计模式大总汇</a></p></li><li><p>单例模式：确保整个程序中只有一个实例，并自行实例化以向整个体统提供实例</p></li><li>工厂方法模式：将实例的创建延迟到子类</li><li>抽象工厂模式：为创建一组相互依赖的对象提供一个接口，并将创建过程延迟到子类</li><li>建造者模式：将一个复杂对象的创建和表示分离开来，使得同一个创建过程可以得到不同的表示</li><li>原型模式：</li><li>迭代器模式：在不暴露内部实现的情况下，使客户可以遍历容器内部对象</li><li>责任联模式：将对象连成一条链，并沿着这条链传递该请求，直到有对象处理该请求位置，解决了发送方和接收方的耦合</li><li>桥梁模式：将抽象和实现解耦，使两者可以独立变化</li><li>适配器模式：将一个对象的接口转换成另一个对象期待的接口，从而使原本不匹配的对象能在一起工作</li><li>中介者模式：将一系列对象的交互封装起来，使其耦合松散，而且可以独立变化</li><li>观察者模式：定义一种1-N的关系，使得当一个对象更新时，所有依赖它的对象都能收到通知并响应</li><li>命令模式：将客户参数化，使得客户请求可以记录、排队，并能实现撤销，恢复等功能</li><li>亨元模式：使用共享对象可以有效的支持大量细粒度的对象</li><li>状态模式：当一个对象状态改变时改变其行为，使得对象看起来像是改变了类</li><li>解释器模式：定义一组语言及其解释器</li><li>访问者模式：定义一组接口，从而是现在不改变数据结构自身的情况下添加职责</li><li>装饰器模式：动态的为一个对象添加一些额外的职责，比生成子类要简单</li><li>代理模式：提供一种代理以控制对对象的访问</li><li>策略模式：定义并封装一组可以互换的算法</li><li>模板方法模式：定义一个算法的骨架，将一些具体步骤延迟到子类。使得子类可以不改变算法结构即重定义算法特定步骤</li><li>组合模式：</li><li>门面模式：</li><li>备忘录模式：</li></ul><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><p>单例模式重点在两个方面：</p><ul><li>系统只有一个实例；</li><li>自行实例化并向整个系统提供这个实例；</li></ul><p>单例模式的实现上有两个重要的因素：</p><ul><li>线程安全；</li><li>延迟加载；</li></ul><p>延迟加载技术可以解耦依赖链与初始化顺序。如果单例在程序执行前就进行初始化，某一个单例的初始化过程中，又引用到了另一个单例，便出现了加载顺序的决议问题。而使用延迟加载技术将这种依赖过程与初始化顺序进行了自动决议。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">instance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> Singleston * sing = NULL;</span><br><span class="line">  <span class="keyword">if</span> (sing == NULL) &#123;</span><br><span class="line">    sing = <span class="keyword">new</span> Singleston;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sing;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>线程安全方面则根据语言不同而有所差异，以 C++ 为例，C++11 标准规定了局部静态变量初始化的线程安全特性，所以写起来非常方便：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">instance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> Class ins;</span><br><span class="line">  <span class="keyword">return</span> ins;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>按照这种写法不仅线程安全，同时还解决了依赖问题。如果不想用这种办法，也可以使用标准库提供的：<code>call_once()</code> 函数。</p><p>Java 在方面就要麻烦得多，我个人比较偏爱的是 DCL 这种方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleston</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleston instance;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (instance == <span class="keyword">null</span>) <span class="keyword">synchronized</span>(Singleston.class) &#123;</span><br><span class="line">      <span class="keyword">if</span> (instance == <span class="keyword">null</span>) </span><br><span class="line">        instance = <span class="keyword">new</span> Singleston;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Java 版本的 DCL 需要注意使用 <code>volatile</code> 修饰，从 1.5 版本开始这种写法已经不存在问题了。</p><h2 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h2><p>建造者模式用于将一个复杂对象的建造过程和表示过程分开。这种比较适合一旦创建好后不会怎么更改的对象。在 Android 中的 <code>AlertDialg</code> 就使用这种方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">dialog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">new</span> Builder(<span class="keyword">this</span>)</span><br><span class="line">      .setMessage(<span class="string">"are you sure?"</span>)</span><br><span class="line">      .setTitle(<span class="string">"tips"</span>)</span><br><span class="line">      .setPositiveButtion(<span class="string">"yes"</span>, <span class="keyword">new</span> OnClickListener() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>&#123;</span><br><span class="line">          dialog.dismiss();</span><br><span class="line">          Main.<span class="keyword">this</span>.finish();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      .setNegativeButton(<span class="string">"No"</span>, <span class="keyword">new</span> OnClickListener() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>&#123;</span><br><span class="line">          dialog.dismiss();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      .create()</span><br><span class="line">      .show();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>无独有偶，在 Java 著名网络库 Netty 中，创建 <code>Channel</code> 也是使用建造者模式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Bootstrap b = <span class="keyword">new</span> Bootstrap();  </span><br><span class="line">b.group(group)  </span><br><span class="line">    .channel(NioSocketChannel.class)  </span><br><span class="line">    .option(ChannelOption.TCP_NODELAY, <span class="keyword">true</span>)  </span><br><span class="line">    .handler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;  </span><br><span class="line">        <span class="meta">@Override</span>  </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;  </span><br><span class="line">          <span class="comment">// ...</span></span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;);  </span><br><span class="line"></span><br><span class="line">ChannelFuture f = b.connect(host, port).sync();</span><br></pre></td></tr></table></figure><h2 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h2><p>容器需要提供用户一个访问机制，而又不暴露内部细节，这种方法就叫迭代器模式。C++ 和 Java 中均有迭代器模式的影子：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C++</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; arrays;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">auto</span> it = arrays.begin();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Java</span></span><br><span class="line">ArrayList&lt;Integer&gt; arrays = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">Iterator&lt;Integer&gt; it = arrays.iterator();</span><br><span class="line"><span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="责任链模式"><a href="#责任链模式" class="headerlink" title="责任链模式"></a>责任链模式</h2><p>如其名，整个处理过程就像链一样，一级一级传递下去，从而接触了发送方和接收方的耦合。责任链模式常见于各种事件处理机制，比如 Android 的事件处理机制、Win32 中的消息机制。责任链模式的显著特点是如果一个事件（消息）在当前处理逻辑中不处理，就将其传递给下一级处理逻辑。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">slove</span><span class="params">(Message msg, Handler handle)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (msg) &#123;</span><br><span class="line">    <span class="keyword">case</span> xxx: ...; <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>: handle.slove(msg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="桥梁模式"><a href="#桥梁模式" class="headerlink" title="桥梁模式"></a>桥梁模式</h2><p>将抽象和实现解耦的就是桥梁模式。通常在设计时，不要传播设计，而桥梁模式正好可以处理。比如一开始只有一台实验仪器，所以用单例模式来表示，某一天实验室又购进了一台新的仪器，那么之前所有引用单例的代码都要修改。而设计时如果将获取设备接口和单例分开，就没有这么多麻烦了：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Device</span> &#123;</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleDevice</span> &#123;</span></span><br><span class="line">    <span class="comment">// singleston </span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Device <span class="title">getByRandom</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> SingleDevice.getInstance();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>桥梁模式的另一个常见用途在 C++ 中，常用于实现减少 C++ 头文件编译负担：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a.h 中</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">AImpl</span>;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">do</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;AImpl&gt; impl;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// A.cpp 中</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span>:AImpl &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">do</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> A::<span class="keyword">do</span>() &#123;</span><br><span class="line">  impl-&gt;<span class="keyword">do</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h2><p>适配器模式可以使两个不兼容的接口一起工作，有 Andoird 开发经验的一定对 Adaptor 非常熟悉，这里不细讲。</p><h2 id="中介者模式"><a href="#中介者模式" class="headerlink" title="中介者模式"></a>中介者模式</h2><p>中介者模式把两个独立对象的一系列操作封装起来，把这两个对象之间的联系解耦，这样两个对象不依赖对方，可以独立变化。</p><h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h2><p>解耦操作最好的还属观察者模式。观察者模式重新定义了对象之间的依赖关系，将原有的监听操作转变为通知操作。</p><p>关于使用观察者模式，比较典型的例子是控件事件的监听–在指定控件上绑定一个回调函数，事件发生的时候，控件负责调用该函数通知用户。在 Java 中大名鼎鼎的响应式库 RxJava 就是以观察者模式为基础，还解决了长期以来困扰的 Callback hell 问题。Vue.js 中实现数据绑定也是以观察者模式为基础的。</p><h2 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h2><p>命令模式最重要的一点就是将客户端的请求参数化，从而实现请求排队、记录回滚等。在游戏中，命令模式可以将用户对角色控制的输入进行参数化，实现死亡回放等。在服务器开发中，将客户端的请求参数化，并放入请求队列，实现流量控制。</p><h2 id="状态模式"><a href="#状态模式" class="headerlink" title="状态模式"></a>状态模式</h2><p>说到命令模式不得不提状态模式，以任务操纵为例，人在地面上可以进行跳跃，而在跳跃的过程中则不可以。那么对于相同的命令，在不同的状态下有不同的响应，这就是状态模式。状态模式可以在改变对象状态的同时改变对象的行为。</p><h2 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a>享元模式</h2><p>游戏中地图大量元素存在重复的情况，大量创建相同的对象非常浪费内存，此时可以创建几个单例，让地图引用具体的单例，这就是享元模式。</p><h2 id="解释器模式"><a href="#解释器模式" class="headerlink" title="解释器模式"></a>解释器模式</h2><p>现在很多游戏的基本框架由 C/C++ 来写，具体业务逻辑则交给 lua 之类的脚本处理。如果是自己设计的脚本，那么就需要写出对应的解释器： </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Expr</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function">Value <span class="title">execute</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>: </span><br><span class="line">  <span class="keyword">char</span> c;</span><br><span class="line">  Expr * left, * right;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 解释器模式</span></span><br></pre></td></tr></table></figure><h2 id="访问者模式"><a href="#访问者模式" class="headerlink" title="访问者模式"></a>访问者模式</h2><p>一开始我们只提供了游戏脚本解释器的解释功能，某次调试的时候希望将具体的抽象语法书打印出来，所以在每个元素类中添加了打印支持：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Expr</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function">Value <span class="title">execute</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function">Value <span class="title">dump</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    left-&gt;dump();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; c ;</span><br><span class="line">    right-&gt;dump();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>: </span><br><span class="line">  <span class="keyword">char</span> c;</span><br><span class="line">  Expr * left, * right;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>每当出现一个新的需求时，都要对原有的数据结构进行修改。而访问者模式为我们提供了遍历，可以在不修改数据结构的同时增加数据结构上的操作。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Visitor</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(Expr *ptr)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(Value *ptr)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Visitable</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Visitor *visitor)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Expr</span> :</span> <span class="keyword">public</span> Visitable &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">accept</span><span class="params">(Visitor *visitor)</span> </span>&#123;</span><br><span class="line">    visitor-&gt;visit(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dump</span> :</span> <span class="keyword">public</span> Visitor &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">(Value * v)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">(Expr * e)</span> </span>&#123;</span><br><span class="line">    e-&gt;left-&gt;accept(<span class="keyword">this</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; e-&gt;c;</span><br><span class="line">    e-&gt;right-&gt;accept(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="装饰器模式"><a href="#装饰器模式" class="headerlink" title="装饰器模式"></a>装饰器模式</h2><p>装饰器模式可以在不继承对象的同时给对象增加操作。Python 中有一个装饰器的概念，比如我们要给原来的函数添加上调用记录到日志的功能：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kw)</span>:</span></span><br><span class="line">        print(<span class="string">'call %s():'</span> % func.__name__)</span><br><span class="line">        <span class="keyword">return</span> func(*args, **kw)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@log</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do</span><span class="params">()</span>:</span></span><br><span class="line">  <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>与之类似的还有 Java 提供的注解功能，这里不展开。</p><h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><p>说到代理，常见有 VPN、HTTP Proxy ，代理模式用于控制对对象的访问。比如实现一个 RPC 功能，在客户端定义一个接口，由代理服务生成接口对应的实例。客户在调用接口时，代理服务监测并将请求转发给服务器，等到服务端计算完成并返回时，代理服务把结果返回给客户端。从客户端的角度上，这个过程和调用一个耗时的函数没有区别。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;面对对象原则&quot;&gt;&lt;a href=&quot;#面对对象原则&quot; class=&quot;headerlink&quot; title=&quot;面对对象原则&quot;&gt;&lt;/a&gt;面对对象原则&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;单一职责：不要存在多于一个导致类变更的原因；通俗的说，即一个类只负责一项职责；&lt;/li&gt;
&lt;li
      
    
    </summary>
    
      <category term="总结" scheme="http://www.hashcoding.net/categories/%E6%80%BB%E7%BB%93/"/>
    
    
  </entry>
  
  <entry>
    <title>CSKS-(二)、数据库系统</title>
    <link href="http://www.hashcoding.net/2017/08/26/CSKS-%E4%BA%8C-%E3%80%81%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/"/>
    <id>http://www.hashcoding.net/2017/08/26/CSKS-二-、数据库系统/</id>
    <published>2017-08-26T01:58:09.000Z</published>
    <updated>2017-08-26T10:37:38.970Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据库基础"><a href="#数据库基础" class="headerlink" title="数据库基础"></a>数据库基础</h1><p>现在主流的数据库系统主要是关系数据库。关系数据库使用集合代数等概念和方法来处理数据库中的数据，同时数据组织成描述性的表格。关系数据库通常由三级模式两层映像组成。在具体设计数据库的时候，通常使用范式来对数据库进行约束设计。</p><p>近些年 NoSQL（非关系型数据库）应用也比较多，主要以 Key-Value 类数据库为主，比如 Redis。</p><h2 id="理论基础"><a href="#理论基础" class="headerlink" title="理论基础"></a>理论基础</h2><p><em>References</em></p><ul><li><a href="http://baike.baidu.com/link?url=IOAIJlfSxYMpboZE_on0EAaeqZbdplcD4PvK6rzlwEw_v0ulRPQXEV-3Yfvhd5aNr-0jfW8d6XDidC3O-42tElXbQ3ixxfDyfGwASgxMhxRupcFaRcNTqlhkBA0RnEMS" target="_blank" rel="noopener">关系代数</a></li><li><a href="http://www.hashcoding.net/2017/08/26/CSKS-%E4%B8%80-%E3%80%81%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/#B-树">数据库底层结构 - B 树</a></li></ul><h2 id="SQL-语言"><a href="#SQL-语言" class="headerlink" title="SQL 语言"></a>SQL 语言</h2><p>SQL 语言共分为四大类：</p><ul><li>数据查询语言 DQL</li><li>数据操纵语言 DML</li><li>数据定义语言 DDL</li><li>数据控制语言 DCL</li></ul><h3 id="数据查询语言DQL"><a href="#数据查询语言DQL" class="headerlink" title="数据查询语言DQL"></a>数据查询语言DQL</h3><p>数据查询语言 DQL 基本结构是由 <code>SELECT</code> 子句，<code>FROM</code> 子句，<code>WHERE</code> 子句组成的查询块：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> &lt;字段名表&gt;</span><br><span class="line"><span class="keyword">FROM</span> &lt;表或视图名&gt;</span><br><span class="line"><span class="keyword">WHERE</span> &lt;查询条件&gt;</span><br></pre></td></tr></table></figure><h3 id="数据操纵语言DML"><a href="#数据操纵语言DML" class="headerlink" title="数据操纵语言DML"></a>数据操纵语言DML</h3><p>主要有三种形式：</p><ul><li>插入：<code>INSERT</code></li><li>更新：<code>UPDATE</code></li><li>删除：<code>DELETE</code></li></ul><h3 id="数据定义语言-DDL"><a href="#数据定义语言-DDL" class="headerlink" title="数据定义语言 DDL"></a>数据定义语言 DDL</h3><p>数据定义语言 DDL 用来创建数据库中的各种对象—–表、视图、索引、同义词、聚簇等如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span>/<span class="keyword">VIEW</span>/<span class="keyword">INDEX</span>/SYN/CLUSTER</span><br><span class="line"><span class="keyword">ALTER</span></span><br><span class="line"><span class="keyword">DROP</span></span><br></pre></td></tr></table></figure><blockquote><p>DDL 操作是隐性提交的！不能 rollback。</p></blockquote><h3 id="数据控制语言-DCL"><a href="#数据控制语言-DCL" class="headerlink" title="数据控制语言 DCL"></a>数据控制语言 DCL</h3><p>数据控制语言 DCL 用来授予或回收访问数据库的某种特权，并控制<br>数据库操纵事务发生的时间及效果，对数据库实行监视等。如：</p><ul><li><code>GRANT</code>：授权</li><li><code>ROLLBACK [WORK] TO [SAVEPOINT]</code>：回退到某一点。</li><li><code>COMMIT [WORK]</code>：提交</li></ul><p>回滚—<code>ROLLBACK</code> 回滚命令使数据库状态回到上次最后提交的状态。其格式为: </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SQL&gt; ROLLBACK;</span><br></pre></td></tr></table></figure><p><em>References</em></p><ul><li><a href="http://blog.csdn.net/tomatofly/article/details/5949070" target="_blank" rel="noopener">DQL、DDL、DML、DCL</a></li><li><a href="http://www.w3school.com.cn/sql/index.asp" target="_blank" rel="noopener">SQL语言入门</a></li><li><a href="http://blog.csdn.net/ws0513/article/details/49980547" target="_blank" rel="noopener">drop、truncate和delete的区别</a></li><li><a href="http://www.cppblog.com/init/articles/204159.html" target="_blank" rel="noopener">数据库中视图的作用</a></li></ul><h2 id="数据库范式"><a href="#数据库范式" class="headerlink" title="数据库范式"></a>数据库范式</h2><p>数据库范式是指数据库中数据满足的某种约束，用来指导数据库设计。随意设计的数据库可能存在数据冗余、插入异常、更新异常、删除异常等。数据库范式用于减少或消除上述异常。</p><p>数据库范式分为：1NF,2NF,3NF,BCNF,4NF,5NF。通常设计时只需要考虑到 BCNF。符合高一级的范式，必定符合低一级范式。</p><h3 id="1NF"><a href="#1NF" class="headerlink" title="1NF"></a>1NF</h3><p><strong>1NF的定义为：符合1NF的关系中的每个属性都不可再分</strong>。实际上，1NF 是所有关系型数据库的最基本要求，你在关系型数据库管理系统（RDBMS），例如 SQL Server，Oracle，MySQL 中创建数据表的时候，如果数据表的设计不符合这个最基本的要求，那么操作一定是不能成功的。也就是说，只要在 RDBMS 中已经存在的数据表，一定是符合 1NF 的。</p><h3 id="函数依赖"><a href="#函数依赖" class="headerlink" title="函数依赖"></a>函数依赖</h3><p><strong>函数依赖指出了一张表中属性之间的函数关系：将属性分为 X,Y 两组，对于任意的 X 满足 X 相同时 Y 一定相同，即 X 值确定的情况下，Y 的值也能确定，此时称为 X → Y</strong>。从“函数依赖”这个概念展开，还有两个概念：</p><ul><li><p>完全函数依赖：在一张表中，若 X → Y，且对于 X 的任何一个真子集（假如属性组 X 包含超过一个属性的话），X’ → Y 不成立，那么我们称 Y 对于 X 完全函数依赖，记作 X F→ Y。</p></li><li><p>部分函数依赖假：如 Y 函数依赖于 X，但同时 Y 并不完全函数依赖于 X，那么我们就称 Y 部分函数依赖于 X，记作 X  P→ Y，</p></li></ul><h3 id="码"><a href="#码" class="headerlink" title="码"></a>码</h3><p><strong>设 K 为某表中的一个属性或属性组，若除 K 之外的所有属性都完全函数依赖于 K（这个“完全”不要漏了），那么我们称 K 为候选码，简称为码</strong>。在实际中我们通常可以理解为：假如当 K 确定的情况下，该表除 K 之外的所有属性的值也就随之确定，那么 K 就是码。一张表中可以有超过一个码。（实际应用中为了方便，通常选择其中的一个码作为主码）。</p><p>在任意一个码中的属性称为主属性，与之对应的就是非主属性。</p><h3 id="2NF"><a href="#2NF" class="headerlink" title="2NF"></a>2NF</h3><p><strong>2NF的定义为：非主属性不部分地依赖于码</strong>。第二范式要求数据具有唯一性。以学生、学校、学校地址(st,sc,addr)为例，其中学生、学校为主属性，学校地址只依赖于学校，不满足第二范式。如果新办了座学校，校内还没有学生上课，那么就无法插入数据（插入异常）；如果学校地址改变了，需要对每一条数据中的学校地址都进行更新，非常麻烦（更新异常）。</p><h3 id="2NF-1"><a href="#2NF-1" class="headerlink" title="2NF"></a>2NF</h3><p><strong>3NF的定义为：非主属性不传递地依赖于码</strong>。第三范式要求任何非主属性不能由其他属性派生出来。</p><h3 id="BCNF"><a href="#BCNF" class="headerlink" title="BCNF"></a>BCNF</h3><p><strong>BCNF的定义为：主属性既不部分地依赖于码，也不传递地依赖于码</strong>。BCNF 要求主属性之间满足唯一且不能由其他属性派生出来。</p><p>关于范式的详解可以参考：<a href="https://zhuanlan.zhihu.com/p/20028672" target="_blank" rel="noopener">数据库第一二三范式到底在说什么？</a>。</p><h2 id="数据库完整性约束"><a href="#数据库完整性约束" class="headerlink" title="数据库完整性约束"></a>数据库完整性约束</h2><p>关系完整性是为保证数据库中数据的正确性和相容性，对关系模型提出的某种约束条件或规则。完整性通常包括域完整性，实体完整性、参照完整性和用户定义完整性，其中域完整性，实体完整性和参照完整性，是关系模型必须满足的完整性约束条件。</p><p>域完整性约束：域完整性是保证数据库字段取值的合理性。属性值应是域中的值，这是关系模式规定了的。除此之外，一个属性能否为 NULL，这是由语义决定的，也是域完整性约束的主要内容。域完整性约束是最简单、最基本的约束。在当今的关系 DBMS 中，一般都有域完整性约束检查功能。包括检查（CHECK）、默认值（DEFAULT）、不为空（NOT NULL）等。</p><h3 id="实体完整性"><a href="#实体完整性" class="headerlink" title="实体完整性"></a>实体完整性</h3><p><strong>实体完整性是指关系的主关键字不能重复也不能取“空值”。</strong>一个关系对应现实世界中一个实体集。现实世界中的实体是可以相互区分、识别的，也即它们应具有某种惟一性标识。在关系模式中，以主关键字作为惟一性标识，而主关键字中的属性(称为主属性)不能取空值，否则，表明关系模式中存在着不可标识的实体(因空值是“不确定”的)，这与现实世界的实际情况相矛盾，这样的实体就不是一个完整实体。按实体完整性规则要求，主属性不得取空值，如主关键字是多个属性的组合，则所有主属性均不得取空值。</p><h3 id="参照完整性"><a href="#参照完整性" class="headerlink" title="参照完整性"></a>参照完整性</h3><p><strong>参照完整性是定义建立关系之间联系的主关键字与外部关键字引用的约束条件。</strong>关系数据库中通常都包含多个存在相互联系的关系，关系与关系之间的联系是通过公共属性来实现的。所谓公共属性，它是一个关系 R (称为被参照关系或目标关系)的主关键字，同时又是另一关系 K (称为参照关系)的外部关键字。如果参照关系 K 中外部关键字的取值，要么与被参照关系 R 中某元组主关键字的值相同，要么取空值，那么，在这两个关系间建立关联的主关键字和外部关键字引用，符合参照完整性规则要求。如果参照关系 K 的外部关键字也是其主关键字，根据实体完整性要求，主关键字不得取空值，因此，参照关系 K 外部关键字的取值实际上只能取相应被参照关系 R 中已经存在的主关键字值。</p><h3 id="用户定义完整性"><a href="#用户定义完整性" class="headerlink" title="用户定义完整性"></a>用户定义完整性</h3><p>实体完整性和参照完整性适用于任何关系型数据库系统，它主要是针对关系的主关键字和外部关键字取值必须有效而做出的约束。<strong>用户定义完整性则是根据应用环境的要求和实际的需要，对某一具体应用所涉及的数据提出约束性条件</strong>。这一约束机制一般不应由应用程序提供，而应有由关系模型提供定义并检验，用户定义完整性主要包括字段有效性约束和记录有效性。</p><h2 id="数据库事务"><a href="#数据库事务" class="headerlink" title="数据库事务"></a>数据库事务</h2><p><strong>数据库事务(Database Transaction) ，是指作为单个逻辑工作单元执行的一系列操作，要么完全地执行，要么完全地不执行。</strong> 事务处理可以确保除非事务性单元内的所有操作都成功完成，否则不会永久更新面向数据的资源。通过将一组相关操作组合为一个要么全部成功要么全部失败的单元，可以简化错误恢复并使应用程序更加可靠。一个逻辑工作单元要成为事务，必须满足所谓的ACID（原子性、一致性、隔离性和持久性）属性。</p><h3 id="事务的-ACID"><a href="#事务的-ACID" class="headerlink" title="事务的 ACID"></a>事务的 ACID</h3><h4 id="Atomicity"><a href="#Atomicity" class="headerlink" title="Atomicity"></a>Atomicity</h4><p>原子性是指事务包含的所有操作要么全部成功，要么全部失败回滚。事务的操作如果成功就必须要完全应用到数据库，如果操作失败则不能对数据库有任何影响。</p><h4 id="Consistency"><a href="#Consistency" class="headerlink" title="Consistency"></a>Consistency</h4><p>一致性是指事务必须使数据库从一个一致性状态变换到另一个一致性状态，也就是说一个事务执行之前和执行之后都必须处于一致性状态。拿转账来说，假设用户A和用户B两者的钱加起来一共是5000，那么不管A和B之间如何转账，转几次账，事务结束后两个用户的钱相加起来应该还得是5000，这就是事务的一致性。换句话说就是：事务开始和结束之间的中间状态不会被其他事务看到。</p><h4 id="Isolation"><a href="#Isolation" class="headerlink" title="Isolation"></a>Isolation</h4><p>隔离性是当多个用户并发访问数据库时，比如操作同一张表时，数据库为每一个用户开启的事务，不能被其他事务的操作所干扰，多个并发事务之间要相互隔离。即要达到这么一种效果：对于任意两个并发的事务T1和T2，在事务T1看来，T2要么在T1开始之前就已经结束，要么在T1结束之后才开始，这样每个事务都感觉不到有其他事务在并发地执行。</p><p>隔离性主要涉及到事务的并发控制，根据不同的并发控制策略，可能出现脏读、不可重复读、幻读。</p><h5 id="脏读"><a href="#脏读" class="headerlink" title="脏读"></a>脏读</h5><p><strong>脏读是指在一个事务处理过程里读取了另一个未提交的事务中的数据</strong>。当一个事务正在多次修改某个数据，而在这个事务中这多次的修改都还未提交，这时一个并发的事务来访问该数据，就会造成两个事务得到的数据不一致。例如：用户 A 向用户 B 转账 $100$ 元，对应 SQL 命令如下:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> <span class="keyword">account</span> <span class="keyword">set</span> money=money+<span class="number">100</span> <span class="keyword">where</span> <span class="keyword">name</span>=’B’;  (此时A通知B)</span><br><span class="line"><span class="keyword">update</span> <span class="keyword">account</span> <span class="keyword">set</span> money=money<span class="number">-100</span> <span class="keyword">where</span> <span class="keyword">name</span>=’A’;</span><br></pre></td></tr></table></figure><p>当只执行第一条 SQL 时，A 通知 B 查看账户，B 发现确实钱已到账（此时即发生了脏读），而之后无论第二条 SQL 是否执行，只要该事务不提交，则所有操作都将回滚，那么当 B 以后再次查看账户时就会发现钱其实并没有转。</p><h5 id="不可重复读"><a href="#不可重复读" class="headerlink" title="不可重复读"></a>不可重复读</h5><p>不可重复读是指在对于数据库中的某个数据，<strong>一个事务范围内</strong>多次查询却返回了不同的数据值，这是由于在查询间隔，被另一个事务修改并提交了。<strong>不可重复读就是一个事务范围内多次查询结果不同</strong>。例如事务 T1 读取了某一数据，而事务 T2 立马修改了这个数据并且提交事务给数据库，事务 T1 再次读取该数据就得到了不同的结果，发送了不可重复读。</p><p>不可重复读和脏读的区别是，脏读是某一事务读取了另一个事务未提交的脏数据，而不可重复读则是读取了前一事务提交的数据。</p><h5 id="虚读-幻读"><a href="#虚读-幻读" class="headerlink" title="虚读(幻读)"></a>虚读(幻读)</h5><p><strong>幻读是事务非独立执行时发生的一种现象</strong>。例如事务 T1 对一个表中所有的行的某个数据项做了从 $1$ 修改为 $2$ 的操作，这时事务 T2 又对这个表中插入了一行数据项，而这个数据项的数值还是为 $1$ 并且提交给数据库。而操作事务 T1 的用户如果再查看刚刚修改的数据，会发现还有一行没有修改，其实这行是从事务 T2 中添加的，就好像产生幻觉一样，这就是发生了幻读。</p><p>幻读和不可重复读都是读取了另一条已经提交的事务（这点就脏读不同），所不同的是不可重复读查询的都是同一个数据项，而幻读针对的是一批数据整体（比如数据的个数）。</p><h4 id="Durability"><a href="#Durability" class="headerlink" title="Durability"></a>Durability</h4><p>持久性是指一个事务一旦被提交了，那么对数据库中的数据的改变就是永久性的，即便是在数据库系统遇到故障的情况下也不会丢失提交事务的操作。</p><h3 id="事务的-4-种隔离级别"><a href="#事务的-4-种隔离级别" class="headerlink" title="事务的 4 种隔离级别"></a>事务的 4 种隔离级别</h3><table><thead><tr><th>隔离级别</th><th style="text-align:center">脏读</th><th style="text-align:center">不可重复读</th><th style="text-align:center">幻读</th></tr></thead><tbody><tr><td>Read uncommitted</td><td style="text-align:center">×</td><td style="text-align:center">×</td><td style="text-align:center">×</td></tr><tr><td>Read committed</td><td style="text-align:center">✓</td><td style="text-align:center">×</td><td style="text-align:center">×</td></tr><tr><td>Repetable read</td><td style="text-align:center">✓</td><td style="text-align:center">✓</td><td style="text-align:center">×</td></tr><tr><td>Serializable</td><td style="text-align:center">✓</td><td style="text-align:center">✓</td><td style="text-align:center">✓</td></tr></tbody></table><p>四种隔离级别，重高到低有：</p><ul><li><code>Serializable</code>  串行化</li><li><code>Repeatable read</code> 可重复读</li><li><code>Read committed</code> 读已提交</li><li><code>Read uncommitted</code> 读未提交</li></ul><p><code>Serializable</code> 采用的是范围锁 <code>RangeS</code>、<code>RangeS_S</code> 模式，<strong>锁定检索范围为只读</strong>，这样就避免了幻影读问题。<code>Repeatable read</code> <strong>读取数据时加共享锁，写数据时加排他锁，都是事务提交才释放锁</strong>。读取时候不允许其他事物修改该数据，不管数据在事务过程中读取多少次，数据都是一致的，避免了不可重复读问题。<code>Read committed</code> <strong>修改时加排他锁，直到事务提交后才释放，读取时加共享锁，读取完释放</strong>。事务1读取数据时加上共享锁后（这样在事务1读取数据的过程中，其他事务就不会修改该数据），不允许任何事物操作该数据，只能读取，之后1如果有更新操作，那么会转换为排他锁，其他事务更无权参与进来读写，这样就防止了脏读问题。<code>Read uncommitted</code> 相当于不加锁。</p><p><em>在 MySQL 数据库中默认的隔离级别为 <code>Repeatable read</code> (可重复读)</em>。</p><h3 id="事务的提交和回滚"><a href="#事务的提交和回滚" class="headerlink" title="事务的提交和回滚"></a>事务的提交和回滚</h3><p>在数据库的插入、删除和修改操作时，只有当事务在提交到数据库时才算完成。在事务提交前，只有操作数据库的这个人才能有权看到所做的事情，别人只有在最后提交完成后才可以看到。</p><p>提交数据有三种类型：显式提交、隐式提交及自动提交。下面分别说明这三种类型。</p><h4 id="显式提交"><a href="#显式提交" class="headerlink" title="显式提交"></a>显式提交</h4><p>用 <code>COMMIT</code> 命令直接完成的提交为显式提交。其格式为：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SQL&gt; COMMIT;</span><br></pre></td></tr></table></figure><h4 id="隐式提交"><a href="#隐式提交" class="headerlink" title="隐式提交"></a>隐式提交</h4><p>用 SQL 命令间接完成的提交为隐式提交。这些命令是：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span>，<span class="keyword">AUDIT</span>，<span class="keyword">COMMENT</span>，<span class="keyword">CONNECT</span>，<span class="keyword">CREATE</span>，<span class="keyword">DISCONNECT</span>，<span class="keyword">DROP</span>，<span class="keyword">EXIT</span>，<span class="keyword">GRANT</span>，<span class="keyword">NOAUDIT</span>，QUIT，<span class="keyword">REVOKE</span>，<span class="keyword">RENAME</span></span><br></pre></td></tr></table></figure><h4 id="自动提交"><a href="#自动提交" class="headerlink" title="自动提交"></a>自动提交</h4><p>若把 <code>AUTOCOMMIT</code> 设置为 <code>ON</code> ，则在插入、修改、删除语句执行后，系统将自动进行提交，这就是自动提交。其格式为：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SQL&gt; SET AUTOCOMMIT ON;</span><br></pre></td></tr></table></figure><p>有时执行 SQL 语句会出现异常，又或提交事务失败，总之事务没有成功完成。这种情况下，需要把事务前面执行了的语句回滚，才能保证事务的 ACID。</p><p>如果出现了异常导致数据库没有执行到 <code>COMMIT</code>，用户需要手动执行 <code>ROLLBACK</code> 回滚刚才的操作。</p><h3 id="undo、redo-与检查点"><a href="#undo、redo-与检查点" class="headerlink" title="undo、redo 与检查点"></a>undo、redo 与检查点</h3><p>数据库刚提交的事务通常存放在缓冲区中，等到缓冲区满或者其他需要写入硬盘的时候，才写入硬盘。数据库通常用日志文件记录操作，<code>undo</code> 日志记录某数据被修改前的值，可以用来在事务失败时进行 <code>rollback</code>；<code>redo</code> 日志记录某数据块被修改后的值，可以用来恢复未写入。</p><p>数据库先将操作写入日志文件，然后把数据写入缓冲区。等到时机合适时才将数据持久化到硬盘上。这种顺序保证了数据库故障时恢复最后修改的操作，也可以用于 <code>rollback</code>。当进行恢复操作时，对未提交的操作执行 <code>undo</code>，对提交了的执行 <code>redo</code>。</p><p>在持久化时，会记录 checkpoint 发生的”时刻“。在故障回复时候，只需要 <code>redo</code>/<code>undo</code>最近的一次 <code>checkpoint</code> 之后的操作。</p><p><em>References</em></p><ul><li><a href="关于spring手动进行事务提交以及回滚的问题">关于spring手动进行事务提交以及回滚的问题</a></li><li><a href="http://www.cnblogs.com/jaejaking/p/5342285.html" target="_blank" rel="noopener">对mysql事务提交、回滚的错误理解</a></li><li><a href="http://blog.csdn.net/kobejayandy/article/details/50885693" target="_blank" rel="noopener">理解数据库中的undo日志、redo日志、检查点</a></li></ul><h1 id="数据库索引"><a href="#数据库索引" class="headerlink" title="数据库索引"></a>数据库索引</h1><p>数据库索引是对数据库中一个或多个值进行排序的结构，用于加速数据查询等。数据库索引类似与书籍附录的名词索引，在不用扫描整个数据库表的情况下，允许程序快速找到表中的数据。</p><p>索引加快了数据查找速度，提高系统性能。而维护索引需要使用额外的物理空间，同时插入、更新、删除时也需要对索引进行维护。</p><p>从底层的视角来看，索引通常以 B+ 树为数据结构。B+ 树是多路搜索树，所以能保证索引的查找速度。对于高纬度如 GIS 数据索引，可以考虑使用 <a href="http://blog.csdn.net/zhouxuguang236/article/details/7898272" target="_blank" rel="noopener">R 树</a>作为数据结构。</p><p>从物理空间的角度来看，索引通常分为聚簇索引和非聚簇索引。聚簇索引是指表中的数据存储顺序和索引的顺序一致；非聚簇索引正好相反。因此，聚簇索引一张表只能有一个。非聚簇索引又通常被成为辅助索引。</p><p>在实际的程序逻辑中，有主键索引、唯一索引和普通索引。主键索引要求内容不能为空值，唯一索引要求数据不能重复。自然的，主键索引是唯一索引的特殊情况，其要求能唯一确定具体表项。一般情况下，DBMS 会在主键上建立聚簇索引，比如 Mysql 的 Innodb。如果索引不止建立在一列上，就称之为联合索引（与之对应的成为单列索引），一般情况下，联合索引使用时通常按照最左前缀原则匹配。</p><p>References</p><ul><li><a href="https://www.kancloud.cn/kancloud/theory-of-mysql-index/" target="_blank" rel="noopener">Mysql 索引背后的数据结构和算法原理</a></li><li><a href="https://my.oschina.net/u/2250599/blog/551423" target="_blank" rel="noopener">Mysql 之辅助索引</a></li><li><a href="https://www.kancloud.cn/kancloud/theory-of-mysql-index/41857" target="_blank" rel="noopener">最左前缀原理与相关优化</a></li><li><a href="https://tech.meituan.com/mysql-index.html" target="_blank" rel="noopener">MySQL索引原理及慢查询优化</a></li><li><a href="http://www.cnblogs.com/hustcat/archive/2009/10/28/1591648.html" target="_blank" rel="noopener">Mysql 索引优化</a></li><li><a href="http://blog.csdn.net/barrier9591/article/details/5060638" target="_blank" rel="noopener">索引效率优化</a></li><li><a href="https://www.kancloud.cn/thinkphp/mysql-design-optimalize/39320" target="_blank" rel="noopener">慢查询</a></li><li><a href="https://www.kancloud.cn/thinkphp/mysql-design-optimalize/39319" target="_blank" rel="noopener">mysql的最佳索引攻略</a></li><li><a href="http://blog.csdn.net/gzh0222/article/details/7976127" target="_blank" rel="noopener">Mysql 性能调优三部曲（慢查询、Explain 和 Profile）</a></li></ul><h1 id="锁与并发控制"><a href="#锁与并发控制" class="headerlink" title="锁与并发控制"></a>锁与并发控制</h1><h2 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h2><p>从功能角度来看：</p><ul><li>共享锁：允许多个读，不允许写；</li><li>排他锁：只允许一个读写；</li><li><a href="http://www.jianshu.com/p/325a492a859b" target="_blank" rel="noopener">意向锁</a></li></ul><p>共享锁、排他锁通常有具体作用范围：表、页、行。有时需要给整个表加锁，加锁前需要检查有无事务对某一行加了锁，如果一行一行检测，效率是不可接受的。这种情况下，DBMS 要求事务在某子节点加上读、写锁时，要持有父节点的意向锁；后面加锁的事务只需要检查父节点的意向锁就能得知。</p><p>从范围角度来看：</p><ul><li>行级锁：表示只针对当前操作的行进行加锁</li><li>表级锁：表示对当前操作的整张表加锁</li><li>页级锁：介于行级锁和表级锁之间</li></ul><p>下面看看 Mysql 中的行级锁、表级锁及页级锁。</p><table><thead><tr><th style="text-align:center">类别</th><th style="text-align:center">开销</th><th style="text-align:center">速度</th><th style="text-align:center">冲突率</th><th style="text-align:center">粒度</th><th style="text-align:center">并发度</th></tr></thead><tbody><tr><td style="text-align:center">行级锁</td><td style="text-align:center">最大</td><td style="text-align:center">最慢</td><td style="text-align:center">低</td><td style="text-align:center">最小</td><td style="text-align:center">最高</td></tr><tr><td style="text-align:center">表级锁</td><td style="text-align:center">小</td><td style="text-align:center">快</td><td style="text-align:center">最高</td><td style="text-align:center">最大</td><td style="text-align:center">最低</td></tr><tr><td style="text-align:center">页级锁</td><td style="text-align:center">一般</td><td style="text-align:center">一般</td><td style="text-align:center">一般</td><td style="text-align:center">一般</td><td style="text-align:center">一般</td></tr></tbody></table><p><em>References</em></p><ul><li><a href="http://blog.sina.com.cn/s/blog_a1e9c7910102vkg4.html" target="_blank" rel="noopener">Mysql 共享锁、排他锁和意向锁</a></li><li><a href="http://www.hollischuang.com/archives/914" target="_blank" rel="noopener">MySQL中的行级锁,表级锁,页级锁</a></li></ul><h2 id="两阶段锁协议"><a href="#两阶段锁协议" class="headerlink" title="两阶段锁协议"></a>两阶段锁协议</h2><p>整个事务分为两个阶段，前一个阶段为加锁，后一个阶段为解锁。<strong>在加锁阶段，事务只能加锁，也可以操作数据，但不能解锁，直到事务释放第一个锁，就进入解锁阶段，此过程中事务只能解锁，也可以操作数据，不能再加锁</strong>。两阶段锁协议使得事务具有较高的并发度，因为解锁不必发生在事务结尾。它的不足是没有解决死锁的问题，因为它在加锁阶段没有顺序要求。如两个事务分别申请了A, B锁，接着又申请对方的锁，此时进入死锁状态。</p><h2 id="并发控制"><a href="#并发控制" class="headerlink" title="并发控制"></a>并发控制</h2><p>数据库管理系统（DBMS）中的并发控制的任务是：</p><ol><li>确保在多个事务同时存取数据库中同一数据时不破坏事务的隔离性；</li><li>统一性以及数据库的统一性；</li></ol><p>乐观并发控制(乐观锁)和悲观并发控制（悲观锁）是并发控制主要采用的技术手段：</p><ol><li>悲观锁：假定会发生并发冲突，屏蔽一切可能违反数据完整性的操作；</li><li>乐观锁：假设不会发生并发冲突，只在提交操作时检查是否违反数据完整性；</li></ol><p>无论是悲观锁还是乐观锁，都是人们定义出来的概念，可以认为是一种思想。所以，不要把乐观并发控制和悲观并发控制狭义的理解为 DBMS 中的概念，更不要把他们和数据中提供的锁机制（行锁、表锁、排他锁、共享锁）混为一谈。其实，在 DBMS 中，悲观锁正是利用数据库本身提供的锁机制来实现的。</p><p>在 Mysql 中，悲观锁通过 <code>select for update</code> 实现，乐观锁则在表中加上 <code>version</code> 字段实现。</p><p>具体关于加锁时机可以参考<a href="http://www.importnew.com/21037.html" target="_blank" rel="noopener">深入详解乐观锁和悲观锁</a>、<a href="http://www.digpage.com/lock.html" target="_blank" rel="noopener">乐观锁、悲观锁</a>。</p><blockquote><p>事务隔离级别和乐观锁、悲观锁的关系：事务隔离级别是并发控制的整体解决方案，其实际上是综合利用各种类型的锁和行版本控制，来解决并发问题。锁是数据库并发控制的内部机制，是基础。对用户来说，只有当事务隔离级别无法解决一些并发问题和需求时，才有必要在语句中手动设置锁。</p></blockquote><h1 id="数据库扩展"><a href="#数据库扩展" class="headerlink" title="数据库扩展"></a>数据库扩展</h1><p>随着业务规模的不断扩大，需要选择合适的方案去应对数据规模的增长，以应对逐渐增长的访问压力和数据量。</p><p>关于数据库的扩展主要包括：主从复制、读写分离、数据库分库与分表。</p><p><em>References</em></p><ul><li><a href="http://blog.csdn.net/justdb/article/details/17331569" target="_blank" rel="noopener">MySQL 读写分离</a></li><li><a href="http://blog.csdn.net/hguisu/article/details/7325124" target="_blank" rel="noopener">高性能 Mysql 主从架构的复制原理及配置详解</a></li><li><a href="http://blog.jobbole.com/94595/" target="_blank" rel="noopener">Mysql 主从复制原理和配置</a></li><li><a href="http://www.jianshu.com/p/ab704b437ebd" target="_blank" rel="noopener">Mysql 主从复制(Binary log)</a></li><li><a href="http://www.voidcn.com/article/p-fbygsnps-rp.html" target="_blank" rel="noopener">数据库分库分表策略的具体实现方案</a></li><li><a href="https://tech.meituan.com/dianping_order_db_sharding.html" target="_blank" rel="noopener">大众点评订单系统分库分表实践</a></li><li><a href="http://www.infoq.com/cn/articles/summary-and-key-steps-of-vip-orders-depots-table" target="_blank" rel="noopener">唯品会订单分库分表的实践总结已经关键步骤</a></li><li><a href="http://www.infoq.com/cn/articles/key-steps-and-likely-problems-of-split-table" target="_blank" rel="noopener">分库分表的几种常见形式以及可能遇到的难</a></li></ul><h1 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h1><p><em>References</em></p><ul><li><a href="http://www.ha97.com/2549.html" target="_blank" rel="noopener">MySQL数据库的各种存储引擎详解</a></li><li><a href="http://blog.csdn.net/qh_java/article/details/14045827" target="_blank" rel="noopener">MySQL中的存储引擎讲解（InnoDB,MyISAM,Memory等各存储引擎对比）</a></li></ul><h1 id="Redis-amp-Memcached"><a href="#Redis-amp-Memcached" class="headerlink" title="Redis &amp; Memcached"></a>Redis &amp; Memcached</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数据库基础&quot;&gt;&lt;a href=&quot;#数据库基础&quot; class=&quot;headerlink&quot; title=&quot;数据库基础&quot;&gt;&lt;/a&gt;数据库基础&lt;/h1&gt;&lt;p&gt;现在主流的数据库系统主要是关系数据库。关系数据库使用集合代数等概念和方法来处理数据库中的数据，同时数据组织成描述性的
      
    
    </summary>
    
      <category term="总结" scheme="http://www.hashcoding.net/categories/%E6%80%BB%E7%BB%93/"/>
    
    
  </entry>
  
  <entry>
    <title>CSKS-(一)、数据结构和算法</title>
    <link href="http://www.hashcoding.net/2017/08/26/CSKS-%E4%B8%80-%E3%80%81%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
    <id>http://www.hashcoding.net/2017/08/26/CSKS-一-、数据结构和算法/</id>
    <published>2017-08-26T01:54:05.000Z</published>
    <updated>2017-08-26T01:58:32.727Z</updated>
    
    <content type="html"><![CDATA[<h1 id="算法复杂度"><a href="#算法复杂度" class="headerlink" title="算法复杂度"></a>算法复杂度</h1><p>算法的时间复杂度反映了程序执行时间随输入规模增长而增长的量级，算法的空间复杂度反映了程序执行时消耗的空间随输入规模增长而增长的规模；时间复杂度和空间复杂度在很大程度上能很好反映出算法的优劣。</p><p>在数学上有三个记号用于刻画算法复杂度:</p><ul><li>大 $O$ 记号：表示函数数量级上的上界</li><li>大 $Ω$ 记号：与大 $O$ 记号相反，表示函数数量级上的下界</li><li>大 $Θ$ 记号：表示函数数量级上的一个确界</li></ul><p>通常情况下主要考虑的是算法的最坏情况，即大 $O$ 记号。</p><h2 id="数学定义"><a href="#数学定义" class="headerlink" title="数学定义"></a>数学定义</h2><p>下面给出三个记号的数学定义：</p><p>若存在常量 $c$ 和函数 $f(n)$，对于任意的 $n \gg 2$，均有 $T(n) \le c \times f(n)$ 成立，则表示 $f(n)$ 给出了 $T(n)$ 增长的一个渐进上界，记作 $T(n) = O(f(n))$。</p><p>若存在常量 $c$ 和函数 $g(n)$，对于任意的 $n \gg 2$，均有 $T(n) \ge c \times g(n)$ 成立，则表示 $g(n)$ 给出了 $T(n)$ 增长的一个渐进下界，记作 $T(n) = \Omega(g(n))$。</p><p>若存在常量 $c1$、$c2$ 和函数 $h(n)$，对于任意的 $n \gg 2$，均有 $c1 \times h(n) \le T(n) \le c2 \times h(n)$ 成立，则表示 $h(n)$ 给出了 $T(n)$ 增长的一个渐进下界，记作 $T(n) = Θ(h(n))$。</p><h2 id="P-问题和-NP-问题"><a href="#P-问题和-NP-问题" class="headerlink" title="P 问题和 NP 问题"></a>P 问题和 NP 问题</h2><p>一般地，$O(log_2n)$、$O(n)$、$O(n \times log_{2}n)$、$O(n^2)$、$O(n^3)$ 称为多项式复杂度；$O(2^n)$、$O(n!)$ 称为指数复杂度。</p><p>计算机科学家普遍认为前者（即多项式时间复杂度的算法）是有效算法，把这类问题称为 P（Polynomial，多项式）类问题，而把后者（即指数时间复杂度的算法）称为 NP（Non-Deterministic Polynomial，非确定多项式）问题。</p><p>多项式复杂度用于求解问题的代价是可接受的。很多问题没有多项式时间的解，比如大数分解、Hamilton 回路。虽然这些问题没有多项式时间内的解，但是可以在多项式时间内验证某个猜想是否正确。</p><p><em>References</em></p><ul><li><a href="http://blog.csdn.net/lanchunhui/article/details/51505016" target="_blank" rel="noopener">数据结构与算法的分析-渐进复杂度（三个记号）</a></li><li><a href="http://blog.csdn.net/zolalad/article/details/11848739" target="_blank" rel="noopener">算法的时间复杂度和空间复杂度-总结</a></li></ul><h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><p>数组、链表、栈、队列等是数据结构中最常用的，且实现比较简单。</p><p><em>References</em></p><ul><li><a href="http://blog.csdn.net/m0_37854317/article/details/70491581" target="_blank" rel="noopener">数组、链表、栈、队列、二叉树</a></li><li><a href="http://www.cnblogs.com/tpys/p/3568528.html" target="_blank" rel="noopener">数组、链表、栈、队列和STL</a></li></ul><h2 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h2><p>并查集这个数据结构主要用于判断两个元素是否为同一个集合元素。这里以 <code>p[i]</code> 表示 <code>i</code> 元素所在集合，开始时每个元素各占一个集合；<code>union(i, j)</code> 操作将原有两个集合 <code>i</code>、<code>j</code> 合并为一个集合。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) p[i] = i;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) weight[i] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">while</span> (i != p[i]) i = p[i];</span><br><span class="line">  <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i = find(x);</span><br><span class="line">  <span class="keyword">int</span> j = find(y);</span><br><span class="line">  <span class="keyword">if</span> (i == j) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">if</span> (weight[i] &lt; weight[j]) &#123; p[i] = j; weight[j] += weight[i]; &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123; p[j] = i; weight[i] += weight[j]; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>init()</code> 用于初始化并查集</li><li><code>find()</code> 用于找到当前元素所在的集合</li><li><code>union()</code> 用于将两个元素的集合合并起来</li></ul><p>因为使用类似与子节点指向父节点的原理，如果合并中一直加到某个节点最下方，将导致链变长。因此使用 <code>weight</code> 记录集合权重，每次将权重小的集合加到权重大的集合后，加快了 <code>find</code> 的速度。</p><h2 id="优先队列"><a href="#优先队列" class="headerlink" title="优先队列"></a>优先队列</h2><p>优先队列内部由堆构成，堆类似二叉树，其中子节点均小于父节点。只要保证每次插入、删除数据时保持堆原有的性质，那么可以在 $O(1)$ 的时间复杂度内得到最小（最大）值。</p><p><em>References</em></p><ul><li><a href="http://www.cnblogs.com/luoxn28/p/5616101.html" target="_blank" rel="noopener">优先队列原理与实现</a></li></ul><h2 id="树"><a href="#树" class="headerlink" title="树"></a>树</h2><h3 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h3><p><img src="http://www.hashcoding.net/uploads/images/2017/8/binary-tree.png" alt="二叉树"></p><p>二叉树是指最多有两个孩子节点的树。在计算机科学中，二叉树有几个重要的性质：</p><ul><li>二叉树第 $i$ 层最多有 $2^{i-1}$ 个节点，其中 $i \ge 1$</li><li>二叉树深度为 $k$，那么最多有 $2^k-1$ 个节点，其中 $k \ge 1$</li><li>$n_0$ 表示度为 $0$ 的节点，$n_2$ 表示度为 $2$ 的节点，那么有 $n_0=n_2+1$</li><li>在完全二叉树中，具有 $n$ 个节点的二叉树深度为 $\lfloor log_2(n + 1) \rfloor + 1$</li></ul><p>第一个可以不用证明。以 $l_i$ 表示第 $i$ 层有最多有多少个节点，那么第二条结论等于 $total=l_1+l_2+\cdots+l_k=1+2+\cdots+2^{i-1}=2^i-1$。</p><p>第三个性质需要用到其他两个公式：</p><ul><li>$n=n_0+n_1+n_2$ $n$ 表示总节点个数，$n_1$ 表示度为 $1$ 的节点的个数</li><li>$n-1=2n_2+n_1$ 这个公式是边的数量的恒等式</li></ul><p>两式相减可以得到第三条公式。</p><p>完全二叉树最后一层长度为 $1 \to 2^{i-1}$ 之间，因为 $2^i-1=n$，所以成立。</p><p><em>References</em></p><ul><li><a href="http://blog.csdn.net/tianlihua306/article/details/44621827" target="_blank" rel="noopener">二叉树的5个重要性质</a></li><li><a href="http://www.jianshu.com/p/43b6b90555ca" target="_blank" rel="noopener">二叉树</a></li></ul><h3 id="二叉查找树"><a href="#二叉查找树" class="headerlink" title="二叉查找树"></a>二叉查找树</h3><p>假设有这样一颗二叉树，其节点值保存一个数据，而左节点的值均小于等于当前结点，右节点所有值均大于等于当前节点，那么这棵树就叫做二叉查找树。</p><p>在查找时，类似与二分查找，先判断是否等于当前值，然后根据大小在左右两侧进行查找。当然，因为没有其余限制，极端情况下二叉查找树会形成一条链，此时查找时间便降到 $O(n)$。所以实际使用中会对二叉查找树进行旋转操作，进行旋转的二叉查找树被成为平衡二叉树。比起普通二叉树，平衡二叉树在实现上复杂得多。</p><p><em>References</em></p><ul><li><a href="http://www.cnblogs.com/skywang12345/p/3576328.html" target="_blank" rel="noopener">二叉查找树</a></li></ul><h4 id="AVL-树"><a href="#AVL-树" class="headerlink" title="AVL 树"></a>AVL 树</h4><p>AVL 树是一种平衡二叉查找树，也被称为高度平衡树。它的特点是任何两个节点的高度差最大为 $1$。</p><p>如果树有 $n$ 个节点，AVL 树的增删查改操作复杂度为 $log(n)$，如果插入、删除操作导致 AVL 树中某个节点不再满足上述性质，那么平衡状态就被破坏。所以要对其进行旋转操作，保证其平衡性。</p><p>AVL 树只有四种可能出现的不平衡状态，与之对应的，就是 $4$ 种旋转操作。</p><p><em>References</em></p><ul><li><a href="http://www.cnblogs.com/vamei/archive/2013/03/21/2964092.html" target="_blank" rel="noopener">AVL树</a></li><li><a href="http://dongxicheng.org/structure/avl/" target="_blank" rel="noopener">AVL树详解</a></li></ul><blockquote><p>另一种二叉查找树是伸展树，伸展树有一个特点：当某个节点被访问时，伸展树会通过旋转操作使得该节点成为树根。所以再次访问这个节点时，能够迅速访问到这个节点。更多伸展树相关的请看<a href="http://www.cnblogs.com/skywang12345/p/3604238.html" target="_blank" rel="noopener">伸展树</a>。</p></blockquote><h4 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h4><p><em>References</em></p><ul><li><a href="http://www.cnblogs.com/yangecnu/p/Introduce-2-3-Search-Tree.html" target="_blank" rel="noopener">平衡查找树之2-3树</a></li><li><a href="http://www.cnblogs.com/yangecnu/p/Introduce-Red-Black-Tree.html" target="_blank" rel="noopener">平衡查找树之红黑树</a></li><li><a href="http://www.cnblogs.com/skywang12345/p/3245399.html" target="_blank" rel="noopener">红黑树详解</a></li></ul><h3 id="Tire-树"><a href="#Tire-树" class="headerlink" title="Tire 树"></a>Tire 树</h3><p><em>References</em></p><ul><li><a href="http://www.cnblogs.com/Jason-Damon/archive/2012/04/15/2450100.html" target="_blank" rel="noopener">Tire 树</a></li></ul><h3 id="B-树"><a href="#B-树" class="headerlink" title="B 树"></a>B 树</h3><p><em>References</em></p><ul><li><a href="http://www.cnblogs.com/mushroom/p/4100087.html" target="_blank" rel="noopener">算法数据结构(一)-B树</a></li><li><a href="http://blog.csdn.net/dazhong159/article/details/7963846" target="_blank" rel="noopener">B、B+、B* 树</a></li><li><a href="http://blog.csdn.net/v_JULY_v/article/details/6530142/" target="_blank" rel="noopener">从 B、B+、B* 树谈到 R 树</a></li></ul><h2 id="区间信息维护与查询"><a href="#区间信息维护与查询" class="headerlink" title="区间信息维护与查询"></a>区间信息维护与查询</h2><p>有时会需要在区间上进行操作，比如区间最值、区间和等。</p><h3 id="树状数组"><a href="#树状数组" class="headerlink" title="树状数组"></a>树状数组</h3><p>树状数组提供了一种查询和维护区间和的方式。</p><h4 id="low-bit"><a href="#low-bit" class="headerlink" title="low_bit"></a>low_bit</h4><p>进一步将树状数组前，得讲讲 <code>low_bit</code>，<code>low_bit</code> 用于求出数值二进制表示中的最后一个 $1$ 所表示的数值。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">low_bit</span><span class="params">(<span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> c &amp; (c ^ (c - <span class="number">1</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从二进制的角度可以清晰地观察到原理：</p><blockquote><p>以 15(1110) 为例，15-1(1101)，15^(15-1)(0011)，所以<code>low_bit(15)</code>(0010)</p></blockquote><hr><p>树状数组用 $c[i]$ 记录 $a[i-low_bit(i)+1]+…+a[i]$ 的信息。那么想要前 $i$ 个数据的和就可以用下面的代码:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    ret += c[i];</span><br><span class="line">    i -= low_bit(i);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到前 $i$ 个数据和为 $a[1]+a[2]+…+a[i]$，将其划分为两部分 $a[1]+a[2]+…+a[i-low_bit(i)]$ 和 $a[i-low_bit(i)+1]+…+a[i]$，后一部分等价于 $c[i]$。现在就将求和转换为求前 $i-low_bit(i)$ 项加上 $c[i]$ 的和。递归地运用，就能得到具体值。</p><p>树状数组同时还允许修改操作：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">while</span> (i &lt;= length) &#123;</span><br><span class="line">    c[i] += d;</span><br><span class="line">    i += low_bit(i);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里算法将等价于执行<code>a[i] += d</code>，其中<code>length</code>为数据长度最大值。当修改了元素值后，树状数组维护的信息也应修改。因为 $c[i]$ 等于 $a[i-low_bit(i)+1]+…+a[i]$，而 $c[i+low_bit(i)]$ 的区间范围为：$[i+low_bit(i)-low_bit(i+low_bit(i))+1, i+low_bit(i)]$，其中 $low_bit(i+low_bit(i))$ 显然等于 $low_bit(i) &lt;&lt; 1$，所以等价于 $[i-low_bit(i)+1, i+low_bit(i)] &gt; [i-low_bit(i)+1, i]$。要保证树状数组信息正确，必须在修改 $c[i]$ 后同时修改 $c[i+low_bit(i)]$ 所在值。</p><p>有了两个操作后，就能完成区间查询操作，比如查询[3,5]的和，可以使用 $sum(5)-sum(2)$。</p><p>当然，树状数组需要进行初始化，如何初始化？使用<code>add(i, a[i])</code>。可以简单得出树状数组初始化操作耗时 $O(n \times log_2n)$，查询操作耗时 $O(log_2n)$。</p><h3 id="线段树"><a href="#线段树" class="headerlink" title="线段树"></a>线段树</h3><p>树状数组适合查询区间值。其主要思想是在数据集上维护一颗二叉树，二叉树叶子节点对应一个具体数据，而父节点表示左右节点对应的集合。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[1,4]</span><br><span class="line">[1,2][3,4]</span><br><span class="line">[1][2][3][4]</span><br></pre></td></tr></table></figure><p>如上所示，最下方为其数据集，而上方为对应的父节点。现在用每个父节点维护其子节点对应区间的信息（最大值、最小值、求和）。那么如果要查询某个区间内容比如 <code>[1,3]</code>，可以将集合分为 <code>[1,2][3]</code> 两部分，因此每次查询会停留在区间被完全覆盖的节点上，从而实现快速查询。</p><p>同树状数组一致，当更新某个数据时，同样需要更新其上方包含该区间的节点的信息。线段树还可以对一个区间进行快速操作，比如整个区间加上某个值。实现方式很简单，在每个节点处加上一个额外的信息，在进行操作时，如果区间完整覆盖了当前区间，那么就把操作添加到当前额外信息上。当然，后续查询中如果查到的区间小于该节点的区间怎么办？那就需要把额外信息往下传递。</p><h3 id="Sparse-Table"><a href="#Sparse-Table" class="headerlink" title="Sparse Table"></a>Sparse Table</h3><p>如果仅仅需要查询区间最值，且初始化后数据不会改变，那么使用 sparse table 是不错的选择。</p><p>sparse table 的思路是使用函数 $f(i, j)$ 表示从 $i$ 开始长度为 $2^j$ 的一段元素中的最小值（最大值）。显然有 $f(i, j)=min(f(i, j-1), f(i+2^{j-1}, j-1))$ 成立。观察到总共有 $n$ 个数据，而每个数据表示长度最多为 $log(n)$，所以总共初始化耗时 $O(n \times log_2(n))$。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) d[i][<span class="number">0</span>] = a[i];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; (<span class="number">1</span> &lt;&lt; j) &lt;= n; ++j) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i + (<span class="number">1</span> &lt;&lt; j) - <span class="number">1</span> &lt; n; ++i) </span><br><span class="line">      d[i][j] = min(d[i][j<span class="number">-1</span>], d[i+(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))][j<span class="number">-1</span>]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当构造好了 table 后如何查询呢？比方说想要找到区间 $[L, R]$ 的最值，这时需要找到一个区间满足$2^k \le R-L+1$，其中 $k$ 为满足前面不等式的最大整数，那么就可以通过区间 $[L, L+2^k]$ 和 $[R-2^k+1, R]$ 的最值进行比较得到（即 $f(L, k)$ 和 $f(R-z^k+1, k)$，因为求最值，所以区间重叠不影响结果）。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> k = <span class="number">0</span>; </span><br><span class="line">  <span class="keyword">while</span> (<span class="number">1</span> &lt;&lt; (k+<span class="number">1</span>) &lt;= r-l+<span class="number">1</span>) k++;</span><br><span class="line">  <span class="keyword">return</span> min(d[l][k], d[r-(<span class="number">1</span>&lt;&lt;k)+<span class="number">1</span>][k])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完成预处理后，查询操作可以在常量时间内完成。</p><h1 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h1><p>这里列出了常见的十大排序算法</p><table><thead><tr><th>算法</th><th style="text-align:center">空间</th><th style="text-align:center">稳定</th><th style="text-align:center">时间复杂度</th><th style="text-align:center">空间复杂度</th></tr></thead><tbody><tr><td>冒泡排序</td><td style="text-align:center">in</td><td style="text-align:center">stable</td><td style="text-align:center">$O(n^2)$</td><td style="text-align:center">- </td></tr><tr><td>插入排序</td><td style="text-align:center">in</td><td style="text-align:center">stable</td><td style="text-align:center">$O(n^2)$</td><td style="text-align:center">- </td></tr><tr><td>选择排序</td><td style="text-align:center">in</td><td style="text-align:center">unstable</td><td style="text-align:center">$O(n^2)$</td><td style="text-align:center">$O(1)$</td></tr><tr><td>归并排序</td><td style="text-align:center">out</td><td style="text-align:center">stable</td><td style="text-align:center">$O(nlog(n))$</td><td style="text-align:center">$O(n)$ </td></tr><tr><td>快速排序</td><td style="text-align:center">in</td><td style="text-align:center">unstable</td><td style="text-align:center">$O(n^2)$</td><td style="text-align:center">-</td></tr><tr><td>堆排序</td><td style="text-align:center">in</td><td style="text-align:center">unstable</td><td style="text-align:center">$O(nlog(n))$</td><td style="text-align:center">- </td></tr><tr><td>计数排序</td><td style="text-align:center">out</td><td style="text-align:center">stable</td><td style="text-align:center">$O(n+k)$</td><td style="text-align:center">- </td></tr><tr><td>桶排序</td><td style="text-align:center">out</td><td style="text-align:center">stable</td><td style="text-align:center">$O(n^2)$</td><td style="text-align:center">- </td></tr><tr><td>基数排序</td><td style="text-align:center">out</td><td style="text-align:center">stable</td><td style="text-align:center">$O((n+k)d)$</td><td style="text-align:center">-</td></tr><tr><td>希尔排序</td><td style="text-align:center">-</td><td style="text-align:center">-</td><td style="text-align:center">-</td><td style="text-align:center">-</td></tr></tbody></table><p>解释：</p><ul><li>stable：表示排序前后值相同的元素相对位置不变</li><li>unstable：与上面相反</li><li>In-place：表示排序算法可以在原有数据空间上执行</li><li>Out-place：表示排序算法需要额外的空间来执行</li></ul><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p>冒泡排序是通过两两交换，像水中的泡泡一样，小的先冒出来，大的后冒出来。具体实现为：从第一个到最后一个扫描，每次按一定顺序排列相邻的两个元素；执行一次后，找到一个最大元素，将查找范围减一后重复执行上一部；执行多次后，达到有序。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = length<span class="number">-1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (a[j] &gt; a[j+<span class="number">1</span>])</span><br><span class="line">      swap(a, j, j + <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><p>插入排序将数据分为前后两个部分：</p><ul><li>按照某种顺序有序部分</li><li>无序部分</li></ul><p>每次将无序部分的第一个数据与有序部分进行比较并交换，这样朝着开始方向移动，直到找到第一个大于或小于该数据的值。</p><p>插入排序比较适合用于“少量元素的数组”。其实插入排序的复杂度和逆序对的个数一样，当数组倒序时，逆序对的个数为 $\frac{n(n-1)}{2}$，因此插入排序复杂度为 $O(n^2)$。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; ++i) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &gt; <span class="number">0</span> &amp;&amp; less(a[j], a[j<span class="number">-1</span>]); j--)</span><br><span class="line">    swap(a, j, j<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>插入排序的速度直接是逆序对的个数，而冒泡排序中执行“交换“的次数是逆序对的个数，因此冒泡排序执行的时间至少是逆序对的个数，因此插入排序的执行时间至少比冒泡排序快。</p><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><p>每次找一个最小值。具体实现为每次在未排序数据中找到一个最值，并加到以排序数据首部或尾部。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">  <span class="keyword">int</span> idx = i;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (a[idx] &lt; a[j])</span><br><span class="line">      idx = j;</span><br><span class="line">  &#125;</span><br><span class="line">  swap(a, i, idx);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><p>运用分治法思想解决排序问题。实现中将原有数据分为两个部分，递归调用自己，最后得到了两份有序的数据，然后将两份有序数据合并。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// [l, r)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> *tmp, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (l &gt;= r<span class="number">-1</span>)</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> mid = l + (r - l) / <span class="number">2</span>;</span><br><span class="line">  sort(a, tmp, l, mid);</span><br><span class="line">  sort(a, tmp, mid, r);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> i = l, j = mid, k = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; r - l; k++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i &lt; mid) tmp[k++] = a[i++];</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (j &gt; hi) tmp[k++] = a[j++];</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (a[i] &gt; a[j]) tmp[k++] = a[j++];</span><br><span class="line">    <span class="keyword">else</span> tmp[k++] = a[i++];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; r - l; k++) </span><br><span class="line">    a[l + k] = tmp[k];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>归并排序是 <code>out-place sort</code>，与快速排序相比，需要很多额外空间；通常情况下，归并和快排渐进复杂度一致，不过归并排序系数大于快排，所以通常认为归并排序慢于快排。</p><p>插入排序适合对小数组进行排序，所以可以使用插入排序对归并排序进行改进。以数组长度为 $k$ 时采用插入排序，则渐进复杂度为 $O(nk+nlog(n/k))$，如果保证 $k=log(n)$，那么有 $O(nlog(n))$。</p><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><p>快速排序的思想也是分治法。具体做法是选择一个元素作为 <code>pivot</code>，并用 <code>pivot</code> 将数据分为大于 <code>pivot</code> 和小于 <code>pivot</code> 的两部分。然后分别对这两部分递归调用自己，此时得到的数据便是有序的。</p><p>在数组已经有序时，快排的时间复杂度为 $O(n^2)$。通常使用随机化（shuffle array 或者 randomized select pivot）来改进，使得期望运行时间为 $O(nlog(n))$。</p><p>当输入数组的所有元素都一样时，不管是快速排序还是随机化快速排序的复杂度都为 $O(n^2)$，使用三向切分技术可以使这种情况下的复杂度为 $O(n)$。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// [l, r)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> lt = l, gt = r;</span><br><span class="line">  <span class="keyword">int</span> pivot = a[l];</span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">while</span> (a[++lt] &lt; pivot) <span class="keyword">if</span> (lt &gt;= r) <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">while</span> (pivot &lt; a[--gt]) <span class="keyword">if</span> (gt &lt;= l) <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span> (lt &gt;= gt) <span class="keyword">break</span>;</span><br><span class="line">    swap(a, lt, gt);</span><br><span class="line">  &#125;</span><br><span class="line">  swap(a, gt, l);</span><br><span class="line">  <span class="keyword">return</span> gt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// [l, r)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (l &gt;= r<span class="number">-1</span>)</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">int</span> part = partition(a, l, r);</span><br><span class="line">  sort(a, l, part);</span><br><span class="line">  sort(a, part + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在算法一书中还介绍了一种快排的优化算法：三向切分。其核心思想是将原有的分成两部分转换为分成三部分：小于、等于、大于。具体实现需要依赖于下面的数据（以递增排序为例）：</p><ul><li><code>lt</code> 表示当前不小于 <code>pivot</code> 的第一个元素</li><li><code>i</code> 表示未排序的第一个元素</li><li><code>gt</code> 表示大于 <code>pivot</code> 的第一个元素</li></ul><p>根据上面的，分析过程中数据布局如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[l 小于pivot |lt 等于pivot |i 未排序 |gt 大于pivot r)</span><br></pre></td></tr></table></figure><p>此时选中第一个i进行操作：</p><ul><li>如果 $a[i] == pivot$ 则 $i=i+1$</li><li>如果 $a[i] &gt; pivot$ 则交换 $a[–gt]$ 和 $a[i]$</li><li>如果 $a[i] &lt; pivot$则交换 $a[i++]$ 和 $a[lt++]$</li></ul><p>每次操作完成后，仍然保持了原有的数据格式。重复该过程直到$i==gt$ 则表示 <code>partition</code> 操作完成，现在只需要对 $[l, lt)$ 和 $[gt, r)$ 部分进行排序即可。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (l &gt;= r<span class="number">-1</span>)</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">int</span> lt = l, i = l+<span class="number">1</span>, gt = r;</span><br><span class="line">  <span class="keyword">int</span> pivot = a[l];</span><br><span class="line">  <span class="keyword">while</span> (i &lt; gt) &#123;</span><br><span class="line">    <span class="keyword">int</span> cmp = a[i] - pivot;</span><br><span class="line">    <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>) swap(a, --gt, i);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>) swap(a, i++, lt++);</span><br><span class="line">    <span class="keyword">else</span> i++;</span><br><span class="line">  &#125;</span><br><span class="line">  sort(a, l, lt);</span><br><span class="line">  sort(a, gt, r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><p>运用了最小堆、最大堆这个数据结构，而堆还能用于构建优先队列。</p><p><em>References</em></p><ul><li><a href="http://blog.csdn.net/morewindows/article/details/6709644/" target="_blank" rel="noopener">堆与堆排序</a></li></ul><h2 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h2><p>计数排序有很大的局限性，<strong>其要求数据范围比较小，能枚举</strong>。具体实现思路是将其按照数据数据大小，直接分配一个固定位置。</p><p>一般情况下计数排序复杂度为 $O(n+k)$，当$k=O(n)$时，计数排序时间为$O(n)$，其中 $k$ 表示数据范围，$n$ 表示数据长度。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> n, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> b[n+<span class="number">1</span>], c[k+<span class="number">1</span>];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= k; ++i) c[i] = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) c[a[i<span class="number">-1</span>]]++;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; ++i) c[i] += c[i<span class="number">-1</span>];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt; <span class="number">0</span>; --i) b[c[a[i<span class="number">-1</span>]]--] = a[i<span class="number">-1</span>];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) a[i] = b[i+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="桶排序"><a href="#桶排序" class="headerlink" title="桶排序"></a>桶排序</h2><p><img src="http://www.hashcoding.net/uploads/images/2017/6/桶排序.jpg" alt="桶排序"></p><p>算法：将元素按照范围依次分散到多个桶中，此时桶的范围是有序的。再对每个桶进行排序，最后得到的数据就是有序的。</p><p>当分布不均匀时，全部元素都分到一个桶中，则 $O(n^2)$，当然也可以将插入排序换成堆排序、快速排序等，这样最坏情况就是 $O(nlog(n))$。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> *b[<span class="number">10</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">  <span class="keyword">int</span> l[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">    <span class="keyword">int</span> idx = a[i] % <span class="number">10</span>;</span><br><span class="line">    将a[i]插入到b[idx]中</span><br><span class="line">    l[idx]++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) </span><br><span class="line">    otherSort(b[i], l[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>桶排序的缺点是：</p><ul><li>首先是空间复杂度比较高，需要的额外开销大。排序有两个数组的空间开销，一个存放待排序数组，一个就是所谓的桶，比如待排序值是从 $0$ 到 $m-1$，那就需要 $m$ 个桶，这个桶数组就要至少 $m$ 个空间。</li><li>其次待排序的元素都要在一定的范围内等等。</li></ul><h2 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h2><p>这里假定每位的排序是计数排序。而计数排序是稳定的，所以对部分有序的数据排序，得到的结果仍然满足部分有序。话句话说，如果第 $k+1$ 位有序，对第 $k$ 位进行计数排序后，得到的结果仍然在 $k+1$ 位有序。将原有数据每一位依次排序，最后得到的结果能保证有序。</p><p>计数排序复杂度为 $O((n+k)d)$。</p><ul><li>$d$ 表示位数</li><li>$k$ 表示数据范围</li><li>$n$ 表示长度</li></ul><p>当 $d$ 为常数、$k=O(n)$时，效率为$O(n)$。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 其中counter用于对第i位排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> d, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= d; ++i) &#123;</span><br><span class="line">    counter_sort(a, i, n);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h2><p>希尔排序是利用插入排序在有序时速度快的特点。以 $k$ 为间隔对数据进行排序，直到 $k=1$。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (k &lt; n/<span class="number">3</span>) k = k*<span class="number">3</span> + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span> (k &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = k; i &lt; N; ++i) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &gt;= k &amp;&amp; a[j] &lt; a[j-k]; j -= k)</span><br><span class="line">        swap(a, j, j-k);</span><br><span class="line">    &#125;</span><br><span class="line">    k /= <span class="number">3</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h1><h2 id="查找算法"><a href="#查找算法" class="headerlink" title="查找算法"></a>查找算法</h2><h3 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h3><p>对于<strong>有序且可以随机访问</strong>的数据，要判断数据中是否含有某个值，可以使用 $O(log(n))$ 的二分查找。</p><p>对于一个给定的区间 $[l, r)$，我们判断 $mid=\frac{l+r}{2}$ 是否为目标值，是表示找到，否则没有找到。没有找到时，判断值和 $val[mid]$ 和目标值的大小，如果目标值小于中间值，则实际值应该能在左边区间 $[l, mid)$ 中找到，否则应该在 $[mid + 1, r)$ 中查找。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// [l, r)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> n, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> l = <span class="number">0</span>, r = n;</span><br><span class="line">  <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">    <span class="keyword">int</span> mid = l + (r-l)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (a[mid] &lt; val) r = mid;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (a[mid] &gt; val) l = mid + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> mid;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三分查找"><a href="#三分查找" class="headerlink" title="三分查找"></a>三分查找</h3><p>二分查找适用于单调函数中逼近求解某点的值。如果遇到凸性或凹形函数时，可以用三分查找求那个凸点或凹点。</p><p>假设我们要找一个凸点，给了区间 $[l, r]$ 和函数 $f(x)$，下面找出中点 $mid=(l+r)/2$，以及 $[mid,r]$ 的中点 $mmid=(mid+r)/2$。通过比较 $f(mid)$ 与 $f(mmid)$ 的大小来缩小范围，当最后 $L=R-1$ 时，再比较下这两个点的值，我们就找到了答案。</p><p>当 $f(mid) &gt; f(mmid)$ 的时候，我们可以断定 $mmid$ 一定在最值点的右边。假设 $mmid$ 在最值点的左边，则 $mid$ 也一定在最值点的左边，又由 $f(mid) &gt; f(mmid)$ 可推出 $mmid &lt; mid$，与已知矛盾，故假设不成立。所以，此时可以将 $R = mmid$ 来缩小范围。</p><p>当 $f(mid) &lt; f(mmid)$ 的时候，我们可以断定 $mid$ 一定在最值点的左边。反证法：假设 $mid$ 在最值点的右边，则 $mmid$ 也一定在最值点的右边，又由 $f(mid) &lt; f(mmid)$ 可推出 $mid &gt; mmid$，与已知矛盾，故假设不成立。同理，此时可以将 $L = mid$ 来缩小范围。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123; <span class="comment">//找凸点   </span></span><br><span class="line">    <span class="keyword">while</span> (l &lt; r<span class="number">-1</span>) &#123;  </span><br><span class="line">        <span class="keyword">int</span> mid  = (l+r)/<span class="number">2</span>;  </span><br><span class="line">        <span class="keyword">int</span> mmid = (mid+r)/<span class="number">2</span>;  </span><br><span class="line">        <span class="keyword">if</span> (f(mid) &gt; f(mmid))  </span><br><span class="line">            r = mmid;  </span><br><span class="line">        <span class="keyword">else</span>  </span><br><span class="line">            l = mid;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> f(l) &gt; f(r) ? l : r;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="树-1"><a href="#树-1" class="headerlink" title="树"></a>树</h2><p>树已经在前面<a href="#树">数据结构-树</a>中介绍了。</p><h2 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h2><h3 id="散列表"><a href="#散列表" class="headerlink" title="散列表"></a>散列表</h3><p>散列表类似于数组的使用方式，通过 <code>key</code> 找到对应的 <code>value</code>。使用散列查找算法分为两步：</p><ol><li>用散列函数将 <code>key</code> 映射到数组的索引上</li><li>处理索引（hash）冲突</li></ol><p>散列函数选取非常重要，因为好的散列函数能够将数据均匀的分布在数组上。这里重点看冲突的处理，冲突处理主要有两种方式：</p><ol><li>链地址法</li><li>线性探测法（开放地址法）</li></ol><p><strong>在散列表使用中，由于冲突的存在，散列表除了要保存value外，也要保存key</strong>。查找时，需要对 <code>key</code> 进行比对，成功时才是真正定位到了具体数据上。</p><p>链地址法将数组看作一个个桶，具体的数据通过链表链接到桶后。java 中的 <code>HashMap</code> 便是使用的链地址法。而线性探测法是发生冲突时重新选择一个新的 <code>hash</code> 值作为索引，直到找到空位为止。</p><p>当散列表中存储数据到达一定限制后，就要调整散列表大小。比如线性探测法中，如果 <code>存储键的数目N=数组大小M</code>，那么永远也找到一个新的空位存放当前元素。这里需要介绍<strong>负载因子（load factor），表示散列表空间使用率</strong>。在 <code>HashMap</code> 中的负载因子默认为 <code>0.75</code>，<code>桶的大小M*loadFactor</code> 得到容量调整的 <code>阈值(threshold)</code>。所以当 <code>键的数量N大于桶大小M*0.75</code> 后， <code>HashMap</code> 会调整容量大小。具体调整多少呢？在 Java 中默认是两倍，因为散列表桶大小默认是16，而 <code>HashMap</code> 又使用 <code>hash</code> 值模上桶大小比如 <code>key.hashcode() &amp; (length - 1)</code> 作为桶索引。（只有在 <code>length</code> 为2的倍数时，<code>&amp;</code> 结果和 <code>%</code> 结果一致，如果将容量扩充为其他数量而非2的倍数，那么 <code>&amp;</code> 得到的索引值可能就不是均匀的分布在数组上了）。</p><p><em>References</em></p><ul><li><a href="http://www.vvbin.com/?p=376" target="_blank" rel="noopener">为什么求模运算要用素数（质数）—— 哈希表设计</a></li><li><a href="http://blog.csdn.net/qq_24489717/article/details/51189619" target="_blank" rel="noopener">Hash时取模为什么要模质数</a></li><li><a href="http://blog.csdn.net/acdreamers/article/details/11820651" target="_blank" rel="noopener">字符串Hash的原理与应用</a></li><li><a href="http://zhangshixi.iteye.com/blog/672697" target="_blank" rel="noopener">HashMap 的实现原理</a></li><li><a href="http://blog.csdn.net/u011240877/article/details/53358305" target="_blank" rel="noopener">HashMap 转红黑树</a></li></ul><h3 id="Hash-树"><a href="#Hash-树" class="headerlink" title="Hash 树"></a>Hash 树</h3><p>在 Hash 表中通常使用素数作为模运算的因子，对于一个 Hash 值，如果素数为 $x$，那么能将 Hash 值域分为 $x$ 块。再这个基础上，再做一次取模，如果用素数 $y$ 且 $y \ne x$，那么就将值域分为了 $x \times y$ 块。依次类推，形成一颗树状的表，称为 Hash 树。</p><p><em>References</em></p><ul><li><a href="http://blog.csdn.net/ynkdyx/article/details/8094124" target="_blank" rel="noopener">简单理解 Hash 树</a></li><li><a href="http://blog.csdn.net/yang_yulei/article/details/46337405" target="_blank" rel="noopener">HASH树</a></li></ul><h1 id="图"><a href="#图" class="headerlink" title="图"></a>图</h1><p>图由顶点(vertex, node)和边(edge)组成。假设定点集合为 V，边集合为 E，那么图可以表示为 G(V, E)，连接两点 u 和 v 的边用 e(u, v) 表示。图分为有向图和无向图，分别表示边是否有指向性。实际应用中，还会给边赋予各种各样的属性。比较具有代表性的有权值(cost)，此时称图为带权图。</p><h2 id="图的术语"><a href="#图的术语" class="headerlink" title="图的术语"></a>图的术语</h2><p>对于无向图，两个定点之间如果有边连接，那么就认为<strong>两点相邻</strong>。相邻定点的序列称为<strong>路径</strong>。起点和终点重合时，路径被称为<strong>圈</strong>。任意两个点都存在路径的叫做<strong>连通图</strong>。定点的边数叫做这个<strong>顶点的度</strong>。我们称没有圈的连通图为<strong>树</strong>，没有圈的非连通图为<strong>森林</strong>。对于树，边数正好等于顶点数减一，这是一个等价条件。</p><p>对于有向图，起点为顶点 V 的边为 V 的边集。边集数目等于定点<strong>出度</strong>，重点为定点V的边的数目等于定点的<strong>入度</strong>。如果有向图没有圈，那么该图称为DAG(Directed Acyclic Graph)。</p><p><a href="https://www.byvoid.com/zhs/blog/biconnect" target="_blank" rel="noopener">图的割点、桥与双连通分支</a></p><h2 id="图的表示方法"><a href="#图的表示方法" class="headerlink" title="图的表示方法"></a>图的表示方法</h2><p>图常见的表示方法有两种：</p><ul><li>邻接矩阵；</li><li>邻接表。</li></ul><p>两种方法各有优缺点，适合不同的算法。接下来，记顶点和边的集合为 V 和 E ，|V| 和 |E| 分别表示顶点和边的个数，另外，将顶点编号为 $0 \cdots |V|-1$。</p><p>邻接矩阵使用 $|V| \times |V|$ 的二维数组来表示图，其中 $g[i][j]$ 表示顶点 $i$ 和顶点 $j$ 的关系，比如是否连接，或者边的权值。需要注意的是，如果图存在重边或者自环，如果使用的是无权图，那么用 $g[i][j]$ 表示边数即可，对于带权图则无法表示。同时，对于稀疏图，会存在这大量浪费空间的情况，比如表示一颗树，只需要记录 $|V|-1$ 条边，而实际上花费了 $|V|*|V|$ 的空间。</p><p>使用邻接表则完美解决上述情况，邻接表将边保存到对应的顶点处，向链表一样，指向其他顶点。使用邻接表只需要花费 $O(|V|+|E|)$的空间。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 邻接表表示</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">vertex</span> &#123;</span></span><br><span class="line">  <span class="built_in">vector</span>&lt;vertex*&gt; edge;</span><br><span class="line">  <span class="comment">//顶点属性</span></span><br><span class="line">&#125;;</span><br><span class="line">vertex G[Nodes];</span><br><span class="line"><span class="comment">// or</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> from, to, cost;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;edge&gt; G[Nodes];</span><br></pre></td></tr></table></figure><h2 id="拓扑排序"><a href="#拓扑排序" class="headerlink" title="拓扑排序"></a>拓扑排序</h2><p><em>References</em></p><ul><li><a href="http://www.cnblogs.com/hibernate6/archive/2012/01/17/2521942.html" target="_blank" rel="noopener">等价、偏序、全序</a></li><li><a href="http://blog.jobbole.com/108351/" target="_blank" rel="noopener">拓扑排序详解</a></li></ul><h2 id="联通分量"><a href="#联通分量" class="headerlink" title="联通分量"></a>联通分量</h2><h3 id="强连通分量"><a href="#强连通分量" class="headerlink" title="强连通分量"></a>强连通分量</h3><p><em>References</em></p><ul><li><a href="https://www.byvoid.com/zht/blog/scc-tarjan/" target="_blank" rel="noopener">有向圖強連通分量的Tarjan算法</a></li><li><a href="http://www.acmerblog.com/strongly-connected-components-6099.html" target="_blank" rel="noopener">求强连通分量-Kosaraju算法</a></li></ul><h3 id="双联通分量"><a href="#双联通分量" class="headerlink" title="双联通分量"></a>双联通分量</h3><p><em>References</em></p><ul><li><a href="http://blog.csdn.net/fuyukai/article/details/51039788" target="_blank" rel="noopener">Tarjan算法之-割、桥</a></li><li><a href="http://blog.csdn.net/fuyukai/article/details/51303292" target="_blank" rel="noopener">Tarjan算法之-双联通分量</a></li></ul><h2 id="最近公共祖先"><a href="#最近公共祖先" class="headerlink" title="最近公共祖先"></a>最近公共祖先</h2><p><em>References</em></p><ul><li><a href="http://www.cnblogs.com/ECJTUACM-873284962/p/6613379.html" target="_blank" rel="noopener">离线-Tarjan-LCA</a></li><li><a href="http://blog.csdn.net/liangzhaoyang1/article/details/52549822" target="_blank" rel="noopener">在线-Sparse Table-LCA</a></li><li><a href="http://blog.csdn.net/Janis_z/article/details/52937631?locationNum=6&amp;fps=1" target="_blank" rel="noopener">在线-倍增法-LCA</a></li></ul><h2 id="2-SAT"><a href="#2-SAT" class="headerlink" title="2-SAT"></a>2-SAT</h2><p><em>References</em></p><ul><li><a href="http://www.cnblogs.com/acSzz/archive/2012/09/05/2672472.html" target="_blank" rel="noopener">2-sat 讲解</a>  </li></ul><h2 id="最短路径"><a href="#最短路径" class="headerlink" title="最短路径"></a>最短路径</h2><p>所谓最短路径，是指给定两个顶点，找到以这两个顶点为起点和重点的路径中，边权值最小的路径。而单源最短路径则是固定一个顶点，求该点到其他所有定点的最短路的问题。</p><p>单元最短路径的算法有两种：1、Bellman-ford；2、Dijkstra 。</p><h3 id="Bellman-ford"><a href="#Bellman-ford" class="headerlink" title="Bellman-ford"></a>Bellman-ford</h3><p>记从顶点 $s$ 出发，到顶点 $i$ 的最短距离为 $d[i]$，那么有：$d[i]=min(d[j]+weight(j, i)|e(j,i) \in E)$ 成立。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span> <span class="keyword">int</span> from; <span class="keyword">int</span> to; <span class="keyword">int</span> cost; &#125;;</span><br><span class="line">edge es[MAX_E];</span><br><span class="line"><span class="keyword">int</span> d[MAX_V];</span><br><span class="line"><span class="keyword">int</span> V, E;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bellman_ford</span><span class="params">(<span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; V; ++i) d[i] = INF;</span><br><span class="line">  d[s] = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">bool</span> update = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; E; ++i) &#123;</span><br><span class="line">      edge e = es[i];</span><br><span class="line">      <span class="keyword">if</span> (d[e.from] != INF &amp;&amp; d[e.to] &gt; d[e.from] + e.cost) &#123;</span><br><span class="line">        d[e.to] = d[e.from] + e.cost;</span><br><span class="line">        update = <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!update) <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的方法就叫做 Bellman-ford 算法，如果图中不存在从点 $s$ 可达的负圈，那么路径一定不会经过任一点两次，所以最外层循环最多执行 $|V|-1$ 次。所以总的时间复杂度为 $|V| \times |E|$。如果存在负圈，那么 $|V|$ 次一定还会更新 $d$ 的值，所以可以用此判断是否有负圈。</p><h3 id="Dijkstra"><a href="#Dijkstra" class="headerlink" title="Dijkstra"></a>Dijkstra</h3><p>如果图中不存在负权边，那么可以用 Dijkstra 算法来求单源最短路径。在 Bellman-ford 算法中，如果 $d[j]$ 不是点 $j$ 到起点的最短路径，那么 $d[i]=d[j]+cost(j,i)$ 自然得到的也不是最短路径。而 Dijsktra 算法正好解决了这个问题，它将顶点分为两部分，一部分已经找到了最短距离，另一部分没找到。每次计算时，在还不是最短距离的集合中找到最短的那条，加到已经找到的集合中去。</p><p>那么如何更新距离呢？实际上只需要找到未使用过的顶点中的某个 $j$，和已经最短的顶点 $i$，保证 $d[i]+cost(i, j)=d[j]$ 比其余顶点都短，那么得到的 $d[j]$ 就是 $s$ 到 $j$ 的最短路径。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span> <span class="keyword">int</span> to, cost; &#125;;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; P;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> V, E;</span><br><span class="line"><span class="built_in">vector</span>&lt;edge&gt; G[MAX_V];</span><br><span class="line"><span class="keyword">int</span> d[MAX_V];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">(<span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line">  priority_queue&lt;P, <span class="built_in">vector</span>&lt;P&gt;, greater&lt;P&gt;&gt; que;</span><br><span class="line">  fill(d, d+V, INF);</span><br><span class="line">  d[s] = <span class="number">0</span>;</span><br><span class="line">  que.push(P(<span class="number">0</span>, s));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (!que.empty()) &#123;</span><br><span class="line">    P p = que.top(); que.pop();</span><br><span class="line">    <span class="keyword">int</span> v = p.second;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G[v].size(); ++i) &#123;</span><br><span class="line">      edge e = G[v][i];</span><br><span class="line">      <span class="keyword">if</span> (d[e.to] &gt; d[v] + e.cost) &#123;</span><br><span class="line">        d[e.to] = d[v] + e.cost;</span><br><span class="line">        que.push(P(d[e.to], e.to));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的算法在每次循环中，找出已经找到最短路径中距离 $s$ 点最短的点，然后更新与该点相邻的点的距离。这个算法的复杂度是 $O(|E| \times log(|V|))$。</p><h3 id="Floyd-Warshall"><a href="#Floyd-Warshall" class="headerlink" title="Floyd-Warshall"></a>Floyd-Warshall</h3><p>求解所有两点间的最短路的问题叫做任意两点间的最短路问题。Floyd-Warshall 算法可以在 $|V| \times |V| \times |V|$ 的时间里求得所有点的最短路径长度，同 Bellman-Ford 算法一样，可以处理负边的情况。该算法主要利用公式：$d[i][j]=min(d[i][j], d[i][k]+d[k][j])$ 的不断更新来实现。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> d[MAX_V][MAX_V];</span><br><span class="line"><span class="keyword">int</span> V;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">warshall_floyd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; V; ++k) </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; V; ++i)</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; V; ++j)</span><br><span class="line">        d[i][j] = min(d[i][j], d[i][k]+d[k][j]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最小生成树"><a href="#最小生成树" class="headerlink" title="最小生成树"></a>最小生成树</h2><p>给定一个图，在图上找到一棵树，那么这棵树被称为生成树。如果树的边权是所有树中最短的，这棵树被称为最短生成树。最小生成树求解有两种算法。</p><h3 id="Prim"><a href="#Prim" class="headerlink" title="Prim"></a>Prim</h3><p>Prim 算法和 Dijkstra 算法类似，均是从一个顶点出发，不断地添加边的算法。具体思路是假设一颗只包含一个顶点 $v$ 的树 $T$，然后贪心地选取 $T$ 和其他顶点之间相连的权值最小的边，并把它加到 $T$ 中。不断的进行该操作，直到所有节点均在 $T$ 中。其复杂度为 $O(V*V)$：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> cost[MAX_V][MAX_V];</span><br><span class="line"><span class="keyword">int</span> mincost[MAX_V];</span><br><span class="line"><span class="keyword">bool</span> used[MAX_V];</span><br><span class="line"><span class="keyword">int</span> V;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">prim</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; V; ++i) &#123;</span><br><span class="line">    mincost[i] = INF;</span><br><span class="line">    used[i] = <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  mincost[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">int</span> v = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> u = <span class="number">0</span>; u &lt; V; u++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!used[u] &amp;&amp; (v == <span class="number">-1</span> || mincost[u] &lt; mincost[v])) v = u;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (v == <span class="number">-1</span>) <span class="keyword">break</span>;</span><br><span class="line">    used[v] = <span class="literal">true</span>;</span><br><span class="line">    res += mincost[v];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> u = <span class="number">0</span>; u &lt; V; u++) &#123;</span><br><span class="line">      mincost[u] = min(mincost[u], cost[v][u]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Kruskal"><a href="#Kruskal" class="headerlink" title="Kruskal"></a>Kruskal</h3><p>Kruskal 算法是按照边的权值的顺序从小到大看一遍。Kruskal 在边的排序上最花时间，算法复杂度为 $O(|E| \times log(|E|))$。Kruskal 使用并查集，每次找到未使用的最小的边时，首先判断是否在一个集合。在一个集合就啥也不做，否则就把两者所在的集合合并。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span> <span class="keyword">int</span> u, v, cost; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">comp</span><span class="params">(<span class="keyword">const</span> edge &amp;e1, <span class="keyword">const</span> edge &amp;e2)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> e1.cost &lt; e2.cost;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">edge es[MAX_E];</span><br><span class="line"><span class="keyword">int</span> V, E;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kruskal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  sort(es, es + E, comp);</span><br><span class="line">  init_union_find(V);</span><br><span class="line">  <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; E; i++) &#123;</span><br><span class="line">    edge e = es[i];</span><br><span class="line">    <span class="keyword">if</span> (!same(e.u, e.v)) &#123;</span><br><span class="line">      unite(e.u, e.v);</span><br><span class="line">      res += e.cost;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二分图匹配"><a href="#二分图匹配" class="headerlink" title="二分图匹配"></a>二分图匹配</h2><p><em>References</em></p><ul><li><a href="http://www.renfei.org/blog/bipartite-matching.html" target="_blank" rel="noopener">二分图的最大匹配、完美匹配和匈牙利算法</a></li><li><a href="http://www.cnblogs.com/kuangbin/archive/2012/08/19/2646535.html" target="_blank" rel="noopener">二分图最佳匹配</a></li></ul><h2 id="网络流"><a href="#网络流" class="headerlink" title="网络流"></a>网络流</h2><p><em>References</em></p><ul><li><a href="http://www.acmerblog.com/ford-fulkerson-6135.html" target="_blank" rel="noopener">Ford-Fulkerson</a></li><li><a href="http://www.cnblogs.com/smartweed/p/5865727.html" target="_blank" rel="noopener">网络流详解</a></li></ul><h1 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h1><h2 id="最大公约数"><a href="#最大公约数" class="headerlink" title="最大公约数"></a>最大公约数</h2><p>求解最大公约数问题可以使用辗转相除法。辗转相除法实际上由一个等价公式推出：$gcd(a, b)=gcd(b, a \mod b)$，代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (b == <span class="number">0</span>) <span class="keyword">return</span> a;</span><br><span class="line">  <span class="keyword">return</span> gcd(b, a % b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最小公倍数"><a href="#最小公倍数" class="headerlink" title="最小公倍数"></a>最小公倍数</h2><p>最大公约数与最小公倍数在数学上存在联系：$lcm(a, b) = \dfrac{a \times b}{gcd(a, b)}$ 。只要计算出 $gcd(a, b)$，通过上式可计算 $lcm(a, b)$。</p><h2 id="素数判断"><a href="#素数判断" class="headerlink" title="素数判断"></a>素数判断</h2><p>恰好有两个<a href="http://baike.baidu.com/link?url=H6FcG9LNr4dOcDhM9iUypySTe4SoA1hrwqku9pITHu_vhKwNS9Z6RDq8BJiQVZtkqOK3Hccj4VAVnWjEHXV6LDADhmlL1-HBykMrhKjWz__" target="_blank" rel="noopener">约数</a>的整数被称为素数。如果 $d$ 是数 $n$ 的约数，那么 $\dfrac{n}{d}$ 也是 $n$ 的约数。因此只需要检查 $2 \to \sqrt{n}$ 范围内的整数就够了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_prime</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i * i &lt;= n; ++i) &#123;</span><br><span class="line">    <span class="keyword">if</span> (n % i == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个算法适合查询一次，如果查询多次，有另一种办法。埃氏筛法可以枚举 $n$ 以内的素数，其主要思路是将 $2 \to n$范围内的数据都写下来。其中最小的数字是 $2$，然后将所有 $2$ 的倍数全部删去。依次类推，将剩余的最小数字 $m$ 的倍数全部删去，最后得到的便是 $2 \to n$ 内所有的素数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sieve</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> p = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++i) is_prime[i] = <span class="literal">true</span>;</span><br><span class="line">  is_prime[<span class="number">0</span>] = is_prime[<span class="number">1</span>] = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">    <span class="keyword">if</span> (is_prime[i]) &#123;</span><br><span class="line">      prime[p++] = i;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">2</span> * i; j &lt;= n; j += i) is_prime[j] = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="快速幂"><a href="#快速幂" class="headerlink" title="快速幂"></a>快速幂</h2><p>快速幂实际上应用了二进制优化的思想。对于 $k^m$ 有 $k^{1+2+\cdots+i=m}=k^1 \times k^2 \times \cdots \times k^i$。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pow</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">unsigned</span> <span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span> (m &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (m &amp; <span class="number">1</span>) res *= x;</span><br><span class="line">    x = x * x; </span><br><span class="line">    m &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h2><p><em>References</em></p><ul><li><a href="http://www.cnblogs.com/linyujun/p/5194142.html" target="_blank" rel="noopener">数论四大定理</a></li><li><a href="http://www.acmerblog.com/extend-gcd-5610.html" target="_blank" rel="noopener">扩展欧几里得算法</a></li><li><a href="http://www.cnblogs.com/shawn-ji/p/5674772.html" target="_blank" rel="noopener">关于取模运算和求逆元</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;算法复杂度&quot;&gt;&lt;a href=&quot;#算法复杂度&quot; class=&quot;headerlink&quot; title=&quot;算法复杂度&quot;&gt;&lt;/a&gt;算法复杂度&lt;/h1&gt;&lt;p&gt;算法的时间复杂度反映了程序执行时间随输入规模增长而增长的量级，算法的空间复杂度反映了程序执行时消耗的空间随输入规模增
      
    
    </summary>
    
      <category term="总结" scheme="http://www.hashcoding.net/categories/%E6%80%BB%E7%BB%93/"/>
    
    
  </entry>
  
  <entry>
    <title>Computer Science Knowledge System</title>
    <link href="http://www.hashcoding.net/2017/06/13/Computer-Science-Knowledge-System/"/>
    <id>http://www.hashcoding.net/2017/06/13/Computer-Science-Knowledge-System/</id>
    <published>2017-06-13T15:52:08.000Z</published>
    <updated>2017-09-08T02:45:19.818Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据结构与算法"><a href="#数据结构与算法" class="headerlink" title="数据结构与算法"></a>数据结构与算法</h1><p><a href="http://www.hashcoding.net/2017/08/26/CSKS-%E4%B8%80-%E3%80%81%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/">CSKS-(一)、数据结构和算法</a></p><h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><p><a href="http://www.hashcoding.net/2017/08/26/CSKS-%E4%BA%8C-%E3%80%81%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/">CSKS-(二)、数据库系统</a></p><h1 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h1><p>操作系统是管理和控制计算机硬件与软件资源的计算机程序，功能包括管理计算机系统的硬件、软件及数据资源，控制程序运行，改善人机界面，为其它应用软件提供支持，让计算机系统所有资源最大限度地发挥作用，提供各种形式的用户界面，使用户有一个好的工作环境，为其它软件的开发提供必要的服务和相应的接口等。</p><p>操作系统主要有五大功能：处理机管理（CPU）、进程管理、内存管理、设备管理和文件系统管理。</p><h2 id="调度"><a href="#调度" class="headerlink" title="调度"></a>调度</h2><p>进程时用户提交给操作系统运行的最小单元。在学术上，进程是具有一定功能的程序关于某个数据集合上的一次运行活动，是系统进行资源调度和分配的一个独立单位。除了进程，操作系统还提供了更小粒度的调度对象-线程。线程是进程的实体，是CPU调度和分派的基本单位，它是比进程更小的能独立运行的基本单位。一个进程可以有多个线程，多个线程也可以并发执行。</p><p>一般情况下，系统按照以下流程创建一个进程：</p><ol><li>分配、初始化 PCB </li><li>初始化机器寄存器</li><li>拷贝、初始化内存页表</li><li>从硬盘加载程序代码到内存</li><li>将进程加入就绪队列</li><li>进程调度时，选择该进程并切换到用户态开始执行进程</li></ol><p>系统通过快速切换进程，让每一个进程都有一定的时间片来响应用户提交的请求；在用户的视角，好像每个进程都在同时执行一样。系统切换进程的方法叫做进程调度算法，基本的调度算法有：先来先服务、时间片轮转、短作业优先、优先级调度以及多级反馈队列调度。</p><p>除了进程切换，操作系统还负责管理进程的虚拟内存。一般情况下，系统会在硬盘上开辟一个空间作为交换区，用于在物理内存不足时选择性地交换部分虚拟页，以开辟出足够的物理空间。用于选择交换的页面的算法称为页面置换算法。基本的页面置换算法有：FIFO、第二次机会、时钟轮转、LRU 和 NRU。</p><p><em>References</em></p><ul><li><a href="http://www.cnblogs.com/kxdblog/p/4798401.html" target="_blank" rel="noopener">操作系统常用调度算法-cnblogs</a></li><li><a href="http://www.cnblogs.com/edisonchou/p/5003694.html" target="_blank" rel="noopener">操作系统核心原理-3.进程原理（上）：进程概要</a></li><li><a href="http://www.cnblogs.com/edisonchou/p/5020681.html" target="_blank" rel="noopener">操作系统核心原理-3.进程原理（中）：进程调度</a></li><li><a href="http://www.cnblogs.com/shijingjing07/p/5611579.html" target="_blank" rel="noopener">虚拟内存详解-cnblogs</a></li><li><a href="http://www.cnblogs.com/ranjiewen/p/7141696.html" target="_blank" rel="noopener">操作系统学习-内存管理</a></li><li><a href="http://www.cnblogs.com/ranjiewen/p/7158267.html" target="_blank" rel="noopener">操作系统学习-虚拟内存</a></li></ul><h2 id="通信"><a href="#通信" class="headerlink" title="通信"></a>通信</h2><p>线程之间共享内存，但拥有各自不同的运行栈；进程之间则相互隔离。线程之间并发需要解决的是线程同步问题，进程之间则是通信问题。</p><p>线程之间同步由四种基本操作提供：</p><ul><li>原子操作</li><li>互斥量</li><li>信号量</li><li>条件变量</li></ul><p>在以上四种基本操作的基础上，形成了高级通信工具。如：阻塞队列，共享内存等。</p><p>一般情况下，原子变量用于构造乐观锁，比如 <code>spinlock</code> 。其他情况下使用条件变量和互斥量结合起来足够完成任务，同时还不容易出错。如果使用信号量，需要在自己的程序里也维护计数值，而信号量本身也需要维护计数值，需要用户自己进行维护。</p><p>与信号量相比，互斥量增减了所有权的概念；锁住的互斥量只能由上锁的线程解开。信号量则没有这些限制。条件变量与信号量相比，没有了数量限制，资源数量隐含在程序的逻辑中。</p><p>信号量与另外两者的区别主要在于“同步”一词，同步可以看作两部分：一部分是等待数据的“事件”或者“通知”；另一部分是保护数据的“临界区”。信号量直接满足这两个功能，互斥锁与信号量各满足一部分。在 <code>do one thing and do it best</code> 的指导下，更建议使用后两者。linux 内核曾将信号量作为同步原语，后来将之换为了互斥锁，需要“通知”的场景则换成了条件变量，不仅代码变简单了，速度也上去了。</p><p>进程之间通信常用的方式有：</p><ul><li>管道</li><li>共享内存</li><li>信号</li><li>消息队列</li><li>socket</li><li>RPC(Remote Process Call)</li></ul><p>其中管道、信号、共享内存和消息队列只能运行在一台机器上，而 socket 和 RPC 则提供了远程支持。当然，也有在 socket 或 RPC 基础上实现消息队列的。一般需要实现进程间通信，可以直接考虑 socket 或 RPC，毕竟以后的业务场景有可能扩展到多机。</p><p><em>References</em></p><ul><li><a href="http://www.cnblogs.com/edisonchou/p/5022508.html" target="_blank" rel="noopener">操作系统核心原理-3.进程原理（下）：进程通信</a></li></ul><h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h2><p>在两个或者多个并发进程中，如果每个进程持有某种资源而又等待其它进程释放它或它们现在保持着的资源，在未改变这种状态之前都不能向前推进，称这一组进程产生了死锁。通俗的讲就是两个或多个进程无限期的阻塞、相互等待的一种状态。</p><p>死锁产生的四个条件（有一个条件不成立，则不会产生死锁）</p><ol><li>互斥条件：一个资源一次只能被一个进程使用</li><li>请求与保持条件：一个进程因请求资源而阻塞时，对已获得资源保持不放</li><li>不剥夺条件：进程获得的资源，在未完全使用完之前，不能强行剥夺</li><li>循环等待条件：若干进程之间形成一种头尾相接的环形等待资源关系</li></ol><p>只要上述一个条件不成立，就不会产生死锁，所以解决死锁的基本方法有：：预防死锁、避免死锁、检测死锁、解除死锁。其常用策略为：鸵鸟策略、预防策略、避免策略、检测与解除死锁。</p><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><p><em>References</em></p><ul><li><a href="http://man.linuxde.net/" target="_blank" rel="noopener">Linux man</a></li><li><a href="http://linux.vbird.org/linux_basic/0340bashshell-scripts.php" target="_blank" rel="noopener">第十二章、學習 Shell Scripts</a></li></ul><h1 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h1><p><a href="http://www.jianshu.com/p/8013477d344a" target="_blank" rel="noopener">计算机网网络总结</a></p><h2 id="从-URL-到页面的过程"><a href="#从-URL-到页面的过程" class="headerlink" title="从 URL 到页面的过程"></a>从 URL 到页面的过程</h2><p>// TODO:</p><h2 id="分层与协议"><a href="#分层与协议" class="headerlink" title="分层与协议"></a>分层与协议</h2><h3 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h3><p>TCP 是面向连接的、可靠的流式通信传输协议；UDP 是无连接的、不可靠的通信协议。</p><p><a href="http://blog.163.com/li_xiang1102/blog/static/607140762011111103213616/" target="_blank" rel="noopener">Nagle 算法</a><br><a href="http://www.cnblogs.com/zhaoyl/archive/2012/09/20/2695799.html" target="_blank" rel="noopener">糊涂窗口综合症和 Nagle 算法</a><br><a href="https://my.oschina.net/xinxingegeya/blog/485643" target="_blank" rel="noopener">Nagle &amp; Delayed ACK</a><br><a href="http://blog.csdn.net/wdscq1234/article/details/52430382" target="_blank" rel="noopener">Delayed ACK</a><br><a href="http://www.hashcoding.net/2017/05/26/Linux-TCP-%E7%BC%96%E7%A8%8B/">Linux TCP 编程</a></p><p>拥塞控制<br>流量控制<br>滑动窗口</p><h3 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h3><p><a href="http://blog.codingnow.com/2016/03/reliable_udp.html" target="_blank" rel="noopener">可靠 UDP 传输</a></p><h3 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h3><p>HTTP（超文本传输协议，HyperText Transfer Protocol)是互联网上应用最为广泛的一种网络协议。所有的 WWW 文件都必须遵守这个标准。设计HTTP 最初的目的是为了提供一种发布和接收 HTML 页面的方法。是用于从 WWW 服务器传输超文本到本地浏览器的传输协议。默认使用 80 端口，HTTP 客户端发起一个请求，建立一个到服务器指定端口（默认是 80 端口）的 TCP 连接。</p><p>HTTP 连接使用的是“请求—响应”的方式，不仅在请求时需要先建立连接，而且需要客户端向服务器发出请求后，服务器端才能回复数据。HTTP/1.0 是第一个在通讯中指定版本号的 HTTP 协议版本，至今仍被广泛采用，特别是在代理服务器中。HTTP/1.1 是当前版本，持久连接被默认采用，并能很好地配合代理服务器工作，还支持以管道方式同时发送多个请求，以便降低线路负载，提高传输速度。 HTTP／2.0 在 HTTP 1.x 的基础上，大幅度的提高了 web 性能，减少了网络延迟。HTTP1.0 和 1.1 在之后很长的一段时间内会一直并存，这是由于网络基础设施更新缓慢所决定的。</p><p>关于更多 HTTP 协议的基础信息，可以看<a href="http://www.jianshu.com/p/80e25cb1d81a" target="_blank" rel="noopener">HTTP基础</a>、<a href="http://www.jianshu.com/p/178da1e2903c" target="_blank" rel="noopener">HTTP 请求方法和幂等性探究</a>、<a href="http://www.cnblogs.com/weidagang2046/archive/2011/06/04/2063696.html" target="_blank" rel="noopener">理解 HTTP 幂等性</a>。</p><p>HTTP 以 TCP 作为传输协议，自然要面临链接管理的问题，<a href="http://www.jianshu.com/p/f424eb4175ac" target="_blank" rel="noopener">HTTP连接管理</a>、<a href="http://www.jianshu.com/p/1102f00002ff" target="_blank" rel="noopener">谈谈 HTTP 连接管理</a>。</p><p>另外，随着网络访问量的提升，性能瓶颈问题开始出现。HTTP 对于这部分问题的解决办法是：对固定的资源进行缓存。HTTP 缓存通常分为：强制缓存、对比缓存。关于 HTTP 缓存的具体内容参考：<a href="http://www.cnblogs.com/chenqf/p/6386163.html" target="_blank" rel="noopener">HTTP缓存机制</a>。</p><p>最后，关于 HTTP 协议中常见的两种攻击方式：<a href="https://segmentfault.com/a/1190000007059639" target="_blank" rel="noopener">用大白话谈谈XSS与CSRF</a>。</p><p><em>References</em></p><ul><li><a href="https://imququ.com/post/http2-resource.html" target="_blank" rel="noopener">HTTP 2.0 资料汇总</a></li></ul><h2 id="SSL-TLS"><a href="#SSL-TLS" class="headerlink" title="SSL/TLS"></a>SSL/TLS</h2><p><a href="https://segmentfault.com/a/1190000002554673" target="_blank" rel="noopener">SSL/TLS 原理详解</a>。</p><h2 id="IO-模型"><a href="#IO-模型" class="headerlink" title="IO 模型"></a>IO 模型</h2><p>// TODO:</p><h2 id="分布式"><a href="#分布式" class="headerlink" title="分布式"></a>分布式</h2><h3 id="CAP-理论和-BASE-理论"><a href="#CAP-理论和-BASE-理论" class="headerlink" title="CAP 理论和 BASE 理论"></a>CAP 理论和 BASE 理论</h3><p><em>References</em></p><ul><li><a href="http://blog.csdn.net/chen77716/article/details/30635543" target="_blank" rel="noopener">CAP 理论</a></li><li><a href="http://blog.csdn.net/dc_726/article/details/42784237" target="_blank" rel="noopener">CAP 理论和最终一致性</a></li><li><a href="https://zhuanlan.zhihu.com/p/25933039?utm_source=tuicool&amp;utm_medium=referral" target="_blank" rel="noopener">最终一致性实现方式</a></li><li><a href="http://www.cnblogs.com/duanxz/p/5229352.html" target="_blank" rel="noopener">CAP 理论和 BASE 理论</a></li></ul><h3 id="一致性-Hash"><a href="#一致性-Hash" class="headerlink" title="一致性 Hash"></a>一致性 Hash</h3><p><em>References</em></p><ul><li><a href="http://blog.csdn.net/cywosp/article/details/23397179" target="_blank" rel="noopener">每天进步一点点——五分钟理解一致性哈希算法(consistent hashing)</a></li><li><a href="http://www.cnblogs.com/lpfuture/p/5796398.html" target="_blank" rel="noopener">一致性Hash算法原理</a></li><li><a href="http://www.blogjava.net/hello-yun/archive/2012/10/10/389289.html" target="_blank" rel="noopener">一致性Hash算法Java实现</a></li></ul><h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><p><a href="http://www.hashcoding.net/2017/08/26/CSKS-%E4%B8%89-%E3%80%81%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/">CSKS-(三)、设计模式</a></p><h1 id="语言"><a href="#语言" class="headerlink" title="语言"></a>语言</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><p><em>References</em></p><ul><li><a href="http://blog.csdn.net/itmr_liu/article/details/51869905" target="_blank" rel="noopener">C++11 标准基本数据类型</a></li></ul><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><p><em>References</em></p><ul><li><a href="http://www.cnblogs.com/BeyondAnyTime/archive/2012/08/23/2652696.html" target="_blank" rel="noopener">C++11 四种类型转换</a></li><li><a href="https://zhuanlan.zhihu.com/p/27966225" target="_blank" rel="noopener">C++笔记 · C++类型转换</a></li></ul><h3 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h3><p><em>References</em></p><ul><li><a href="www.hashcoding.net/2017/03/02/Effective-C-Accustoming-Yourself-to-C/">Accustoming Yourself to C++</a></li><li><a href="www.hashcoding.net/2017/03/02/Effective-c-Constructors-Destructors-and-Assignment-Operators/">Constructors,Destructors,and Assignment Operators</a></li><li><a href="www.hashcoding.net/2017/03/05/Effective-C-Resource-management/">Resource management</a></li><li><a href="www.hashcoding.net/2017/03/05/Effective-C-Designs-Implements/">Designs &amp; Implements</a></li><li><a href="www.hashcoding.net/2017/03/05/Effective-C-Exception-safe-code/">Exception-safe code</a></li><li><a href="www.hashcoding.net/2017/01/15/C-%E5%AF%B9%E8%B1%A1%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8/">C++对象线程安全</a></li></ul><h3 id="C-疑难解答"><a href="#C-疑难解答" class="headerlink" title="C++ 疑难解答"></a>C++ 疑难解答</h3><p><em>References</em></p><ul><li><a href="http://blog.csdn.net/origin_lee/article/details/40541053" target="_blank" rel="noopener">取余和取模</a></li><li><a href="http://blog.csdn.net/solstice/article/details/5139302" target="_blank" rel="noopener">带符号整数的除法和余数</a></li><li><a href="http://0xffffff.org/2016/02/11/38-c++-concurrency/" target="_blank" rel="noopener">C++并发编程那些事</a></li><li><a href="http://blog.csdn.net/booirror/article/details/45057689" target="_blank" rel="noopener">深入理解右值引用-move语义和完美转发</a></li><li><a href="http://www.cnblogs.com/jianxinzhou/p/3994248.html" target="_blank" rel="noopener">C++完全总结</a></li></ul><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><h3 id="类加载原理"><a href="#类加载原理" class="headerlink" title="类加载原理"></a>类加载原理</h3><p>Java和其他语言不同的是，Java是运行于Java虚拟机(JVM)。这就意味着编译后的代码是以一种和平台无关的格式保存的，而不是某种特定的机器上运行的格式。这种格式和传统的可执行代码格式有很多重要的区别。具体来说，不同于C或者Ｃ++程序，Java程序不是一个独立的可执行文件，而是由很多分开的类文件组成，每个类文件对应一个Java类。另外，<strong>这些类文件并不是马上加载到内存，而是当程序需要的时候才加载</strong>。类加载器就是Java虚拟机中用来把类加载到内存的工具。</p><p>Class文件由类装载器装载后，在JVM中将形成一份描述Class结构的元信息对象，通过该元信息对象可以获知Class的结构信息：如构造函数，属性和方法等，Java允许用户借由这个Class相关的元信息对象间接调用Class对象的功能。虚拟机把描述类的数据从class文件加载到内存，并对数据进行校验，转换解析和初始化，最终形成可以被虚拟机直接使用的Java类型，这就是虚拟机的类加载机制。</p><h4 id="工作机制"><a href="#工作机制" class="headerlink" title="工作机制"></a>工作机制</h4><p>类装载器就是寻找类的字节码文件，并构造出类在JVM内部表示的对象组件。在Java中，类装载器把一个类装入JVM中，要经过以下步骤：</p><ol><li>装载：查找和导入Class文件；</li><li>链接：把类的二进制数据合并到JRE中；<ul><li>校验：检查载入Class文件数据的正确性；</li><li>准备：给类的静态变量分配存储空间；</li><li>解析：将符号引用转成直接引用；</li></ul></li><li>初始化：对类的静态变量，静态代码块执行初始化操作</li></ol><h4 id="类初始化时机"><a href="#类初始化时机" class="headerlink" title="类初始化时机"></a>类初始化时机</h4><ol><li>遇到 <code>new</code>、<code>getstatic</code>、<code>putstatic</code> 或 <code>invokestatic</code> 这4条字节码指令时，如果类没有进行过初始化，则需要先触发其初始化。生成这4条指令的最常见的Java代码场景是：使用 <code>new</code> 关键字实例化对象的时候，读取或设置一个类的静态字段（被 <code>final</code> 修饰、已在编译期把结果放入常量池的静态字段除外）的时候，以及调用一个类的静态方法的时候。</li><li>使用 <code>java.lang.reflect</code> 包的方法对类进行反射调用的时候，如果类没有进行过初始化，则需要先触发其初始化。</li><li>当初始化一个类的时候，如果发现其父类还没有进行过初始化，则需要先触发其父类的初始化。</li><li>当虚拟机启动时，用户需要指定一个要执行的主类（包含 <code>main()</code> 方法的那个类），虚拟机会先初始化这个主类。</li></ol><p>只有上述四种情况会触发初始化，也称为对一个类进行主动引用，除此以外，所有其他方式都不会触发初始化，称为被动引用。</p><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>Java 中数据类型分为两种：基本数据类型，引用数据类型。</p><h4 id="基础数据类型"><a href="#基础数据类型" class="headerlink" title="基础数据类型"></a>基础数据类型</h4><p>基础数据类型由数值型、字符型和布尔型组成，其中数值型有：</p><ul><li>byte </li><li>short</li><li>int </li><li>long </li><li>float </li><li>double </li></ul><p>字符型：<code>char</code> 可以表示任意有 <code>unicode</code> 编码的值，2字节长度。布尔型 <code>boolean</code> 表示逻辑运算类型。</p><p><code>char</code> 本质上是 UTF-16 定常编码，换而言之，<code>char</code> 中只能存放 <code>UTF-16</code> 编码下只占2字节长度的字符。</p><h5 id="自动类型转换"><a href="#自动类型转换" class="headerlink" title="自动类型转换"></a>自动类型转换</h5><p><strong>自动类型转换，也称隐式类型转换，是指不需要书写代码，由系统自动完成的类型转换</strong>。由于实际开发中这样的类型转换很多，所以 Java 语言在设计时，没有为该操作设计语法，而是由 JVM 自动完成。</p><p>转换规则：从存储范围小的类型到存储范围大的类型。<br>具体规则为：byte→short(char)→int→long→float→double</p><p>也就是说 byte 类型的变量可以自动转换为 short 类型，示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">byte</span>  b  =  <span class="number">10</span>;</span><br><span class="line"><span class="keyword">short</span>  sh  =  b;</span><br></pre></td></tr></table></figure><p>这里在赋值时，JVM 首先将 <code>b</code> 的值转换为 <code>short</code> 类型，然后再赋值给 <code>sh</code>。<br>在类型转换时可以跳跃。示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">byte</span>  b1  =  <span class="number">100</span>;</span><br><span class="line"><span class="keyword">int</span>  n  =  b1;</span><br></pre></td></tr></table></figure><p>类型转换中可能存在着坑：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">short</span> a = <span class="number">0</span>;</span><br><span class="line">a = a + <span class="number">1</span>; <span class="comment">// error</span></span><br><span class="line">a += <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>执行 <code>+1</code> 时，<code>a</code> 被转换为整形，然后做加法，赋值给 <code>a</code> 时类型不一致，需要强制类型转换；而 <code>+=</code> 则由编译器内部实现 <code>+1</code> 逻辑。</p><blockquote><p>注意问题:在整数之间进行类型转换时，数值不发生改变，而将整数类型，特别是比较大的整数类型转换成小数类型时，由于存储方式不同，有可能存在数据精度的损失。</p></blockquote><h5 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h5><p><strong>强制类型转换，也称显式类型转换，是指必须书写代码才能完成的类型转换</strong>。该类类型转换很可能存在精度的损失，所以必须书写相应的代码，并且能够忍受该种损失时才进行该类型的转换。</p><p>转换规则:从存储范围大的类型到存储范围小的类型。<br>具体规则为：double→float→long→int→short(char)→byte<br>语法格式为：(转换到的类型)需要转换的值</p><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span>  d  =  <span class="number">3.10</span>;</span><br><span class="line"><span class="keyword">int</span>  n  =  (<span class="keyword">int</span>)d;</span><br></pre></td></tr></table></figure><p>这里将 <code>double</code> 类型的变量 <code>d</code> 强制转换成 <code>int</code> 类型，然后赋值给变量 <code>n</code>。需要说明的是小数强制转换为整数，采用的是<strong>去 1 法</strong>，也就是无条件的舍弃小数点的所有数字，则以上转换出的结果是 <code>3</code>。整数强制转换为整数时取数字的低位，例如 <code>int</code> 类型的变量转换为 <code>byte</code> 类型时，则只去 <code>int</code> 类型的低 <code>8</code> 位(也就是最后一个字节)的值。<br>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>  n  =  <span class="number">123</span>;</span><br><span class="line"><span class="keyword">byte</span>  b  =  (<span class="keyword">byte</span>)n;</span><br><span class="line"><span class="keyword">int</span>  m  =  <span class="number">1234</span>;</span><br><span class="line"><span class="keyword">byte</span>  b1  =  (<span class="keyword">byte</span>)m;</span><br></pre></td></tr></table></figure><p>则 <code>b</code> 的值还是 <code>123</code>，而 <code>b1</code> 的值为 <code>-46</code>。<code>b1</code> 的计算方法如下：<code>m</code> 的值转换为二进制是 <code>10011010010</code>，取该数字低 <code>8</code> 位的值作为 <code>b1</code> 的值，则 <code>b1</code> 的二进制值是 <code>11010010</code>，按照机器数的规定，最高位是符号位，<code>1</code> 代表负数，在计算机中负数存储的是补码，则该负数的原码是 <code>10101110</code>，该值就是十进制的 <code>-46</code>。</p><blockquote><p>注意问题:强制类型转换通常都会存储精度的损失，所以使用时需要谨慎。</p></blockquote><h4 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h4><p>引用数据类型有三大类：</p><ul><li>接口</li><li>对象</li><li>数组</li></ul><p>引用数据类型也存在着自动转换和强制类型转换，自动转换负责将子类对象转换成父类对象，强制转换则将父类对象转换成子类对象。</p><h3 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h3><p><code>java.lang</code> 包在使用的时候无需显示导入，编译时由编译器自动导入。<code>Object</code> 类是类层次结构的根，Java 中所有的类从根本上都继承自这个类。<code>Object</code> 类是 Java 中唯一没有父类的类。其他所有的类，包括标准容器类，比如数组，都继承了 <code>Object</code> 类中的方法。</p><p><code>Object</code> 类中有如下方法：</p><h4 id="clone"><a href="#clone" class="headerlink" title="clone()"></a>clone()</h4><p><code>clone</code> 方法<strong>创建并返回对象的一份拷贝</strong>，其原型如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException</span></span><br></pre></td></tr></table></figure><p>这个方法有两点比较特殊的：</p><ul><li>使用这个方法的类必须实现 <code>java.lang.Cloneable</code> 接口，否则会抛出 <code>CloneNotSupportedException</code> 异常。<code>Cloneable</code> 接口中不包含任何方法，所以实现它时只要在类声明中加上 <code>implements</code> 语句即可；</li><li>这个方法是 <code>protected</code> 修饰的，覆写 <code>clone()</code> 方法的时候需要写成 <code>public</code>，才能让类外部的代码调用；</li></ul><h4 id="equals-Object-obj"><a href="#equals-Object-obj" class="headerlink" title="equals(Object obj)"></a>equals(Object obj)</h4><p><code>equals</code> 方法等价于 <code>==</code> 运算符，用于判断两个对象是否指向同一个对象。</p><blockquote><p>在 Java 中，<code>==</code> 运算符默认使用<strong>引用语义</strong>，即比较两个对象是否引用同一对象；C/C++ 相反，默认使用<strong>值语义</strong>，比较内部数据是否相同。</p></blockquote><p><code>Object</code> 类中的 <code>equals()</code> 方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">this</span> == obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>即 <code>Object</code> 类中的 <code>equals()</code> 方法等价于 <code>==</code>，只有当继承 <code>Object</code> 的类覆写（<code>override</code>）了 <code>equals()</code> 方法之后，继承类实现了用 <code>equals()</code> 方法比较两个对象是否相等，才可以说 <code>equals()</code> 方法与 <code>==</code> 不同。比如 <code>String</code> 类覆写了 <code>equals()</code> 方法，实现了<strong>值语义</strong>。</p><p><code>equals()</code> 方法需要具有如下特点：</p><ul><li>自反性：任何非空引用 <code>x</code>，<code>x.equals(x)</code>返回为 <code>true</code>;</li><li>对称性：任何非空引用 <code>x</code> 和 <code>y</code>，<code>x.equals(y)</code> 返回 <code>true</code> 当且仅当 <code>y.equals(x)</code> 返回 <code>true</code>;</li><li>传递性：任何非空引用 <code>x</code> 和 <code>y</code>，如果 <code>x.equals(y)</code> 返回 <code>true</code>，并且 <code>y.equals(z)</code> 返回 <code>true</code>，那么 <code>x.equals(z)</code> 返回 <code>true</code>。</li><li>一致性：两个非空引用 <code>x</code> 和 <code>y</code>，<code>x.equals(y)</code> 的多次调用应该保持一致的结果，（前提条件是在多次比较之间没有修改 <code>x</code> 和 <code>y</code> 用于比较的相关信息）。</li><li>约定：对于任何非空引用 <code>x</code>，<code>x.equals(null)</code> 应该返回为 <code>false</code>。</li><li>并且覆写 <code>equals()</code> 方法时，应该同时覆写 <code>hashCode()</code> 方法，反之亦然。</li></ul><p>前面三个特点属于<strong>等价关系</strong>需要满足的条件，所以<strong>对于任何非空引用，<code>equals()</code> 方法定义了该引用上的等价关系</strong>。</p><h4 id="hashCode"><a href="#hashCode" class="headerlink" title="hashCode()"></a>hashCode()</h4><p><code>hashCode()</code> 返回当前对象的 <code>hash code</code>，原型如下： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">inthashCode()</span><br></pre></td></tr></table></figure><p>这个方法返回一个整型值（hash code value），如果两个对象被 <code>equals()</code> 方法判断为相等，那么它们就应该拥有同样的hash code。</p><p><code>Object</code> 类的 <code>hashCode()</code> 方法为不同的对象返回不同的值，<code>Object</code> 类的 <code>hashCode</code> 值表示的是对象的地址。</p><p><code>hashCode</code> 方法需要满足一定条件：</p><ol><li>一致性：<code>hashCode()</code> 方法多次执行结果应该相同（未修改时）；</li><li>当你覆写了 <code>equals()</code> 方法之后，必须也覆写 <code>hashCode()</code> 方法，反之亦然；</li><li>如果 <code>equals()</code> 判断两个对象不相等，那么它们的 <code>hashCode()</code> 方法就应该返回不同的值（未强制要求）；</li></ol><p>两个对象用 <code>equals()</code> 方法比较返回 <code>false</code>，它们的 <code>hashCode</code> 可以相同也可以不同。</p><h4 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString()"></a>toString()</h4><p><code>toString()</code> 方法返回对象的 <code>String</code> 表示。当打印引用，如调用 <code>System.out.println()</code> 时，会自动调用对象的 <code>toString()</code> 方法，打印出引用所指的对象的 <code>toString()</code> 方法的返回值，因为每个类都直接或间接地继承自 <code>Object</code>，因此每个类都有 <code>toString()</code> 方法。</p><p><code>Object</code> 类中的 <code>toString()</code> 方法定义如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> getClass().getName() + <span class="string">"@"</span> + Integer.toHexString(hashCode());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="finalize"><a href="#finalize" class="headerlink" title="finalize()"></a>finalize()</h4><p><em>References</em></p><ul><li><a href="http://www.cnblogs.com/iamzhoug37/p/4279151.html" target="_blank" rel="noopener">Java finalize() 方法详解</a></li></ul><h4 id="getClass"><a href="#getClass" class="headerlink" title="getClass()"></a>getClass()</h4><p><em>References</em></p><ul><li><a href="http://www.cnblogs.com/lianghui66/archive/2012/12/03/2799134.html" target="_blank" rel="noopener">Java getClass() 方法详解</a></li></ul><h4 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h4><p><em>References</em></p><ul><li><a href="http://blog.csdn.net/zimo2013/article/details/40181349" target="_blank" rel="noopener">Java Object wait()、notify()、notifyAll()</a></li></ul><h3 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h3><p><em>References</em></p><ul><li><a href="http://www.jianshu.com/p/c8ac39183522" target="_blank" rel="noopener">Java 泛型基础</a></li><li><a href="https://www.zhihu.com/question/20400700" target="_blank" rel="noopener">Java 泛型 &lt;? super T&gt; 中 super 怎么 理解？与 extends 有何不同？</a></li><li><a href="http://www.jianshu.com/p/4caf2567f91d" target="_blank" rel="noopener">Java 泛型进阶</a></li><li><a href="http://www.jianshu.com/p/b99a40c1f760" target="_blank" rel="noopener">浅谈 Java 泛型</a></li></ul><h3 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h3><p>数组比较特殊，其有一个 <code>length</code> 成员，表示数组长度。</p><p><em>References</em></p><ul><li><a href="http://www.iteye.com/news/28296" target="_blank" rel="noopener">Java 数组操作</a></li><li><a href="http://www.jianshu.com/p/355d6416c26c" target="_blank" rel="noopener">Java Arrays 详解</a></li></ul><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><p><em>References</em></p><ul><li><a href="http://www.cnblogs.com/springcsc/archive/2009/12/03/1616326.html" target="_blank" rel="noopener">String 类常用方法详解</a></li><li><a href="http://www.cnblogs.com/lwbqqyumidi/p/4060845.html" target="_blank" rel="noopener">String 类详解</a></li><li><a href="http://blog.csdn.net/kingzone_2008/article/details/9220691" target="_blank" rel="noopener">String StringBuffer StringBuilder 详解</a></li></ul><h3 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h3><p><code>Collection</code>是Java中的集合类的一个抽象接口，在其上有更具体的接口实现：<code>Set</code>和<code>List</code>。</p><p><em>References</em></p><ul><li><a href="http://www.jianshu.com/p/f23ec9da6ecf" target="_blank" rel="noopener">Java Collection 详解</a></li></ul><h4 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h4><p><code>Set</code>中方法与<code>Collection</code>一致。</p><ol><li><p><code>HashSet</code>：内部数据结构是哈希表，是不同步的。<code>Set</code>集合中元素都必须是唯一的，<code>HashSet</code>作为其子类也需保证元素的唯一性。<br> 判断元素唯一性的方式：<br> 通过存储对象（元素）的<code>hashCode</code>和<code>equals</code>方法来完成对象唯一性的。<br> 如果对象的<code>hashCode</code>值不同，那么不用调用<code>equals</code>方法就会将对象直接存储到集合中；<br> 如果对象的<code>hashCode</code>值相同，那么需调用<code>equals</code>方法判断返回值是否为<code>true</code>，<br> 若为<code>false</code>, 则视为不同元素，就会直接存储；<br> 若为<code>true</code>， 则视为相同元素，不会存储。</p><p> PS：如果要使用<code>HashSet</code>集合存储元素，该元素的类必须覆盖<code>hashCode</code>方法和<code>equals</code>方法。一般情况下，如果定义的类会产生很多对象，通常都需要覆盖<code>equals</code>，<code>hashCode</code>方法。建立对象判断是否相同的依据。</p></li><li><p><code>TreeSet</code>：保证元素唯一性的同时可以对内部元素进行排序，是不同步的。<br> 判断元素唯一性的方式：<br> 根据比较方法的返回结果是否为0，如果为0视为相同元素，不存；如果非0视为不同元素，则存。<br> <code>TreeSet</code>对元素的排序有两种方式：<br> 方式一：使元素（对象）对应的类实现<code>Comparable</code>接口，覆盖<code>compareTo</code>方法。这样元素自身具有比较功能。<br> 方式二：使<code>TreeSet</code>集合自身具有比较功能，定义一个类实现<code>Comparable</code>接口覆盖其<code>compareTo</code>方法。（相当于自定义了一个比较器）将该类对象作为参数传递给<code>TreeSet</code>集合的构造函数。（<code>TreeSet(Comparator&lt;? super E&gt; c)</code>）</p></li></ol><h4 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h4><p><code>Map</code>保存具有映射关系的数据，因此<code>Map</code>集合里保存着两组值，一组值用来保存<code>Map</code>里的<code>key</code>,一组用来保存<code>Map</code>里的<code>value</code>,<code>key</code>和<code>value</code>可以是任何引用类型的数据。</p><p><code>Map</code>里的<code>key</code>不允许重复，<code>value</code>可以重复。<code>key</code>和<code>value</code>之间存在单向的一对一的关系，通过指定的<code>key</code>，总能找到唯一的、确定的<code>value</code>。</p><h5 id="HashMap与HashTable"><a href="#HashMap与HashTable" class="headerlink" title="HashMap与HashTable"></a>HashMap与HashTable</h5><p><code>HashMap</code>与<code>HashTable</code>都是<code>Map</code>的典型实现类，他们之间的关系类似于<code>ArrayList</code>和<code>Vector</code>：<code>HashTable</code>是一个古老的<code>Map</code>实现类，在JDK1.0时就出现了。<br>主要区别：</p><ol><li><p><code>HashTable</code>是一个线程安全的<code>Map</code>实现，但是<code>HashMap</code>是线程不安全的实现，<code>HashMap</code>的性能要比<code>HashTable</code>高一些，尽量避免使用<code>HashTable</code>,多个线程访问一个<code>Map</code>对象又要保证线程安全时，可以使用<code>Collections</code>中的方法把<code>HashMap</code>变成线程安全的。</p></li><li><p><code>HashTable</code>不允许使用<code>null</code>作为<code>key</code>和<code>value</code>,如果试图把<code>null</code>加入<code>HashTable</code>中，将会引发空指针异常。</p></li></ol><h5 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h5><p><code>TreeMap</code>是<code>Map</code>的子接口<code>SortedMap</code>的的实现类，与<code>TreeSet</code>类似的是<code>TreeMap</code>也是基于红黑树对<code>TreeMap</code>中所有的<code>key</code>进行排序，从而保证<code>key-value</code>处于有序状态，<code>TreeMap</code>也有两种排序方式：</p><ol><li><p>自然排序：<code>TreeMap</code>的所有<code>key</code>必须实现<code>Comparable</code>接口，而且所有<code>key</code>应该是同一类的对象，否则会抛出<code>ClassCastException</code>.</p></li><li><p>定制排序：创建<code>TreeMap</code>时，传入一个<code>Comparator</code>对象，该对象负责对<code>TreeMap</code>中所有的<code>key</code>进行排序。<br>由于<code>TreeMap</code>支持内部排序，所以通常要比<code>HashMap</code>和<code>HashTable</code>慢。</p></li></ol><h4 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h4><p><code>Queue</code>模拟了队列这种数据结构，队列通常是“先进先出”的数据结构，通常不允许随机访问队列中的元素。</p><p><code>Queue</code>常用的实现类：<code>LinkedList</code>和<code>PriorityQueue</code>。</p><h5 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h5><p><code>LinkedList</code>它不仅实现了<code>List</code>接口还实现了<code>Dueue</code>接口(双端队列，既具有队列的特征，也具有栈的特征)，<code>Dueue</code>接口是<code>Queue</code>的子接口。</p><h5 id="PriorityQueue"><a href="#PriorityQueue" class="headerlink" title="PriorityQueue"></a>PriorityQueue</h5><p><code>PriorityQueue</code>保存队列元素的的顺序并不是按照加入队列的顺序，而是按照队列元素大小进行重新排序。所以当调用<code>peek</code>和<code>poll</code>方法来取队列中的元素的时候，并不是先取出来队列中最小的元素。从这个意义上来看，<code>PriorityQueue</code>已经违反了队列的基本规则。<code>PriorityQueue</code>不允许插入<code>null</code>元素。</p><h3 id="Concurrent"><a href="#Concurrent" class="headerlink" title="Concurrent"></a>Concurrent</h3><p><em>References</em></p><ul><li><a href="http://blog.csdn.net/defonds/article/details/44021605/" target="_blank" rel="noopener">Java 并发工具包 <code>java.util.concurrent</code> 用户指南</a></li></ul><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><p><em>References</em></p><ul><li><a href="http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000" target="_blank" rel="noopener">Python3 教程</a></li></ul><h1 id="系统设计"><a href="#系统设计" class="headerlink" title="系统设计"></a>系统设计</h1><p><em>References</em></p><ul><li><a href="https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md" target="_blank" rel="noopener">系统设计入门</a></li></ul><h1 id="Others-1"><a href="#Others-1" class="headerlink" title="Others"></a>Others</h1><h2 id="Markdown"><a href="#Markdown" class="headerlink" title="Markdown"></a>Markdown</h2><p><em>References</em></p><ul><li><a href="http://blog.leanote.com/post/freewalk/Markdown-语法手册" title="Markdown-语法手册" target="_blank" rel="noopener">Markdown-语法手册</a></li><li><a href="http://einverne.github.io/markdown-style-guide/zh.html" target="_blank" rel="noopener">Markdown-书写风格指南</a></li></ul><h2 id="Latex"><a href="#Latex" class="headerlink" title="Latex"></a>Latex</h2><p><em>References</em></p><ul><li><a href="http://lixingcong.github.io/2016/04/04/LaTex-intro/" target="_blank" rel="noopener">Latex 数学公式</a></li></ul><h2 id="需要补充"><a href="#需要补充" class="headerlink" title="需要补充"></a>需要补充</h2><p>分布式架构：（了解原理就行，如果真的有实践经验更好）<br>CAP原理和BASE理论。<br>Nosql与KV存储（redis，hbase，mongodb，memcached等）<br>服务化理论（包括服务发现、治理等，zookeeper、etcd、springcloud微服务、）<br>负载均衡（原理、cdn、一致性hash）<br>RPC框架（包括整体的一些框架理论，通信的netty，序列化协议thrift，protobuff等）<br>消息队列（原理、kafka，activeMQ，rocketMQ）<br>分布式存储系统（GFS、HDFS、fastDFS）、存储模型（skipList、LSM等）<br>分布式事务、分布式锁等                        </p><p>大数据与数据分析：<br>hadoop生态圈(hive、hbase、hdfs、zookeeper、storm、kafka)<br>spark体系<br>语言：python、R、scala<br>搜索引擎与技术<br>机器学习算法：<br>模型和算法很多。<br>其他工具的理论和使用：<br>这个更多了，问的多的比如git、docker、maven/gradle、Jenkins等等</p><p><a href="https://zhuanlan.zhihu.com/p/23713529" target="_blank" rel="noopener">常见面试题整理–数据库篇</a><br><a href="https://zhuanlan.zhihu.com/p/23755202" target="_blank" rel="noopener">常见面试题整理–操作系统篇</a><br><a href="http://www.importnew.com/22083.html" target="_blank" rel="noopener">Java 面试题全集-上</a><br><a href="http://www.importnew.com/22087.html" target="_blank" rel="noopener">Java 面试题全集-下</a><br><a href="https://zhuanlan.zhihu.com/p/23526961" target="_blank" rel="noopener">常见面试题整理 Python 概念篇</a><br><a href="https://zhuanlan.zhihu.com/p/23582996" target="_blank" rel="noopener">常见面试题整理 Python 代码篇</a><br><a href="https://zhuanlan.zhihu.com/p/24001696" target="_blank" rel="noopener">常见面试题整理–计算机网络篇</a><br><a href="http://www.jianshu.com/p/7274615afea6" target="_blank" rel="noopener">计算机网络基础面试题</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数据结构与算法&quot;&gt;&lt;a href=&quot;#数据结构与算法&quot; class=&quot;headerlink&quot; title=&quot;数据结构与算法&quot;&gt;&lt;/a&gt;数据结构与算法&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://www.hashcoding.net/2017/08/26/CSKS
      
    
    </summary>
    
      <category term="总结" scheme="http://www.hashcoding.net/categories/%E6%80%BB%E7%BB%93/"/>
    
    
  </entry>
  
  <entry>
    <title>LeetCode - 85 Maximal Rectangle</title>
    <link href="http://www.hashcoding.net/2017/06/12/LeetCode-85-Maximal-Rectangle/"/>
    <id>http://www.hashcoding.net/2017/06/12/LeetCode-85-Maximal-Rectangle/</id>
    <published>2017-06-12T11:33:29.000Z</published>
    <updated>2017-06-12T11:53:23.582Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.com/problems/maximal-rectangle/#/description" target="_blank" rel="noopener">85. Maximal Rectangle</a></p><p>首先看题意，题目需要求出由0和1组成的2Dmatrix中，全由1组成的矩形最大面积为多少。比如下面的矩形：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1 0 1 0 0</span><br><span class="line">1 0 1 1 1</span><br><span class="line">1 1 1 1 1</span><br><span class="line">1 0 0 1 0</span><br></pre></td></tr></table></figure><p>最大面积为 6。</p><p>在做这提前，需要看看前一题：<a href="https://leetcode.com/problems/largest-rectangle-in-histogram/#/description" target="_blank" rel="noopener">84. Largest Rectangle in Histogram</a>。这道题目是求出柱状图中可以摆放下的最大矩形。</p><p>如何求解？仔细观察可以发现，像 <code>576</code> 这样的数据，可以看作中间高，两边低。而具体面积则由数据个数 * 选取区间中最矮的高度决定。所以完全可以把这几个变为：<code>555</code>、<code>7</code>和<code>66</code>这样的形式，然后再从中选出最大的。</p><p>所以这道题的简单解法是从头到尾扫一次，每次遇到递减时，将多出的部分计算后给扔掉，那么扔掉后的数据则仍然是递增的。比如<code>576</code>，当扫描到<code>6</code>时，计算得<code>7</code>，并将<code>7</code>改为<code>6</code>，得到<code>566</code>继续计算。这样，得到了中间去掉部分能组成的最大面积，和最后剩下的递增数组进行比较。对于单调递增的数据，也好算，减少宽度，增加高度就能算出来。所以代码部分如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int largestRectangleArea(vector&lt;int&gt;&amp; heights) &#123;</span><br><span class="line">        stack&lt;int&gt; stack;</span><br><span class="line">        int max_ = 0;</span><br><span class="line">        for (auto i : heights) &#123;</span><br><span class="line">            if (stack.empty())</span><br><span class="line">                stack.push(i);</span><br><span class="line">            else &#123;</span><br><span class="line">                int l = stack.top();</span><br><span class="line">                if (l &lt;= i) &#123;</span><br><span class="line">                    stack.push(i);</span><br><span class="line">                &#125;</span><br><span class="line">                else &#123;</span><br><span class="line">                    int count = 1;</span><br><span class="line">                    while (!stack.empty() &amp;&amp; stack.top() &gt; i) &#123;</span><br><span class="line">                        int t = stack.top();</span><br><span class="line">                        stack.pop();</span><br><span class="line">                        if (t * count &gt; max_) &#123;</span><br><span class="line">                            max_ = t * count;</span><br><span class="line">                        &#125;</span><br><span class="line">                        count++;</span><br><span class="line">                    &#125;</span><br><span class="line">                    for (int j = 0; j &lt; count; j++) &#123;</span><br><span class="line">                        stack.push(i);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if (!stack.empty()) &#123;</span><br><span class="line">            int count = stack.size();</span><br><span class="line">            for (int i = 1; i &lt;= count; ++i) &#123;</span><br><span class="line">                int t = stack.top();</span><br><span class="line">                stack.pop();</span><br><span class="line">                if (t * i &gt; max_)</span><br><span class="line">                    max_ = t * i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return max_;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>现在回到计算matrix中的矩形问题上来。用一行将矩形分割成两半，上面部分和下面部分。遮住下面部分，那么看到的就是一个<code>Histogram</code>，则可以使用上面一题的解法来做。将行往下挪，如果出现了(1/0/1)这样的列数据，不再是一个<code>Histogram</code>，那么可以认为0以上部分全为0，得到<code>Histogram</code>。所以题目答案为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int maximalRectangle(vector&lt;vector&lt;char&gt;&gt;&amp; matrix) &#123;</span><br><span class="line">        if (matrix.empty() || matrix[0].empty()) return 0;</span><br><span class="line">        int max = 0;</span><br><span class="line">        vector&lt;int&gt; heights(matrix[0].size(), 0);</span><br><span class="line">        for (int i = 0; i &lt; matrix.size(); ++i) &#123;</span><br><span class="line">            for (int j = 0; j &lt; matrix[0].size(); ++j) &#123;</span><br><span class="line">                heights[j] = (matrix[i][j] == &apos;0&apos;) ? 0 : heights[j] + 1;</span><br><span class="line">            &#125;</span><br><span class="line">            max = std::max(largestRectangleArea(heights), max);</span><br><span class="line">        &#125;</span><br><span class="line">        return max;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    int largestRectangleArea(vector&lt;int&gt;&amp; heights) &#123;</span><br><span class="line">        stack&lt;int&gt; stack;</span><br><span class="line">        int max_ = 0;</span><br><span class="line">        for (auto i : heights) &#123;</span><br><span class="line">            if (stack.empty())</span><br><span class="line">                stack.push(i);</span><br><span class="line">            else &#123;</span><br><span class="line">                int l = stack.top();</span><br><span class="line">                if (l &lt;= i) &#123;</span><br><span class="line">                    stack.push(i);</span><br><span class="line">                &#125;</span><br><span class="line">                else &#123;</span><br><span class="line">                    int count = 1;</span><br><span class="line">                    while (!stack.empty() &amp;&amp; stack.top() &gt; i) &#123;</span><br><span class="line">                        int t = stack.top();</span><br><span class="line">                        stack.pop();</span><br><span class="line">                        if (t * count &gt; max_) &#123;</span><br><span class="line">                            max_ = t * count;</span><br><span class="line">                        &#125;</span><br><span class="line">                        count++;</span><br><span class="line">                    &#125;</span><br><span class="line">                    for (int j = 0; j &lt; count; j++) &#123;</span><br><span class="line">                        stack.push(i);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if (!stack.empty()) &#123;</span><br><span class="line">            int count = stack.size();</span><br><span class="line">            for (int i = 1; i &lt;= count; ++i) &#123;</span><br><span class="line">                int t = stack.top();</span><br><span class="line">                stack.pop();</span><br><span class="line">                if (t * i &gt; max_)</span><br><span class="line">                    max_ = t * i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return max_;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/maximal-rectangle/#/description&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;85. Maximal Rectangle&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;首
      
    
    </summary>
    
      <category term="LeetCode" scheme="http://www.hashcoding.net/categories/LeetCode/"/>
    
    
      <category term="Algorithm" scheme="http://www.hashcoding.net/tags/Algorithm/"/>
    
      <category term="LeetCode" scheme="http://www.hashcoding.net/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>SO_REUSEADDR &amp; SO_REUSEPORT 异同</title>
    <link href="http://www.hashcoding.net/2017/06/04/SO-REUSEADDR-SO-REUSEPORT-%E5%BC%82%E5%90%8C/"/>
    <id>http://www.hashcoding.net/2017/06/04/SO-REUSEADDR-SO-REUSEPORT-异同/</id>
    <published>2017-06-04T03:26:20.000Z</published>
    <updated>2017-06-04T06:35:41.036Z</updated>
    
    <content type="html"><![CDATA[<p><strong>写在前面，本文转载自网络：<a href="http://blog.chinaunix.net/uid-28587158-id-4006500.html" target="_blank" rel="noopener">http://blog.chinaunix.net/uid-28587158-id-4006500.html</a> ，请保留出处。</strong></p><p>文章内容来源于stackoverflow上的回答，写的很详细<a href="http://stackoverflow.com/questions/14388706/socket-options-so-reuseaddr-and-so-reuseport-how-do-they-differ-do-they-mean-t" target="_blank" rel="noopener">http://stackoverflow.com/questions/14388706/socket-options-so-reuseaddr-and-so-reuseport-how-do-they-differ-do-they-mean-t</a></p><p>虽然不同的系统上socket的实现方式有一些差异，但都来源于对BSD socket的实现，因此在讨论其它系统之前了解BSD socket的实现是非常有益的。首先我们需要了解一些基本知识，一个TCP/UDP连接是被一个五元组确定的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&lt;protocol&gt;, &lt;src addr&gt;, &lt;src port&gt;, &lt;dest addr&gt;, &lt;dest port&gt;&#125;</span><br></pre></td></tr></table></figure><p>因此，任何两个连接都不可能拥有相同的五元组，否则系统将无法区别这两个连接。</p><p>当使用<code>socket()</code>函数创建套接字的时候，我们就指定了该套接字使用的protocol(协议)，<code>bind()</code>函数设置了源地址和源端口号，而目的地址和目的端口号则由<code>connect()</code>函数设定。尽管允许对UDP进行”连接”（在某些情况下这对应用程序的设计非常有帮助）但由于UDP是一个无连接协议，UDP套接字仍然可以不经连接就使用。”未连接”的UDP套接字在数据被第一次发送之前并不会绑定，只有在发送的时候被系统自动绑定，因此未绑定的UDP套接字也就无法收到（回复）数据。未绑定的TCP也一样，它将在连接的时候自动绑定。</p><p>如果你明确绑定一个socket，把它绑定到端口0是可行的，它意味着”any port”(“任意端口”)。<strong>由于一个套接字无法真正的被绑定到系统上的所有端口，那么在这种情况下系统将不得不选择一个具体的端口号（指的是”any port”）</strong>。源地址使用类似的通配符，也就是”any address” （IPv4中的0.0.0.0和IPv6中的::）。<strong>和端口不同的是，一个套接字可以被绑定到任意地址(any address)，这里指的是本地网络接口的所有地址</strong>。由于socket无法在连接的时候同时绑定到所有源IP地址，因此当接下来有一个连接过来的时候，系统将不得不挑选一个源IP地址。考虑到目的地址和路由表中的路由信息，系统将会选择一个合适的源地址，并将任意地址替换为一个选定的地址作为源地址。</p><p>默认情况下，任意两个socket都无法绑定到相同的源IP地址和源端口(即源地址和源端口号均相同)。只要源端口号不相同，那么源地址实际上没什么关系。将socketA绑定到地址A和端口X （A:X)，socketB绑定到地址B和端口Y (B:Y)，只要<code>X != Y</code>，那么这种绑定都是可行的。然而当<code>X == Y</code>的时候只要<code>A != B</code>，这种绑定方式也仍然可行，比如：一个FTP server的socketA绑定为192.168.0.1:21而属于另一个FTP server的socketB绑定为 10.0.0.1:21，这两个绑定都将成功。记住：<strong>一个socket可能绑定到本地”any address”。例如一个socket绑定为 0.0.0.0:21，那么它同时绑定了所有的本地地址，在这种情况下，不论其它的socket选择什么特定的IP地址，它们都无法绑定到21端口，因为0.0.0.0和所有的本地地址都会冲突。</strong></p><p>上面说的对所有主流操作系统都是一样的。当涉及到地址重用的时候，OS之间的差异就显现出来了，正如之前所说的那样，其它的实现方案都来源于BSD的实现，因此我们首先从BSD说起。</p><h1 id="BSD"><a href="#BSD" class="headerlink" title="BSD"></a>BSD</h1><h2 id="SO-REUSEADDR"><a href="#SO-REUSEADDR" class="headerlink" title="SO_REUSEADDR"></a>SO_REUSEADDR</h2><p>如果在绑定一个socket之前设置了<code>SO_REUSEADDR</code>，除非两个socket绑定的源地址和端口号都一样，那么这两个绑定都是可行的。也许你会疑惑这跟之前的有什么不一样？<strong>关键是<code>SO_REUSEADDR</code>改变了在处理源地址冲突时对通配地址(“any ip address”)的处理方式</strong>。</p><p>当没有设置<code>SO_REUSEADDR</code>的时候，socketA先绑定到0.0.0.0:21，然后socketB绑定到192.168.0.1:21的时候将会失败(<code>EADDRINUSE</code>错误)，因为0.0.0.0意味着”任意本地IP地址”，也就是”所有本地IP地址“，因此包括192.168.0.1在内的所有IP地址都被认为是已经使用了。但是在设置<code>SO_REUSEADDR</code>之后socketB的绑定将会成功，因为0.0.0.0和192.168.0.1事实上不是同一个IP地址，一个是代表所有地址的通配地址，另一个是一个具体的地址。注意上面的表述对于socketA和socketB的绑定顺序是无关的，没有设置<code>SO_REUSEADDR</code>，它们将失败，设置了<code>SO_REUSEADDR</code>，它将成功。</p><p>下面给出了一个表格列出了所有的可能组合：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">SO_REUSEADDR       socketA        socketB       Result</span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">  ON/OFF       192.168.0.1:21   192.168.0.1:21    Error (EADDRINUSE)</span><br><span class="line">  ON/OFF       192.168.0.1:21      10.0.0.1:21    OK</span><br><span class="line">  ON/OFF          10.0.0.1:21   192.168.0.1:21    OK</span><br><span class="line">   OFF             0.0.0.0:21   192.168.1.0:21    Error (EADDRINUSE)</span><br><span class="line">   OFF         192.168.1.0:21       0.0.0.0:21    Error (EADDRINUSE)</span><br><span class="line">   ON              0.0.0.0:21   192.168.1.0:21    OK</span><br><span class="line">   ON          192.168.1.0:21       0.0.0.0:21    OK</span><br><span class="line">  ON/OFF           0.0.0.0:21       0.0.0.0:21    Error (EADDRINUSE)</span><br></pre></td></tr></table></figure><p>上面的表格假定socketA已经成功绑定，然后创建socketB绑定给定地址在是否设置<code>SO_REUSEADDR</code>的情况下的结果。Result代表socketB的绑定行为是否会成功。如果第一列是ON/OFF，那么SO_REUSEADDR的值将是无关紧要的。</p><p><strong>现在我们知道<code>SO_REUSEADDR</code>对通配地址有影响，但这不是它唯一影响到的方面。还有一个众所周知的影响同时也是大多数人在服务器程序上使用<code>SO_REUSEADDR</code>的首要原因</strong>。为了了解其它<code>SO_REUSEADDR</code>重要的使用方式，我们需要深入了解TCP协议的工作方式。</p><p>一个socket有一个发送缓冲区，当调用<code>send()</code>函数成功后，这并不意味着所有数据都真正被发送出去了，它只意味着数据都被送到了发送缓冲区中。对于UDP socket来说，如果不是立刻发送的话，数据通常也会很快的发送出去，但对于TCP socket，在数据加入到缓冲区和真正被发送出去之间的时延会相当长。这就导致当我们<code>close</code>一个TCP socket的时候，可能在发送缓冲区中保存着等待发送的数据(由于<code>send()</code>成功返回，因此你也许认为数据已经被发送了)。如果TCP的实现是立刻关闭socket，那么所有这些数据都会丢失而你的程序根本不可能知道。TCP被称为可靠协议，像这种丢失数据的方式就不那么可靠了。这也是为什么当我们<code>close</code>一个TCP socket的时候，如果它仍然有数据等待发送，那么该socket会进入TIME_WAIT状态。这种状态将持续到数据被全部发送或者发生超时。</p><p>在内核彻底关闭socket之前等待的总时间(不管是否有数据在发送缓冲区中等待发送)叫做Linger Time。Linger Time在大部分系统上都是一个全局性的配置项而且在默认情况下时间相当长(在大部分系统上是两分钟)。当然对于每个socket我们也可以使用socket选项<code>SO_LINGER</code>进行配置，可以将等待时间设置的更长一点儿或更短一点儿甚至禁用它。禁用Linger Time绝对是一个坏主意，虽然优雅的关闭socket是一个稍微复杂的过程并且涉及到来回的发送数据包(以及在数据包丢失后重发它们)，并且这个过程还受到Linger Time的限制。如果禁用Linger Time，socket可能丢失的不仅仅是待发送的数据，而且还会粗暴的关闭socket，在绝大部分情况下，都不应该这样使用。如何优雅的关闭TCP连接的细节不在这里进行讨论，如果你想了解更多，我建议你阅读：<a href="http://www.freesoft.org/CIE/Course/Section4/11.html" target="_blank" rel="noopener">http://www.freesoft.org/CIE/Course/Section4/11.html</a>。而且如果你用<code>SO_LINGER</code>禁用了Linger Time,而你的程序在显式的关闭socket之前就终止的话，BSD(其它的系统也有可能)仍然会等待，而不管已经禁用了它。这种情况的一个例子就是你的程序调用了<code>exit()</code>(在小的服务器程序很常见)或者进程被信号杀死(也有可能是进程访问了非法内存而终止)。这样的话，不管在什么情况下，你都无法对某一个socket禁用linger了。</p><p>问题在于，系统是怎样看待<code>TIME_WAIT</code>状态的？如果<code>SO_REUSEADDR</code>还没有设置，一个处在<code>TIME_WAIT</code>的socket仍然被认为绑定在源地址和端口，任何其它的试图在同样的地址和端口上绑定一个socket行为都会失败直到原来的socket真正的关闭了，这通常需要等待Linger Time的时长。所以不要指望在一个socket关闭后立刻将源地址和端口绑定到新的socket上，在绝大部分情况下，这种行为都会失败。然而，在设置了<code>SO_REUSEADDR</code>之后试图这样绑定(绑定相同的地址和端口)仅仅只会被忽略，而且你可以将相同的地址绑定到不同的socket上。<strong>注意当一个socket处于<code>TIME_WAIT</code>状态，而你试图将它绑定到相同的地址和端口，这会导致未预料的结果，因为处于<code>TIME_WAIT</code>状态的socket仍在”工作”，幸运的是这种情况极少发生</strong>。</p><p>对于<code>SO_REUSEADDR</code>你需要知道的最后一点是只有在你想绑定的socket开启了地址重用(address reuse)之后上面的才会生效，不过这并不需要检查之前已经绑定或处于<code>TIME_WAIT</code>的socket在它们绑定的时候是否也设置这个选项。也就是说，绑定的成功与否只会检查当前<code>bind</code>的socket是否开启了这个标志，不会查看其它的socket。</p><h2 id="SO-REUSEPORT"><a href="#SO-REUSEPORT" class="headerlink" title="SO_REUSEPORT"></a>SO_REUSEPORT</h2><p><code>SO_REUSEPORT</code>的含义与绝大部分人对<code>SO_REUSEADDR</code>的理解一样。基本上说来，<code>SO_REUSEPORT</code>允许你将多个socket绑定到相同的地址和端口只要它们在绑定之前都设置了<code>SO_REUSEPORT</code>。如果第一个绑定某个地址和端口的socket没有设置<code>SO_REUSEPORT</code>，那么其他的socket无论有没有设置<code>SO_REUSEPORT</code>都无法绑定到该地址和端口直到第一个socket释放了绑定。</p><p><code>SO_REUSEPORT</code>并不表示<code>SO_REUSEADDR</code>。这意味着如果一个socket在绑定时没有设置<code>SO_REUSEPORT</code>，那么同预期的一样，其它的socket对相同地址和端口的绑定会失败，但是如果绑定相同地址和端口的socket正处在<code>TIME_WAIT</code>状态，新的绑定也会失败。当有个socket绑定后处在<code>TIME_WAIT</code>状态(释放时)时，为了使得其它socket绑定相同地址和端口能够成功，需要设置<code>SO_REUSEADDR</code>或者在这两个socket上都设置<code>SO_REUSEPORT</code>。当然，在socket上同时设置<code>SO_REUSEPORT</code>和<code>SO_REUSEADDR</code>也是可行的。</p><p>关于<code>SO_REUSEPORT</code>除了它在被添加到系统的时间比<code>SO_REUSEPORT</code>晚就没有其它需要说的了，这也是为什么在有些系统的socket实现上你找不到这个选项，因为这些系统的代码都是在这个选项被添加到BSD之前fork了BSD，这样就不能将两个socket绑定到真正相同的“地址” (address+port)。</p><h2 id="Connect-Returning-EADDRINUSE"><a href="#Connect-Returning-EADDRINUSE" class="headerlink" title="Connect() Returning EADDRINUSE?"></a>Connect() Returning EADDRINUSE?</h2><p>绝大部分人都知道<code>bind()</code>可能失败返回<code>EADDRINUSE</code>，然而当你开始使用地址重用(address reuse)，你可能会碰到奇怪的情况:<code>connect()</code> 失败返回同样的错误<code>EADDRINUSE</code>。怎么会出现这种情况了? 一个远端地址(remote address)毕竟是<code>connect</code>添加到socket上的，怎么会已经被使用了? 将多个socket连接到相同的远端地址从来没有出现过这样的情况，这是为什么了？</p><p>正如我在开头说过的，一个连接是被一个五元组定义的。同样我也说了任意两个连接的五元组不能完全一样，因为这样的话内核就没办法区分这两个连接了。然而，在地址重用的情况下，你可以把同协议的两个socket绑定到完全相同的源地址和源端口，这意味着五元组中已经有三个元素相同了(协议，源地址，源端口)。如果你尝试将这些socket连接到同样的目的地址和目的端口，你就创建了两个完全相同的连接。这是不行的，至少对TCP不行(UDP实际上没有真实的连接)。如果数据到达这两个连接中的任何一个，那么系统将无法区分数据到底属于谁。因此当源地址和源端口相同时，目的地址或者目的端口必须不同，否则内核无法进行区分，这种情况下，<code>connect()</code>将在第二个socket尝试连接时返回<code>EADDRINUSE</code>。</p><h2 id="Multicast-Address-多播地址"><a href="#Multicast-Address-多播地址" class="headerlink" title="Multicast Address(多播地址)"></a>Multicast Address(多播地址)</h2><p>大部分人都会忽略多播地址的存在，但它们的确存在。单播地址(unicast address)用于单对单通信，多播地址用于单对多通信。大部分人在他们学习了IPv6后才注意到多播地址的存在，但在IPv4中多播地址就有了，尽管它们在公共互联网上用的并不多。</p><p>对多播地址来说，<code>SO_REUSEADDR</code>的含义发生了改变，因为它允许多个socket绑定到完全一样的多播地址和端口，也就是说，对多播地址<code>SO_REUSEADDR</code>的行为与<code>SO_REUSEPORT</code>对单播地址完全一样。事实上，对于多播地址，对<code>SO_REUSEADDR</code>和<code>SO_REUSEPORT</code>的处理完全一样，对所有多播地址，<code>SO_REUSEADDR</code>也就意味着<code>SO_REUSEPORT</code>。</p><h1 id="FreeBSD-OpenBSD-NetBSD"><a href="#FreeBSD-OpenBSD-NetBSD" class="headerlink" title="FreeBSD/OpenBSD/NetBSD"></a>FreeBSD/OpenBSD/NetBSD</h1><p>它们都是很晚的时候衍生自原生BSD的系统，它们与原生BSD的选项和行为都一样。</p><h1 id="MacOS-X"><a href="#MacOS-X" class="headerlink" title="MacOS X"></a>MacOS X</h1><p>MacOS X的内核就是一个BSD类型的UNIX，基于很新的BSD代码，甚至Mac OS 10.3的发布与FreeBSD 5都是同步的，因此MacOS与BSD一样提供相同的选项，处理行为也一样。</p><h1 id="IOS"><a href="#IOS" class="headerlink" title="IOS"></a>IOS</h1><p>IOS只是在内核上稍微修改了MacOS，因此选项和处理行为也和MacOS一样。</p><h1 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h1><p>在linux 3.9之前，只存在选项<code>SO_REUSEADDR</code>。除了两个重要的差别，大体上与BSD一样。第一个差别：当一个监听(listening)TCP socket绑定到通配地址和一个特定的端口，无论其它的socket或者是所有的socket(包括监听socket)都设置了<code>SO_REUSEADDR</code>，其它的TCP socket都无法绑定到相同的端口(BSD中可以)，就更不用说使用一个特定地址了。这个限制并不用在非监听TCP socket上，当一个监听socket绑定到一个特定的地址和端口组合，然后另一个socket绑定到通配地址和相同的端口，这样是可行的。第二个差别: 当把<code>SO_REUSEADDR</code>用在UDP socket上时，它的行为与BSD上<code>SO_REUSEPORT</code>完全相同，因此两个UDP socket只要都设置了<code>SO_REUSEADDR</code>，那么它们可以绑定到相同的地址和端口。</p><p>Linux 3.9加入了<code>SO_REUSEPORT</code>。这个选项允许多个socket(TCP or UDP)不管是监听socket还是非监听socket只要都在绑定之前都设置了它，那么就可以绑定到完全相同的地址和端口。为了阻止”port 劫持”(Port hijacking)有一个特别的限制：所有希望共享源地址和端口的socket都必须拥有相同的有效用户id(effective user ID)。因此一个用户就不能从另一个用户那里”偷取”端口。另外，内核在处理<code>SO_REUSEPORT</code> socket的时候使用了其它系统上没有用到的”特别魔法”：对于UDP socket，内核尝试平均的转发数据报，对于TCP监听socket，内核尝试将新的客户连接请求(由<code>accept</code>返回)平均的交给共享同一地址和端口的socket(监听socket)。这意味着在其他系统上socket收到一个数据报或连接请求或多或少是随机的，但是linux尝试优化分配。例如：一个简单的服务器程序的多个实例可以使用<code>SO_REUSEPORT</code> socket实现一个简单的负载均衡，因为内核已经把复制的分配都做了。</p><h1 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h1><p>尽管整个Android系统与大多数linux发行版都不一样，但是它的内核是个稍加修改的linux内核，因此它的<code>SO_REUSEADDR</code>和<code>SO_REUSEPORT</code>与linux一样。</p><h1 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h1><p>windows上只有<code>SO_REUSEADDR</code>选项，没有<code>SO_REUSEPORT</code>。在windows上设置了<code>SO_REUSEADD</code>R的socket其行为与BSD上设定了<code>SO_REUSEPORT</code>和<code>SO_REUSEADDR</code>的行为大致一样，只有一个差别：一个设置了<code>SO_REUSEADDR</code>的socket总是可以绑定到已经被绑定过的源地址和源端口，不管之前在这个地址和端口上绑定的socket是否设置了<code>SO_REUSEADDR</code>没有。这种行为在某种程度上有些危险因为它允许一个应用程序从别的应用程序上”偷取”已连接的端口。不用说，这对安全性有极大的影响，Microsoft意识到了这个问题，就加入了另一个socket选项: <code>SO_EXECLUSIVEADDRUSE</code>。设置了<code>SO_EXECLUSIVEADDRUSE</code>的socket确保一旦绑定成功，那么被绑定的源端口和地址就只属于这一个socket，其它的socket不能绑定，甚至他们使用了<code>SO_REUSEADDR</code>也没用。</p><h1 id="Solaris"><a href="#Solaris" class="headerlink" title="Solaris"></a>Solaris</h1><p>Solaris是SunOS的后羿，SunOS起源于BSD，SunOS 5和之后的版本则基于SVR4，然而SVR4是BSD，System V和Xenix的集合体，所以从某种程度上说，Solaris也是BSD的分支，而且是相当早的一个分支。这就导致了Solaris只有<code>SO_REUSEADDR</code>而没有<code>SO_REUSEPORT</code>。Solaris上SO_REUSEADDR的行为与BSD的非常相似。从我知道的来看，在Solaris上没办法实现<code>SO_REUSEPORT</code>的行为，也就是说，想把两个socket绑定到相同的源地址和端口上是不可能的。</p><p>与Windows类似，Solaris也有一个选项提供互斥绑定，这个选项叫<code>SO_EXCLBIND</code>。如果在一个socket在绑定之前设置这个选项，那么在其他的socket上设置<code>SO_REUSEADDR</code>将没有任何影响。比如socketA绑定了一个通配地址，socketB设置了<code>SO_REUSEADDR</code>并且绑定到一个非通配地址和相同的端口，那么这个绑定将成功，除非socketA设置了<code>SO_EXCLBIND</code>，在这种情况下，socketB的绑定将失败不管它是否设定了<code>SO_REUSEADDR</code>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;写在前面，本文转载自网络：&lt;a href=&quot;http://blog.chinaunix.net/uid-28587158-id-4006500.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://blog.chinauni
      
    
    </summary>
    
    
      <category term="Socket" scheme="http://www.hashcoding.net/tags/Socket/"/>
    
  </entry>
  
  <entry>
    <title>关于CPU Cache -- 程序猿需要知道的那些事</title>
    <link href="http://www.hashcoding.net/2017/06/02/%E5%85%B3%E4%BA%8ECPU-Cache-%E7%A8%8B%E5%BA%8F%E7%8C%BF%E9%9C%80%E8%A6%81%E7%9F%A5%E9%81%93%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/"/>
    <id>http://www.hashcoding.net/2017/06/02/关于CPU-Cache-程序猿需要知道的那些事/</id>
    <published>2017-06-02T12:02:22.000Z</published>
    <updated>2017-08-24T08:40:56.564Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>文章欢迎转载，但转载时请保留本段文字，并置于文章的顶部 作者：卢钧轶(cenalulu) 本文原文地址：<a href="http://cenalulu.github.io/linux/all-about-cpu-cache/" target="_blank" rel="noopener">http://cenalulu.github.io/linux/all-about-cpu-cache/</a></p></blockquote><p>写在开头：<strong>本文系转载，所以以原有博文为主，以斜体注：开头表示添加内容</strong>。</p><p>先来看一张本文所有概念的一个思维导图</p><p><img src="http://www.hashcoding.net/uploads/images/2017/6/mind_map.png" alt="mind map"></p><h1 id="为什么要有CPU-Cache"><a href="#为什么要有CPU-Cache" class="headerlink" title="为什么要有CPU Cache"></a>为什么要有CPU Cache</h1><p>随着工艺的提升最近几十年CPU的频率不断提升，而受制于制造工艺和成本限制，目前计算机的内存主要是DRAM并且在访问速度上没有质的突破。因此，CPU的处理速度和内存的访问速度差距越来越大，甚至可以达到上万倍。这种情况下传统的CPU通过FSB直连内存的方式显然就会因为内存访问的等待，导致计算资源大量闲置，降低CPU整体吞吐量。同时又由于内存数据访问的热点集中性，在CPU和内存之间用较为快速而成本较高的SDRAM做一层缓存，就显得性价比极高了。</p><h1 id="为什么要有多级CPU-Cache"><a href="#为什么要有多级CPU-Cache" class="headerlink" title="为什么要有多级CPU Cache"></a>为什么要有多级CPU Cache</h1><p>随着科技发展，热点数据的体积越来越大，单纯的增加一级缓存大小的性价比已经很低了。因此，就慢慢出现了在一级缓存(L1 Cache)和内存之间又增加一层访问速度和成本都介于两者之间的二级缓存(L2 Cache)。下面是一段从 <a href="http://cenalulu.github.io/linux/all-about-cpu-cache/(www.akkadia.org/drepper/cpumemory.pdf" target="_blank" rel="noopener">What Every Programmer Should Know About Memory</a>) 中摘录的解释：</p><blockquote><p>Soon after the introduction of the cache the system got more complicated. The speed difference between the cache and the main memory increased again, to a point that another level of cache was added, bigger and slower than the first-level cache. Only increasing the size of the first-level cache was not an option for economical rea- sons.</p></blockquote><p>此外，又由于程序指令和程序数据的行为和热点分布差异很大，因此L1 Cache也被划分成L1i (i for instruction)和L1d (d for data)两种专门用途的缓存。 下面一张图可以看出各级缓存之间的响应时间差距，以及内存到底有多慢！</p><p><img src="http://www.hashcoding.net/uploads/images/2017/6/latency.png" alt="latency"></p><h1 id="什么是Cache-Line"><a href="#什么是Cache-Line" class="headerlink" title="什么是Cache Line"></a>什么是Cache Line</h1><p>Cache Line可以简单的理解为CPU Cache中的最小缓存单位。目前主流的CPU Cache的Cache Line大小都是64Bytes。假设我们有一个512字节的一级缓存，那么按照64B的缓存单位大小来算，这个一级缓存所能存放的缓存个数就是 <code>512/64 = 8</code> 个。具体参见下图：</p><p><img src="http://www.hashcoding.net/uploads/images/2017/6/cache_line.png" alt="cache line"></p><p>为了更好的了解Cache Line，我们还可以在自己的电脑上做下面这个有趣的实验。</p><p>下面这段C代码，会从命令行接收一个参数作为数组的大小创建一个数量为N的int数组。并依次循环的从这个数组中进行数组内容访问，循环10亿次。最终输出数组总大小和对应总执行时间。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;sys/time.h&gt;</span><br><span class="line"></span><br><span class="line">long timediff(clock_t t1, clock_t t2) &#123;</span><br><span class="line">    long elapsed;</span><br><span class="line">    elapsed = ((double)t2 - t1) / CLOCKS_PER_SEC * 1000;</span><br><span class="line">    return elapsed;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(int argc, char *argv[])</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    int array_size=atoi(argv[1]);</span><br><span class="line">    int repeat_times = 1000000000;</span><br><span class="line">    long array[array_size];</span><br><span class="line">    for(int i=0; i&lt;array_size; i++)&#123;</span><br><span class="line">        array[i] = 0;</span><br><span class="line">    &#125;</span><br><span class="line">    int j=0;</span><br><span class="line">    int k=0;</span><br><span class="line">    int c=0;</span><br><span class="line">    clock_t start=clock();</span><br><span class="line">    while(j++&lt;repeat_times)&#123;</span><br><span class="line">        if(k==array_size)&#123;</span><br><span class="line">            k=0;</span><br><span class="line">        &#125;</span><br><span class="line">        c = array[k++];</span><br><span class="line">    &#125;</span><br><span class="line">    clock_t end =clock();</span><br><span class="line">    printf(&quot;%lu\n&quot;, timediff(start,end));</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果我们把这些数据做成折线图后就会发现：总执行时间在数组大小超过64Bytes时有较为明显的拐点（当然，由于博主是在自己的Mac笔记本上测试的，会受到很多其他程序的干扰，因此会有波动）。原因是当数组小于64Bytes时数组极有可能落在一条Cache Line内，而一个元素的访问就会使得整条Cache Line被填充，因而值得后面的若干个元素受益于缓存带来的加速。而当数组大于64Bytes时，必然至少需要两条Cache Line，继而在循环访问时会出现两次Cache Line的填充，由于缓存填充的时间远高于数据访问的响应时间，因此多一次缓存填充对于总执行的影响会被放大，最终得到下图的结果：</p><p><img src="http://www.hashcoding.net/uploads/images/2017/6/cache_line_size2.png" alt="cache_line_size2"></p><p>如果读者有兴趣的话也可以在自己的linux或者MAC上通过 <code>gcc cache_line_size.c -o cache_line_size</code> 编译，并通过 <code>./cache_line_size</code> 执行。</p><p>了解Cache Line的概念对我们程序猿有什么帮助？ 我们来看下面这个C语言中常用的循环优化例子 下面两段代码中，第一段代码在C语言中总是比第二段代码的执行速度要快。具体的原因相信你仔细阅读了Cache Line的介绍后就很容易理解了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">for(int i = 0; i &lt; n; i++) &#123;</span><br><span class="line">    for(int j = 0; j &lt; n; j++) &#123;</span><br><span class="line">        int num;    </span><br><span class="line">        //code</span><br><span class="line">        arr[i][j] = num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">for(int i = 0; i &lt; n; i++) &#123;</span><br><span class="line">    for(int j = 0; j &lt; n; j++) &#123;</span><br><span class="line">        int num;    </span><br><span class="line">        //code</span><br><span class="line">        arr[j][i] = num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="CPU-Cache-是如何存放数据的"><a href="#CPU-Cache-是如何存放数据的" class="headerlink" title="CPU Cache 是如何存放数据的"></a>CPU Cache 是如何存放数据的</h1><h2 id="你会怎么设计Cache的存放规则"><a href="#你会怎么设计Cache的存放规则" class="headerlink" title="你会怎么设计Cache的存放规则"></a>你会怎么设计Cache的存放规则</h2><p>我们先来尝试回答一下那么这个问题：</p><blockquote><p>假设我们有一块4MB的区域用于缓存，每个缓存对象的唯一标识是它所在的物理内存地址。每个缓存对象大小是64Bytes，所有可以被缓存对象的大小总和（即物理内存总大小）为4GB。那么我们该如何设计这个缓存？</p></blockquote><p>如果你和博主<em>(注：原文博主)</em>一样是一个大学没有好好学习基础/数字电路的人的话，会觉得最靠谱的的一种方式就是：Hash表。把Cache设计成一个Hash数组。内存地址的Hash值作为数组的Index，缓存对象的值作为数组的Value。每次存取时，都把地址做一次Hash然后找到Cache中对应的位置操作即可。 这样的设计方式在高等语言中很常见，也显然很高效。因为Hash值得计算虽然耗时(10000个CPU Cycle左右)，但是相比程序中其他操作（上百万的CPU Cycle）来说可以忽略不计。而对于CPU Cache来说，本来其设计目标就是在几十CPU Cycle内获取到数据。如果访问效率是百万Cycle这个等级的话，还不如到Memory直接获取数据。当然，更重要的原因是在硬件上要实现Memory Address Hash的功能在成本上是非常高的。</p><h2 id="为什么Cache不能做成Fully-Associative"><a href="#为什么Cache不能做成Fully-Associative" class="headerlink" title="为什么Cache不能做成Fully Associative"></a>为什么Cache不能做成Fully Associative</h2><p>Fully Associative 字面意思是全关联。在CPU Cache中的含义是：如果在一个Cache集内，任何一个内存地址的数据可以被缓存在任何一个Cache Line里，那么我们成这个cache是Fully Associative。从定义中我们可以得出这样的结论：给到一个内存地址，要知道他是否存在于Cache中，需要遍历所有Cache Line并比较缓存内容的内存地址。而Cache的本意就是为了在尽可能少得CPU Cycle内取到数据。那么想要设计一个快速的Fully Associative的Cache几乎是不可能的。</p><h2 id="为什么Cache不能做成Direct-Mapped"><a href="#为什么Cache不能做成Direct-Mapped" class="headerlink" title="为什么Cache不能做成Direct Mapped"></a>为什么Cache不能做成Direct Mapped</h2><p>和Fully Associative完全相反，使用Direct Mapped模式的Cache给定一个内存地址，就唯一确定了一条Cache Line。设计复杂度低且速度快。那么为什么Cache不使用这种模式呢？让我们来想象这么一种情况：一个拥有1M L2 Cache的32位CPU，每条Cache Line的大小为64Bytes。那么整个L2Cache被划为了 <code>1M/64=16384</code> 条Cache Line。我们为每条Cache Line从0开始编上号。同时32位CPU所能管理的内存地址范围是 <code>2^32=4G</code>，那么Direct Mapped模式下，内存也被划为 <code>4G/16384=256K</code> 的小份。也就是说每256K的内存地址共享一条Cache Line。但是，这种模式下每条Cache Line的使用率如果要做到接近100%，就需要操作系统对于内存的分配和访问在地址上也是近乎平均的。而与我们的意愿相反，为了减少内存碎片和实现便捷，操作系统更多的是连续集中的使用内存。这样会出现的情况就是0-1000号这样的低编号Cache Line由于内存经常被分配并使用，而16000号以上的Cache Line由于内存鲜有进程访问，几乎一直处于空闲状态。这种情况下，本来就宝贵的1M二级CPU缓存，使用率也许50%都无法达到。</p><h2 id="什么是N-Way-Set-Associative"><a href="#什么是N-Way-Set-Associative" class="headerlink" title="什么是N-Way Set Associative"></a>什么是N-Way Set Associative</h2><p>为了避免以上两种设计模式的缺陷，N-Way Set Associative <em>(注：也称为 N-Way M-Set Associative)</em>缓存就出现了。他的原理是把一个缓存按照N个Cache Line作为一组（set），缓存按组划为等分。</p><p><img src="http://www.hashcoding.net/uploads/images/2017/6/set.jpg" alt="set"></p><p><em>cache 由 set 组成， set 由 line 组成， line 由 vaild bit,tag,data组成。其中data是真正要缓存的内存地址中的数据，而tag则是用来搜索cache line的标签。</em></p><p>这样一个64位系统的内存地址在4MB二级缓存中就划成了三个部分（见下图），低位6个bit表示在Cache Line中的偏移量，中间12bit表示Cache组号（set index），剩余的高位46bit就是内存地址的唯一id。这样的设计相较前两种设计有以下两点好处：<em>(注：此处原博主假设为16-Way组相连)</em></p><ul><li>给定一个内存地址可以唯一对应一个set，对于set中只需遍历16个元素就可以确定对象是否在缓存中（Full Associative中比较次数随内存大小线性增加）</li><li>每 <code>2^18(256K)*16(way)=4M</code> 的连续热点数据才会导致一个set内的conflict（Direct Mapped中512K的连续热点数据就会出现conflict）</li></ul><p><img src="http://www.hashcoding.net/uploads/images/2017/6/addr_bits.png" alt="addr_bits"></p><p><em>注：此处相当于 16-Way 64K-set Associative</em></p><h3 id="为什么N-Way-Set-Associative的Set段是从低位而不是高位开始的"><a href="#为什么N-Way-Set-Associative的Set段是从低位而不是高位开始的" class="headerlink" title="为什么N-Way Set Associative的Set段是从低位而不是高位开始的"></a>为什么N-Way Set Associative的Set段是从低位而不是高位开始的</h3><p>下面是一段从<a href="http://danluu.com/3c-conflict/#fn3" target="_blank" rel="noopener">How Misaligning Data Can Increase Performance 12x by Reducing Cache Misses</a>摘录的解释：</p><blockquote><p>The vast majority of accesses are close together, so moving the set index bits upwards would cause more conflict misses. You might be able to get away with a hash function that isn’t simply the least significant bits, but most proposed schemes hurt about as much as they help while adding extra complexity.</p></blockquote><p>由于内存的访问通常是大片连续的，或者是因为在同一程序中而导致地址接近的（即这些内存地址的高位都是一样的）。所以如果把内存地址的高位作为set index的话，那么短时间的大量内存访问都会因为set index相同而落在同一个set index中，从而导致cache conflicts使得L2, L3 Cache的命中率低下，影响程序的整体执行效率。</p><h3 id="了解N-Way-Set-Associative的存储模式对我们有什么帮助"><a href="#了解N-Way-Set-Associative的存储模式对我们有什么帮助" class="headerlink" title="了解N-Way Set Associative的存储模式对我们有什么帮助"></a>了解N-Way Set Associative的存储模式对我们有什么帮助</h3><p>了解N-Way Set的概念后，我们不难得出以下结论：<code>2^(6Bits &lt;Cache Line Offset&gt; + 12Bits &lt;Set Index&gt;) = 2^18 = 256K</code>。即在连续的内存地址中每256K都会出现一个处于同一个Cache Set中的缓存对象。也就是说这些对象都会争抢一个仅有16个空位的缓存池（16-Way Set）。而如果我们在程序中又使用了所谓优化神器的“内存对齐”的时候，这种争抢就会越发增多。效率上的损失也会变得非常明显。具体的实际测试我们可以参考：<a href="http://danluu.com/3c-conflict/#fn3" target="_blank" rel="noopener">How Misaligning Data Can Increase Performance 12x by Reducing Cache Misses</a> 一文。 这里我们引用一张<a href="http://igoro.com/archive/gallery-of-processor-cache-effects/" target="_blank" rel="noopener">Gallery of Processor Cache Effects</a> 中的测试结果图，来解释下内存对齐在极端情况下带来的性能损失。</p><p><img src="http://www.hashcoding.net/uploads/images/2017/6/assoc_big1.png" alt="assoc_big1"></p><p>该图实际上是我们上文中第一个测试的一个变种。纵轴表示了测试对象数组的大小。横轴表示了每次数组元素访问之间的index间隔。而图中的颜色表示了响应时间的长短，蓝色越明显的部分表示响应时间越长。从这个图我们可以得到很多结论。当然这里我们只对内存带来的性能损失感兴趣。有兴趣的读者也可以阅读<a href="http://igoro.com/archive/gallery-of-processor-cache-effects/" target="_blank" rel="noopener">原文</a>分析理解其他从图中可以得到的结论。</p><p>从图中我们不难看出图中每1024个步进，即每<code>1024*4</code>即4096Bytes，都有一条特别明显的蓝色竖线。也就是说，只要我们按照4K的步进去访问内存(内存根据4K对齐），无论热点数据多大它的实际效率都是非常低的！按照我们上文的分析，如果4KB的内存对齐，那么一个240MB的数组就含有61440个可以被访问到的数组元素；而对于一个每256K就会有set冲突的16Way二级缓存，总共有<code>256K/4K=64</code>个元素要去<em>(注：从整个缓存中)</em>争抢16个空位，总共有<code>61440/64=960</code>个这样的元素。那么缓存命中率只有1%，自然效率也就低了。</p><p>除了这个例子，有兴趣的读者还可以查阅另一篇国人对Page Align导致效率低的实验：<a href="http://evol128.is-programmer.com/posts/35453.html" target="_blank" rel="noopener">http://evol128.is-programmer.com/posts/35453.html</a></p><p>想要知道更多关于内存地址对齐在目前的这种CPU-Cache的架构下会出现的问题可以详细阅读以下两篇文章：</p><ul><li><a href="http://danluu.com/3c-conflict/" target="_blank" rel="noopener">How Misaligning Data Can Increase Performance 12x by Reducing Cache Misses</a></li><li><a href="http://igoro.com/archive/gallery-of-processor-cache-effects/" target="_blank" rel="noopener">Gallery of Processor Cache Effects</a></li></ul><h1 id="Cache淘汰策略"><a href="#Cache淘汰策略" class="headerlink" title="Cache淘汰策略"></a>Cache淘汰策略</h1><p>在文章的最后我们顺带提一下CPU Cache的淘汰策略。常见的淘汰策略主要有LRU和Random两种。通常意义下LRU对于Cache的命中率会比Random更好，所以CPU Cache的淘汰策略选择的是LRU。当然也有些实验显示<a href="http://danluu.com/2choices-eviction/" target="_blank" rel="noopener">在Cache Size较大的时候Random策略会有更高的命中率</a></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>CPU Cache对于程序猿是透明的，所有的操作和策略都在CPU内部完成。但是，了解和理解CPU Cache的设计、工作原理有利于我们更好的利用CPU Cache，写出更多对CPU Cache友好的程序</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="http://igoro.com/archive/gallery-of-processor-cache-effects/" target="_blank" rel="noopener">Gallery of Processor Cache Effects</a><br><a href="http://danluu.com/3c-conflict/" target="_blank" rel="noopener">How Misaligning Data Can Increase Performance 12x by Reducing Cache Misses</a><br><a href="http://www.cs.umd.edu/class/sum2003/cmsc311/Notes/Memory/introCache.html" target="_blank" rel="noopener">Introduction to Caches</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;文章欢迎转载，但转载时请保留本段文字，并置于文章的顶部 作者：卢钧轶(cenalulu) 本文原文地址：&lt;a href=&quot;http://cenalulu.github.io/linux/all-about-cpu-cache/&quot; target=&quot;_
      
    
    </summary>
    
    
      <category term="Architecture" scheme="http://www.hashcoding.net/tags/Architecture/"/>
    
  </entry>
  
  <entry>
    <title>Linux TCP 编程</title>
    <link href="http://www.hashcoding.net/2017/05/26/Linux-TCP-%E7%BC%96%E7%A8%8B/"/>
    <id>http://www.hashcoding.net/2017/05/26/Linux-TCP-编程/</id>
    <published>2017-05-26T10:28:19.000Z</published>
    <updated>2017-08-15T07:01:08.823Z</updated>
    
    <content type="html"><![CDATA[<p>TCP(Transmission Control Protocol) 是由 IETF 的 RFC 793 定义的一种<strong>面向连接的、可靠的、基于字节流的</strong>传输层通信协议。</p><h1 id="TCP-报文段"><a href="#TCP-报文段" class="headerlink" title="TCP 报文段"></a>TCP 报文段</h1><p>TCP 数据被封装在一个 IP 数据报中，如下图所示：</p><p><img src="http://www.hashcoding.net/uploads/images/2017/5/TCP%E5%9C%A8IP%E4%B8%AD%E7%9A%84%E5%B0%81%E8%A3%85.png" alt="TCP数据在IP数据报中的封装"></p><p>下图是 TCP 首部的数据格式，如果不计任选字段，它通常是20个字节：</p><p><img src="http://www.hashcoding.net/uploads/images/2017/5/TCP包首部.png" alt="TCP包首部"></p><p>下面介绍重要的几个数据：</p><ul><li>32位序号：表示数据当前发送的第一个字节在字节流中的序号</li><li>32位确认号：表示发送端所期望收到的下一个序号，因此该序号位上一次收到的序号加一</li><li>6个特殊标志bit: (按照排列顺序)<ul><li>URG: 紧急指针有效</li><li>ACK：确认序号有效</li><li>PSH：接收方应该尽快将这个报文段交给应用层</li><li>RST：重建连接</li><li>SYN：同步序号，用来发起一个连接</li><li>FIN：发送端完成任务，关闭发送端到接收端连接</li></ul></li></ul><p>其余的解释请参考 TCP/IP 协议详解。</p><h1 id="TCP-连接的状态图"><a href="#TCP-连接的状态图" class="headerlink" title="TCP 连接的状态图"></a>TCP 连接的状态图</h1><p><img src="http://www.hashcoding.net/uploads/images/2017/5/TCP状态转换.png" alt="TCP状态图"></p><h1 id="TCP-连接的建立与终止"><a href="#TCP-连接的建立与终止" class="headerlink" title="TCP 连接的建立与终止"></a>TCP 连接的建立与终止</h1><p>TCP 是一个<strong>面向连接的</strong>通信协议，这要求通信双方在进行通信之前，需要先建立其连接。在常见的客户端、服务器模式的程序中，通常是服务器绑定端口，并在该端口上监听客户端连接请求；客户端主动向服务器发起连接请求，待服务器响应后，双方建立起一条通信链路。</p><h2 id="建立"><a href="#建立" class="headerlink" title="建立"></a>建立</h2><p>TCP 连接建立时通信双方的分组报文如下图所示：</p><p><img src="http://www.hashcoding.net/uploads/images/2017/5/TCP三路握手.png" alt="TCP 三路握手"></p><p>如图所示，客户端发起 <code>connect</code>，此时客户端发送 <code>SYN</code> 报文；服务端使用 <code>accept</code> 接受该连接请求，同时反馈 <code>SYN</code> 和 <code>ACK</code>；等到客户端相应了 <code>ACK</code>后，双方建立起完整连接。</p><p>将上述过程映射到 TCP 状态图上进行观察，在服务器端：</p><ul><li>刚开始服务器处于 <code>CLOSED</code> 状态</li><li>服务器初始化时绑定了具体的端口，并使用 <code>listen</code> 监听该端口，进入了 <code>LISTEN</code> 状态</li><li>服务端接收到了来自客户端的 <code>SYN</code> 请求，发送 <code>SYN</code> 和 <code>ACK</code> 给客户端，然后进入 <code>SYN_RCVD</code> 状态</li><li>当服务端接收到了客户端紧接着到达的 <code>ACK</code> 时，进入 <code>ESTABLISHED</code> 状态</li></ul><p>客户端方面：</p><ul><li>刚开始同样处于 <code>CLOSED</code> 状态</li><li>应用主动调用 <code>CONNECT</code> 发起连接，发送 <code>SYN</code> 给服务器，然后进入 <code>SYN_SEND</code> 状态</li><li>当接受到服务器的 <code>SYN</code> 和 <code>ACK</code> 后，发送对应的 <code>ACK</code> 给服务器，并进入 <code>ESTABLISHED</code> 状态</li></ul><p>当双方都进入 <code>ESTABLISHED</code> 状态时，表示连接已经建立成功。</p><p>当然，客户端在发送了 <code>SYN</code> 后，等待超时，并重试几次后，便会触发 <code>Timeout</code> 进入 <code>CLOSED</code>，在应用层则表示为 <code>connect</code> 失败。</p><h2 id="同时建立连接"><a href="#同时建立连接" class="headerlink" title="同时建立连接"></a>同时建立连接</h2><p>与常见的模式不同的是，TCP 允许连接双方同时发起建立连接的请求。此时分组报文如下图所示：</p><p><img src="http://www.hashcoding.net/uploads/images/2017/5/TCP同时建立连接.png" alt="TCP同时建立连接"></p><p>连接双方同时发送 <code>SYN</code> 到对方，然后同样地返回 <code>SYN</code> 和 <code>ACK</code> 给对方。将该过程对应到状态图中：</p><ul><li>刚开始同样处于 <code>CLOSED</code> 状态</li><li>应用主动调用 <code>CONNECT</code> 发起连接，发送 <code>SYN</code> 给服务器，然后进入 <code>SYN_SEND</code> 状态</li><li>接收到 <code>SYN</code> 后进入 <code>SYN-RCVD</code> 状态</li><li>接收到 <code>ACK</code> 后建立连接，进入 <code>ESTABLISHED</code> 状态</li></ul><h2 id="关闭连接"><a href="#关闭连接" class="headerlink" title="关闭连接"></a>关闭连接</h2><p><code>FIN</code> 用于通知对方关闭本方向的连接。由于 TCP 是一个<strong>全双工的</strong>通信协议，像管道一样，支持关闭某一方向上的连接，所以在 TCP 中关闭连接需要双方都发送 <code>FIN</code> 报文。此时分组报文如下图所示：</p><p><img src="http://www.hashcoding.net/uploads/images/2017/5/TCP关闭时的分组交换.png" alt="TCP关闭时的分组交换"></p><p>当某一方关闭连接时，发送 <code>FIN</code> 给另一方，对方回复 <code>ACK</code> 后，同时也发送 <code>FIN</code>；等到双方都收到最后的 <code>ACK</code> 后，连接关闭。当然，<strong>如果另一方只回复了 <code>ACK</code> 而没有发起 <code>FIN</code>，则表示对方仍然想要发送数据，这种情况称为 TCP 的半关闭</strong>。只有当双方都发送了 <code>FIN</code> 并接收到对方的 <code>ACK</code> 后，才算真正的连接关闭。所以上图中 Server 端的 <code>FIN</code> 包可以在接收到 Client 的 <code>FIN</code> 包后，隔一段时间再发送。</p><p>在状态图中对应了主动关闭和被动关闭，首先观察主动关闭：</p><ul><li>当应用使用 <code>close</code> 后，发送 <code>FIN</code> 给对方，并由 <code>ESTABLISHED</code> 状态进入 <code>FIN_WAIT_1</code> 状态</li><li>如果收到 <code>ACK</code> 后，进入 <code>FIN_WAIT_2</code> 状态</li><li>此时等待对方的 <code>FIN</code> 到达，并发送 <code>ACK</code> 给对方，进入 <code>TIME_WAIT</code> 状态</li><li>如果在 <code>FIN_WAIT_1</code> 状态直接接收到 <code>FIN</code> 和 <code>ACK</code>，则直接进入 <code>TIME_WAIT</code> 状态</li><li><code>TIME_WAIT</code> 状态等待了 2 MSL 后，进入 <code>CLOSED</code> 状态，此时连接关闭</li></ul><p>被动关闭则简单得多：</p><ul><li>当收到对方的 <code>FIN</code> 后，发送 <code>ACK</code> 并由 <code>ESTABLISHED</code> 进入 <code>CLOSE_WAIT</code> 状态</li><li>等到用户层发出 <code>close</code> 后，发送 <code>FIN</code> 同时进入 <code>LAST_ACK</code> 状态</li><li>等到接收到对方的 <code>ACK</code> 后，进入 <code>CLOSED</code> 状态，连接关闭</li></ul><p><code>TIME_WAIT</code> 状态可能时状态图中最不易懂的地方，它也被称为 <code>2 MSL</code> 状态。每一个具体 TCP 实现必须选择一个报文段最大生存时间 MSL(Maximum Segment Lifetime)，表示任何报文段被丢弃前能在网络中存活的时间。当 TCP 执行主动关闭并发送了 <code>ACK</code> 给对方进入 <code>TIME_WAIT</code> 状态后，该连接必须在 <code>TIME_WAIT</code> 状态停留 2 倍的 MSL 。这样可以保证 TCP 在超时后再次发送最后的 <code>ACK</code> 以防止这个 <code>ACK</code> 丢失。使用 2 MSL 的另外一点是，当前的 <code>socket</code> 关闭后，可能立即被用于建立另一个 TCP 连接，而网络中可能存在着尚未到达具有 <code>TIME_WAIT</code> 状态一方的包，需要保证这些包不会影响到接下来即将建立的连接。2 MSL 的时间间隔中不允许 <code>socket</code> 被重新使用，同时也能够保证消耗掉网络中的包。所以 <code>TIME_WAIT</code> 状态存在有两个理由：</p><ul><li>可靠地实现 TCP 全双工连接的终止</li><li>允许老的重复的包在网络中消逝</li></ul><blockquote><p>关于保证 TCP 超时后再次发送最后的 <code>ACK</code> 进行补充：<a href="https://www.zhihu.com/question/27564314/answer/162476313#" target="_blank" rel="noopener">在tcp协议中处于last_ack状态的连接，如果一直收不到对方的ack，会一直处于这个状态吗？- 知乎</a></p></blockquote><h2 id="同时关闭"><a href="#同时关闭" class="headerlink" title="同时关闭"></a>同时关闭</h2><p>如 TCP 同时打开一样，TCP 也存在同时关闭状态，此时双方均进入 <code>FIN_WAIT_1</code> 状态，并再接收到 <code>FIN</code> 后进入 <code>CLOSING</code> 状态。等到接收到 <code>ACK</code> 后，则进入 <code>TIME_WAIT</code> 状态。</p><h2 id="TCP-复位"><a href="#TCP-复位" class="headerlink" title="TCP 复位"></a>TCP 复位</h2><p>在 TCP 首部中 <code>RST</code> 位表示表示复位，用来异常的关闭连接，在 TCP 的设计中它是不可或缺的。发送 <code>RST</code> 包关闭连接时，不必等缓冲区的包都发出去，直接就丢弃缓存区的包发送 <code>RST</code> 包。而接收端收到 <code>RST</code> 包后，也不必发送 <code>ACK</code> 包来确认。TCP 处理程序会在自己认为的异常时刻发送 <code>RST</code> 包。 </p><p>下面来分析一下 TCP 中 <code>RST</code> 包出现的主要场景。</p><h3 id="到不存在的端口的连接请求"><a href="#到不存在的端口的连接请求" class="headerlink" title="到不存在的端口的连接请求"></a>到不存在的端口的连接请求</h3><p>产生复位的一种常见情况是当连接请求到达时，目的端口没有进程在监听。例如，A 向 B 发起连接，但 B 之上并未监听相应的端口，这时 B 操作系统上的 TCP 处理程序会发 <code>RST</code> 包。</p><h3 id="异常终止一个连接"><a href="#异常终止一个连接" class="headerlink" title="异常终止一个连接"></a>异常终止一个连接</h3><p>终止一个连接的正常方式是一方发送 <code>FIN</code>，这也成为有序释放，因为在所有排队数据都已经发送之后才发送 <code>FIN</code> ，正常情况下没有数据丢失。但是也可以使用 <code>RST</code> 来直接释放一个连接，这种方式称为异常释放。使用异常终止有两个有点：</p><ul><li>丢弃任何待发送数据并立即发送复位报文段</li><li><code>RST</code> 的接收方会区分另一端是异常还是正常关闭</li></ul><h3 id="检测半打开连接"><a href="#检测半打开连接" class="headerlink" title="检测半打开连接"></a>检测半打开连接</h3><p>如果一方已经关闭或异常终止而另一方还不知道，这样的 TCP 连接被称为<strong>半打开</strong>的。比如系统断电而不是正常结束就可能造成半打开的连接。如果发生异常的一方重启后重新连接到远程服务，则会发生错误，此时远程服务器会发送 <code>RST</code> 关闭此连接。比如，AB 正常建立连接了，正在通讯时，A 向 B 发送了 <code>FIN</code> 包要求关连接，B 发送 <code>ACK</code> 后，网断了，A 通过若干原因放弃了这个连接（例如进程重启）。网通了后，B 又开始发数据包，A 收到后表示压力很大，不知道这野连接哪来的，就发了个 <code>RST</code> 包强制把连接关了，B 收到后会出现 <code>connect reset by peer</code> 错误。</p><h1 id="Socket-TCP-编程"><a href="#Socket-TCP-编程" class="headerlink" title="Socket TCP 编程"></a>Socket TCP 编程</h1><p>Socket 中文称为套接字，用于应用程序发出或相应网络请求。POSIX 提供了一套 Socket 编程标准 API，在进一步之前，先看看 Socket TCP 编程流程：</p><p><img src="http://www.hashcoding.net/uploads/images/2017/5/TCP流程.png" alt="TCP Socket 编程流程"></p><p>简单的 Socket 编程流程如上图所示，创建了 <code>socket</code> 后的客户端通过 <code>connect</code> 操作连接到了处于 <code>listen</code> 的服务器；当服务器使用 <code>accept</code> 接受新的连接请求后，双方建立起了连接，通过 <code>read</code> 和 <code>write</code> 传输数据；最后使用 <code>close</code> 来关闭连接。</p><h2 id="简单的例子"><a href="#简单的例子" class="headerlink" title="简单的例子"></a>简单的例子</h2><p>进一步深入了解如何使用 socket 编程前，先来看看例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;error.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;unistd.h&gt;</span><br><span class="line">#include &lt;arpa/inet.h&gt;</span><br><span class="line">#include &lt;netinet/in.h&gt;</span><br><span class="line">#include &lt;sys/socket.h&gt;</span><br><span class="line"></span><br><span class="line">typedef struct sockaddr *PSA;</span><br><span class="line"></span><br><span class="line">int main(int argc, char **argv) </span><br><span class="line">&#123;</span><br><span class="line">    int fd = socket(AF_INET, SOCK_STREAM, 0);</span><br><span class="line">    if (fd &lt; 0) &#123;</span><br><span class="line">        perror(&quot;socket&quot;);</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    struct sockaddr_in addr;</span><br><span class="line">    memset(&amp;addr, 0, sizeof(addr));</span><br><span class="line">    addr.sin_len = sizeof(addr);</span><br><span class="line">    addr.sin_family = AF_INET;</span><br><span class="line">    addr.sin_port = htons(8080);</span><br><span class="line">    addr.sin_addr.s_addr = inet_addr(&quot;127.0.0.1&quot;);</span><br><span class="line"></span><br><span class="line">    if (connect(fd, (PSA) &amp;addr, sizeof(addr)) &lt; 0) &#123;</span><br><span class="line">        perror(&quot;connect&quot;);</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // do something</span><br><span class="line">    close(fd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面是客户端，以及下面的服务器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;error.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;unistd.h&gt;</span><br><span class="line">#include &lt;arpa/inet.h&gt;</span><br><span class="line">#include &lt;netinet/in.h&gt;</span><br><span class="line">#include &lt;sys/socket.h&gt;</span><br><span class="line"></span><br><span class="line">typedef struct sockaddr *PSA;</span><br><span class="line"></span><br><span class="line">int main(int argc, char **argv) </span><br><span class="line">&#123;</span><br><span class="line">    int fd = socket(AF_INET, SOCK_STREAM, 0);</span><br><span class="line">    if (fd &lt; 0) &#123;</span><br><span class="line">        perror(&quot;socket&quot;);</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    struct sockaddr_in addr;</span><br><span class="line">    memset(&amp;addr, 0, sizeof(addr));</span><br><span class="line">    addr.sin_len = sizeof(addr);</span><br><span class="line">    addr.sin_family = AF_INET;</span><br><span class="line">    addr.sin_port = htons(8080);</span><br><span class="line">    addr.sin_addr.s_addr = inet_addr(&quot;127.0.0.1&quot;);</span><br><span class="line">    if (bind(fd, (PSA) &amp;addr, sizeof(addr)) &lt; 0) &#123;</span><br><span class="line">        perror(&quot;bind&quot;);</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (listen(fd, 10) &lt; 0) &#123;</span><br><span class="line">        perror(&quot;listen&quot;);</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    struct sockaddr_in clientaddr;</span><br><span class="line">    socklen_t clientlen;</span><br><span class="line">    for (;;) &#123;</span><br><span class="line">        int clientfd = accept(fd, (PSA) &amp;clientaddr, &amp;clientlen);</span><br><span class="line">        // do something</span><br><span class="line">        close(clientfd);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>这两段代码随手写的，没有经过验证。</em></p><p>上述代码是一个基本的客户端服务器 socket 编程模板，它展示了 socket 编程常用的 API 的用法。下面来看看如何使用 socket 编程 API。</p><h2 id="套接字地址"><a href="#套接字地址" class="headerlink" title="套接字地址"></a>套接字地址</h2><p>每一个 socket 对象在使用时都需要和一个具体的 socket 地址绑定，而每一个协议簇都有自己的套接字地址结构。这些结构以 <code>sockaddr</code> 开头，并以协议簇的唯一后缀结尾。</p><p>socket API 兼容多种协议簇。在实现上以一种通用套接字地址结构作为所有套接字地址的基类。（实际上在C语言中可以使用 <code>void*</code> 作为参数，不过 socket API 定义在 ANSI C 之前，此时还没有 <code>void*</code>。）</p><h3 id="通用套接字地址结构"><a href="#通用套接字地址结构" class="headerlink" title="通用套接字地址结构"></a>通用套接字地址结构</h3><p>在 <code>&lt;sys/socket.h&gt;</code> 头文件中定义了一个通用的套接字地址结构。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">struct sockaddr &#123;</span><br><span class="line">    uint8_t sa_len;</span><br><span class="line">    sa_family_t sa_family;</span><br><span class="line">    char sa_data[14];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>对于应用开发人员来说，需要的是使用 API 时，强制将其他协议簇的地址结构指针转换为通用地址结构指针。也就是说：<strong>通用 socket 地址结构唯一的作用就是用于对特定协议的地址结构执行强制类型转换，以统一类型</strong>。</p><h3 id="IPv4-地址结构"><a href="#IPv4-地址结构" class="headerlink" title="IPv4 地址结构"></a>IPv4 地址结构</h3><p>在实际编程中容易接触到的时 IP 协议簇，而 IP 协议簇又分为 IPv4 和 IPv6 两个版本。先看 IPv4 的 socket 地址结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">struct in_addr &#123;</span><br><span class="line">    in_addr_t s_addr;   /* 32 bit IPv4 address,</span><br><span class="line">        in network byte ordered */</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">struct sockaddr_in &#123;</span><br><span class="line">    uint8_t sin_len;        /* length of structure (16) */</span><br><span class="line">    sa_family_t sin_family; /* AF_INET */</span><br><span class="line">    in_port_t sin_port;     /* 16 bit port number，in network byte ordered */</span><br><span class="line">    struct in_addr sin_addr;/* 32 bit IPv4 address */</span><br><span class="line">    char sin_zero[8];       /* unused */</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>该结构定义在文件 <code>&lt;netinet/in.h&gt;</code> 中，编程人员主要关心：<code>sin_family</code>、<code>sin_addr</code> 和 <code>sin_port</code>。<code>sin_family</code> 表示使用的使用的协议簇。<code>sin_addr</code> 和 <code>sin_port</code> 表示具体的 socket 地址，<strong>需要注意两者的数据都必须是网络字节序</strong>。关于网络字节序可以参考<a href="https://blog.csdn.net/houwei544/article/details/8592996" target="_blank" rel="noopener">网络字节序-CSDN</a>。</p><h3 id="IPv6-地址结构"><a href="#IPv6-地址结构" class="headerlink" title="IPv6 地址结构"></a>IPv6 地址结构</h3><p>IPv6 地址结构和 IPv4 地址结构定义在同一文件中，其内部布局如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">struct in6_addr &#123;</span><br><span class="line">    uint8_t s6_addr; /* 128 bit IPv6 address,</span><br><span class="line">        in network byte ordered */</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">struct sockaddr_in6 &#123;</span><br><span class="line">    uint8_t sin6_len;   /* length of structure (28) */</span><br><span class="line">    sa_family_t sin6_family;    /* AF_INET6 */</span><br><span class="line">    in_port_t sin6_port;        /* port */</span><br><span class="line">    uint32_t sin6_flowinfo;     /* flow information */</span><br><span class="line">    struct in6_addr sin6_addr;  /* IPv6 address */</span><br><span class="line">    uint32_t sin6_scope_id;     /* set of interfaces for a scope */</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="地址相关-API"><a href="#地址相关-API" class="headerlink" title="地址相关 API"></a>地址相关 API</h3><p>在使用的时候，需要在网络字节序和本地字节序之间进行转换，而 POSIX 提供了对应的字节序转换方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;netinet/in.h&gt;</span><br><span class="line"></span><br><span class="line">// 主机到网络</span><br><span class="line">uint16_t htons(uint16_t val);</span><br><span class="line">uint32_t htonl(uint32_t val);</span><br><span class="line"></span><br><span class="line">// 网络到主机</span><br><span class="line">uint16_t ntohs(uint16_t val);</span><br><span class="line">uint32_t ntohl(uint32_t val);</span><br></pre></td></tr></table></figure><p>除了提供字节序转换方法外，标准还提供了点分制地址到网络序的二进制值之间进行转换的方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;sys/socket.h&gt;</span><br><span class="line">#include &lt;netinet/in.h&gt;</span><br><span class="line">#include &lt;arpa/inet.h&gt;</span><br><span class="line"></span><br><span class="line">int inet_aton(const char *cp, struct in_addr *inp);</span><br><span class="line">in_addr_t inet_addr(const char *cp);</span><br><span class="line">in_addr_t inet_network(const char *cp);</span><br><span class="line">char *inet_ntoa(struct in_addr in);</span><br></pre></td></tr></table></figure><p><code>inet_aton</code> 把 <code>cp</code> 对应的点分制的地址转换为网络地址并保存在 <code>inp</code> 中，如果地址正确则返回非零，否则返回0。 </p><p><code>inet_addr</code> 则是直接返回网络二进制地址，如果地址错误返回 <code>INADDR_NONE</code>。</p><p><code>inet_network</code> 和 <code>inet_addr</code> 一样，但是返回的地址是主机序的二进制地址，如果错误返回 -1。</p><p><code>inet_ntoa</code> 这个函数和前面的函数作用相反，是将网络序二进制地址转换为点分制的地址。需要注意的是如果再次调用该函数返回的 <code>buffer</code> 会被覆盖。</p><p>上面部分的内容是针对 IPv4 地址，对于 IPv6，标准提供了新的函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;arpa/inet.h&gt;</span><br><span class="line">int inet_pton(int af, const char *src, void *dst);</span><br><span class="line">const char *inet_ntop(int af, const void *src, char *dst, socklen_t size);</span><br></pre></td></tr></table></figure><p>这两个函数同时支持 IPv4 和 IPv6 ，所以在使用中，建议使用这两个函数替代原有的函数。对于第一个参数 <code>af</code> 表示具体的协议：<code>AF_INET</code> 和 <code>AF_INET6</code>，如果不是这两个值，则返回一个错误，并将 <code>errno</code> 设置成 <code>EAFNOSUPPORT</code>。</p><p>第一个函数尝试转换字符串对应的地址，并将得到的二进制数据保存到 <code>dst</code>，若成功返回 1，否则表示对应的 <code>family</code> 协议的字符串不是有效的，返回 0。</p><p>第二个函数进行了相反的转换，<code>size</code> 用于保存目标存储单元的大小，用于防止缓冲区溢出。标准定义了一个具体的数值来帮助开辟缓冲区空间:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;netinet/in.h&gt;</span><br><span class="line"></span><br><span class="line">#define INET_ADDRSTRLEN     16</span><br><span class="line">#define INET6_ADDRSTRLEN    46</span><br></pre></td></tr></table></figure><p>如果缓冲区过小，那么返回一个空指针，并将 <code>errno</code> 设置为 <code>ENOSPC</code>。调用成功后，返回 <code>dst</code> 。</p><p>// TODO: IPv4 和 IPv6 混合</p><h2 id="socket-API"><a href="#socket-API" class="headerlink" title="socket API"></a>socket API</h2><h3 id="socket-函数"><a href="#socket-函数" class="headerlink" title="socket 函数"></a>socket 函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;sys/types.h&gt;   </span><br><span class="line">#include &lt;sys/socket.h&gt;</span><br><span class="line"></span><br><span class="line">int socket(int domain, int type, int protocol);</span><br></pre></td></tr></table></figure><p>使用 <code>socket</code> 函数创建一个通信的 socket，并返回其描述符。</p><p><code>domain</code> 参数指定具体通行领域，用来告知具体的通信协议，TCP 中使用到了：<code>AF_INET</code> 和 <code>AF_INET6</code>。<code>type</code> 参数指定通信的语义，TCP 中主要关心 <code>SOCK_STREAM</code> —— 提供顺序，可靠的双向基于连接的字节流。可能支持带外数据传输机制。<code>protocol</code> 参数在此处只需要填 <code>IPPROTO_TCP</code>，表示使用 TCP 传输协议。</p><blockquote><p> Since  Linux  2.6.27,  the type argument serves a second purpose: in addition to specifying a socket type, it may include the bitwise OR of any of the following values, to modify the behavior of <code>socket()</code>:</p><p><code>SOCK_NONBLOCK</code>   Set the <code>O_NONBLOCK</code> file status flag on the new open file description.  Using this flag  saves extra calls to <code>fcntl</code> to achieve the same result.</p><p><code>SOCK_CLOEXEC</code>    Set  the  close-on-exec (<code>FD_CLOEXEC</code>) flag on the new file descriptor.  See the description of the <code>O_CLOEXEC</code> flag in <code>open</code> for reasons why this may be useful.</p></blockquote><p>当函数成功后，将返回新套接字的文件描述符。出错时返回-1，并适当设置 <code>errno</code>。<code>errno</code> 的具体错误值可能如下：</p><ul><li>EAFNOSUPPORT 该实现不支持指定的地址族。</li><li>EINVAL 未知协议或协议族不可用或类型中的标记无效。</li><li>EMFILE 已达到打开文件描述符数的限制。</li><li>ENOBUFS or ENOMEM 内存不足可用。在释放足够的资源之前，无法创建套接字。</li><li>EPROTONOSUPPORT 该域中不支持协议类型或指定的协议。</li></ul><h3 id="bind-函数"><a href="#bind-函数" class="headerlink" title="bind 函数"></a>bind 函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;sys/types.h&gt;          </span><br><span class="line">#include &lt;sys/socket.h&gt;</span><br><span class="line"></span><br><span class="line">int bind(int sockfd, const struct sockaddr *addr, socklen_t addrlen);</span><br></pre></td></tr></table></figure><p><code>bind</code> 将由 <code>addr</code> 指定的地址分配给文件描述符 <code>sockfd</code> 引用的套接字。<code>addrlen</code> 指定 <code>addr</code> 指向的地址结构的大小（以字节为单位）。 传统上，这个操作称为“为套接字分配名称”。通常需要在 <code>SOCK_STREAM</code> 套接字接收（<code>accept</code>）连接之前使用 <code>bind</code> 分配本地地址。当函数成功后，将返回新套接字的文件描述符。成功返回 0 ，出错时返回-1，并适当设置 <code>errno</code>。<code>errno</code> 的具体错误值可能如下：</p><ul><li>EADDRINUSE 地址已经被使用了。                                                                    </li><li>EBADF  <code>sockfd</code> 不是不可用。                                                                        </li><li>EINVAL 当前 socket 已经绑定过地址了。或者 <code>addrlen</code> 错误，或者 <code>addr</code> 不是合法的地址。</li><li>ENOTSOCK <code>sockfd</code> 不是一个 socket 描述符。                                                  </li></ul><p>在通常的使用中，客户端程序没有调用 <code>bind</code> 直接使用 <code>connect</code> 创建连接，因为 socket 从系统内部选择一个端口组成 <code>addr</code> ，并将之与对应的 socket 绑定。<strong>也就是说，<code>bind</code>并不是仅仅用于 <code>listen</code>，也可以配合 <code>connect</code> 使用</strong>。如果没有使用 <code>bind</code> 绑定地址，可以使用 <code>getsockname</code> 获取地址信息。</p><h3 id="connect-函数"><a href="#connect-函数" class="headerlink" title="connect 函数"></a>connect 函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;sys/types.h&gt;          </span><br><span class="line">#include &lt;sys/socket.h&gt;</span><br><span class="line"></span><br><span class="line">int connect(int sockfd, const struct sockaddr *addr, socklen_t addrlen);</span><br></pre></td></tr></table></figure><p><code>connect</code> 系统调用将文件描述符 <code>sockfd</code> 引用的套接字连接到 <code>addr</code> 指定的地址。<code>addrlen</code> 参数指定 <code>addr</code> 的大小。对于 TCP ，<code>connect</code> 触发三路握手，并在建立连接成功或者发生错误时返回，其中可能有以下几种情况：</p><ul><li>EADDRINUSE 地址已经被使用了。                                                                    </li><li>EBADF  <code>sockfd</code> 不是不可用。</li><li>timeout 如果 TCP 没有收到 SYN 分节的响应，则返回 ETIMEOUT。</li><li>reset 如果对方相应的时 RST ，表示服务器主机在我们指定的端口上没有程序监听，这是一种硬错误(hard error)，此时返回 ECONNREFUSED。</li><li>unreachable 如果目标主机不在当前网络中，发生了 ICMP 错误，则认为是一种软错误(soft error)，并返回 EHOSTUNREACH 或 ENETUNRECH 错误。</li></ul><p>如果 <code>connect</code> 出现错误而失败，则不能再重新使用，需要使用 <code>close</code> 关闭。如果需要重新连接，则需要从头创建描述符。</p><h3 id="listen-函数"><a href="#listen-函数" class="headerlink" title="listen 函数"></a>listen 函数</h3><p><code>listen</code> 函数仅仅由 TCP 服务器调用，它做两件事情：</p><ol><li>将 <code>socket</code> 建立的主动 socket （默认为主动）转换为被动的 socket，因此此 socket 可以使用 <code>accept</code> 来接收到来的连接请求。然后 socket 对应的状态由 <code>CLOSED</code> 状态变为 <code>LISTEN</code> 状态</li><li>它指定了 socket 在内核中的排队连接的数量</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;sys/types.h&gt;</span><br><span class="line">#include &lt;sys/socket.h&gt;</span><br><span class="line"></span><br><span class="line">int listen(int sockfd, int backlog);</span><br></pre></td></tr></table></figure><p><code>sockfd</code> 为对应的 socket 描述符。<code>backlog</code> 参数定义 <code>sockfd</code> 的挂起连接队列可能的最大长度。 如果连接请求在队列已满时到达，则客户端可能会收到带有 <code>ECONNREFUSED</code> 指示的错误，或者如果底层协议支持重传，则该请求可能会被忽略，以便以后重新尝试连接成功。</p><p>在 UNP 一书中说：内核为任何一个监听套接字维护两个队列。</p><ul><li>未完成连接队列：其中的套接字表示正在完成三路握手过程。这些套接字此时处于 <code>SYN_RCVD</code> 状态。</li><li>已经完成队列：表示这些套接字已经完成了三路握手过程，处于 <code>ESTABLISHED</code> 状态，等到 <code>accept</code> 读取。</li></ul><p>成功返回 0 ，出错时返回-1，并适当设置 <code>errno</code>。<code>errno</code> 的具体错误值可能如下：</p><ul><li>EADDRINUSE 地址已经被使用了。                                                                    </li><li>EBADF  <code>sockfd</code> 不是不可用。                                                     </li><li>ENOTSOCK <code>sockfd</code> 不是一个 socket 描述符。   </li><li>EOPNOTSUPP <code>sockfd</code> 对应的 socket 不支持 <code>listen</code> 操作。</li></ul><h3 id="accept-函数"><a href="#accept-函数" class="headerlink" title="accept 函数"></a>accept 函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;sys/types.h&gt;     </span><br><span class="line">#include &lt;sys/socket.h&gt;</span><br><span class="line"></span><br><span class="line">int accept(int sockfd, struct sockaddr *addr, socklen_t *addrlen);</span><br></pre></td></tr></table></figure><p><code>accept</code> 函数从 <code>sockfd</code> 的<em>已经完成队列</em>中取出 socket。<code>addr</code> 表示接受的远程地址，<code>addrlen</code> 则是地址空间长度。在成功时，这些系统调用返回一个非负整数，它是接受的套接字的描述符。 出错时返回-1，并适当设置errno。在 linux 中还有一个新版本的函数 <code>accept4</code>：</p><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; #define _GNU_SOURCE             /* See feature_test_macros(7) */</span><br><span class="line">&gt; #include &lt;sys/socket.h&gt;</span><br><span class="line">&gt; int accept4(int sockfd, struct sockaddr  *addr, socklen_t *addrlen, int flags);</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>If flags is 0, then accept4() is the same as accept().  The following values can be bitwise ORed in flags to obtain different behavior:</p><ul><li><p>SOCK_NONBLOCK   Set  the O_NONBLOCK file status flag on the new open file description.  Using this flag saves extra calls to fcntl(2) to achieve the same result.</p></li><li><p>SOCK_CLOEXEC    Set the close-on-exec (FD_CLOEXEC) flag on the new file descriptor.  See the  description  of the O_CLOEXEC flag in open(2) for reasons why this may be useful.</p></li></ul></blockquote><h3 id="getsockname-和-getpeername-函数"><a href="#getsockname-和-getpeername-函数" class="headerlink" title="getsockname 和 getpeername 函数"></a>getsockname 和 getpeername 函数</h3><p>这两个函数分别返回与某个 socket 关联的本地地址，以及远程地址。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;sys/socket.h&gt;</span><br><span class="line"></span><br><span class="line">int getsockname(int sockfd, int sockaddr *localaddr, socklen_t *addrlen);</span><br><span class="line">int getpeername(int sockfd, int sockaddr *remoteaddr, socklen_t *addrlen);</span><br></pre></td></tr></table></figure><p>两个函数的用法一致。如果正确返回 0 ，错误返回 -1，并设置 <code>errno</code>。</p><h3 id="关闭-socket-连接"><a href="#关闭-socket-连接" class="headerlink" title="关闭 socket 连接"></a>关闭 socket 连接</h3><p>终止 socket 连接的通常方法是使用 <code>close</code> 函数，不过 <code>close</code> 函数有两个限制，而 <code>shutdown</code> 则可以避免：</p><ul><li><code>close</code> 只是将引用计数减一，只有计数为 0 时才关闭套接字。而 <code>shutdown</code> 则可以不管引用技术直接触发 TCP 的正常连接终止序列。</li><li><code>close</code> 会将读写两个方向的连接都关闭，而某些情况下 TCP 需要保持一方的连接。而 <code>shutdown</code> 则可以关闭某一方的连接，也就是 TCP 的半关闭状态。</li></ul><p><code>shutdown</code> 函数的原型如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;sys/socket.h&gt;</span><br><span class="line"></span><br><span class="line">int shutdown(int sockfd, int how);</span><br></pre></td></tr></table></figure><p>该函数的行为依赖于 <code>how</code> 的值：</p><ul><li>SHUT_RD 关闭本端的读这一半，socket 不再接收新数据，同时丢弃缓冲区中的数据。</li><li>SHUT_WR 关闭写的这一半，当前缓冲区的数据将被发送。此时进程无法再对该 socket 进行写操作。</li><li>SHUT_RDWR 将读写都关闭，这等价于先调用 <code>shutdown(fd, SHUT_RD)</code> 然后调用 <code>shutdown(fd, SHUT_WR)</code>。</li></ul><p>要注意，<strong><code>shutdown(fd, SHUT_RDWR)</code>仅仅是断开了 socket 连接，但是并不意味着 socket 被关闭了，此时还需要调用 <code>close(fd)</code> 来释放文件描述符，否则会造成描述符泄露</strong> 。</p><h2 id="socket-options"><a href="#socket-options" class="headerlink" title="socket options"></a>socket options</h2><p>有多种办法获取或设置 socket 的选项：</p><ul><li><code>getsockopt</code> 和 <code>setsockopt</code> 函数</li><li><code>fcntl</code> 函数</li><li><code>ioctl</code> 函数</li></ul><h3 id="getsockopt-amp-setsockopt"><a href="#getsockopt-amp-setsockopt" class="headerlink" title="getsockopt &amp; setsockopt"></a>getsockopt &amp; setsockopt</h3><p>这两个函数仅用于 socket：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;sys/types.h&gt;          /* See NOTES */</span><br><span class="line">#include &lt;sys/socket.h&gt;</span><br><span class="line"></span><br><span class="line">int getsockopt(int sockfd, int level, int optname, void *optval, socklen_t *optlen);</span><br><span class="line">int setsockopt(int sockfd, int level, int optname, const void *optval, socklen_t optlen);</span><br></pre></td></tr></table></figure><p>其中 <code>sockfd</code> 必须指向<strong>打开的</strong>套字符， <code>level</code> 指定如何解释后面的选项；<code>optname</code> 则是具体的选项内容；<code>optval</code> 指向某个具体变量，<code>setsockopt</code> 从 <code>optval</code> 指向的变量中读值，<code>getsockopt</code> 则将值写入 <code>optval</code>；显而易见的 <code>optlen</code> 为 <code>optval</code> 所指向变量的大小。</p><p><code>level</code> 分别指出 <code>optname</code> 是 <code>socket</code>、<code>ip</code> 还是 <code>TCP</code> 的选项。首先来看 <code>socket</code> 的 <code>SOL_SOCKET</code> 所对一个的选项，只列出了重要的部分：</p><ul><li><p><code>SO_REUSEADDR</code> &amp; <code>SO_REUSEPORT</code>：<code>SO_REUSEADDR</code> 主要有两个工作：1、改变了在处理源地址冲突时对通配地址(“any ip address”)的处理方式的处理方法；2、处于<code>TIME_WAIT</code>状态中的socket可以重用。关于这两者的行为及其异同不详述，请参考<a href="http://www.hashcoding.net/2017/06/04/SO-REUSEADDR-SO-REUSEPORT-%E5%BC%82%E5%90%8C/">SO_REUSEADDR &amp; SO_REUSEPORT 的异同</a></p></li><li><p><code>SO_RECVBUF</code> / <code>SO_SNDBUF</code> 先明确一个概念：每个TCP socket在内核中都有一个发送缓冲区和一个接收缓冲区，TCP的全双工的工作模式以及TCP的滑动窗口便是依赖于这两个独立的buffer以及此buffer的填充状态。接收缓冲区把数据缓存入内核，应用进程一直没有调用read进行读取的话，此数据会一直缓存在相应socket的接收缓冲区内。再啰嗦一点，不管进程是否读取socket，对端发来的数据都会经由内核接收并且缓存到socket的内核接收缓冲区之中。read所做的工作，就是把内核缓冲区中的数据拷贝到应用层用户的buffer里面，仅此而已。进程调用send发送的数据的时候，最简单情况（也是一般情况），将数据拷贝进入socket的内核发送缓冲区之中，然后send便会在上层返回。换句话说，send返回之时，数据不一定会发送到对端去（和write写文件有点类似），send仅仅是把应用层buffer的数据拷贝进socket的内核发送buffer中。如果应用进程一直没有读取，buffer满了之后，发生的动作是：通知对端TCP协议中的窗口关闭。这个便是滑动窗口的实现。保证TCP套接口接收缓冲区不会溢出，从而保证了TCP是可靠传输。因为对方不允许发出超过所通告窗口大小的数据。这就是TCP的流量控制，如果对方无视窗口大小而发出了超过窗口大小的数据，则接收方TCP将丢弃它。</p></li><li><p><code>SO_KEEPALIVE</code> <code>SO_KEEPALIVE</code> 如果一方已经关闭或异常终止连接，而另一方却不知道，我们将这样的TCP连接称为半打开的。TCP通过保活定时器(KeepAlive)来检测半打开连接。设置该选项后，如果2小时内在此套接口的任一方向都没有数据交换，TCP 就自动给对方发一个保持存活探测分节(keepalive probe)。这是一个对方必须响应的TCP分节.它会导致以下三种情况：</p><ol><li>对方接收一切正常：以期望的 ACK 响应，2小时后，TCP 将发出另一个探测分节。</li><li>对方已崩溃且已重新启动：以 RST 响应。套接口的待处理错误被置为 <code>ECONNRESET</code>，套接口本身则被关闭。</li><li><p>对方无任何响应：源自 berkeley 的 TCP 发送另外 8 个探测分节，相隔 75 秒一个，试图得到一个响应。在发出第一个探测分节 11 分钟 15 秒后若仍无响应就放弃。套接口的待处理错误被置为 <code>ETIMEOUT</code>，套接口本身则被关闭。如 ICMP 错误是“host unreachable(主机不可达)”，说明对方主机并没有崩溃，但是不可达，这种情况下待处理错误被置为 <code>EHOSTUNREACH</code>。</p><p>有关 <code>SO_KEEPALIVE</code> 的三个参数详细解释如下: </p></li></ol><ul><li><code>tcp_keepalive_intvl</code>: 保活探测消息的发送频率。默认值为 75s。发送频率<code>tcp_keepalive_intvl</code> 乘以发送次数 <code>tcp_keepalive_probes</code> ，就得到了从开始探测直到放弃探测确定连接断开的时间，大约为11min。</li><li><code>tcp_keepalive_probes</code>，TCP 发送保活探测消息以确定连接是否已断开的次数。默认值为9（次）。注意：只有设置了 <code>SO_KEEPALIVE</code> 套接口选项后才会发送保活探测消息。</li><li><code>tcp_keepalive_time</code>，在 TCP 保活打开的情况下，最后一次数据交换到 TCP 发送第一个保活探测消息的时间，即允许的持续空闲时间。默认值为 7200s（2h）。</li></ul></li><li><p><code>SO_LINGER</code> <code>SO_LINGER</code> 将决定系统如何处理残存在套接字发送队列中的数据。处理方式无非两种：丢弃或者将数据继续发送至对端，优雅关闭连接。事实上，<code>SO_LINGER</code> 并不被推荐使用，大多数情况下我们推荐使用默认的关闭方式。关于 <code>SO_LINGER</code> 具体描述可以参考：<a href="http://blog.csdn.net/factor2000/article/details/3929816" target="_blank" rel="noopener">SO_LINGER 选项设置</a>。</p></li><li><p><code>SO_RCVLOWAT</code> / <code>SO_SNDLOWAT</code> 分别表示TCP接收缓冲区和发送缓冲区的低水位标记。它们一般被I/O复用系统调用用来判断socket是否可读或可写。当TCP接收缓冲区中可读数据的总数大于其低水位标记时，I/O复用系统调用将通知应用程序可以从对应的socket上读取数据；当TCP发送缓冲区中的空闲空间（可以写入数据的空间）大于其低水位标记时，I/O复用系统调用将通知应用程序可以往对应的socket上写入数据。默认情况下，TCP接收缓冲区的低水位标记为1字节和TCP发送缓冲区的低水位标记均为2048字节。</p></li><li><p><code>SO_RCVTIMEO</code> / <code>SO_SNDTIMEO</code> 这两个选项给套接字的接收和发送设置一个超时值。注意，访问函数的参数是指向<code>timeval</code>结构的指针。通过设置值为0秒和0微妙禁止超时。缺省情况下，两个超时都是禁止的。</p></li></ul><p>另外，实际编程中还关心 TCP 相关的选项 <code>IPPROTO_TCP</code>：</p><ul><li><p><code>TCP_NODELAY</code> / <code>TCP_CHORK</code> 是否采用 Nagle 算法把较小的包组装为更大的帧。<strong>HTTP服务器经常使用 <code>TCP_NODELAY</code> 关闭该算法</strong>。相关的还有 <code>TCP_CORK</code>。</p></li><li><p><code>TCP_DEFER_ACCEPT</code> 推迟 <code>accept</code>，实际上是当接收到第一个数据之后，才会创建连接。<strong>（对于像HTTP等非交互式的服务器，这个很有意义，可以用来防御空连接攻击。）</strong></p></li><li><p><code>TCP_KEEPCNT</code> / <code>TCP_KEEPIDLE</code> / <code>TCP_KEEPINTVL</code> 这三个参数配合 <code>SO_KEEPALIVE</code> 使用，通过 <code>TCP_KEEPIDLE</code>、<code>TCP_KEEPINTVL</code> 和 <code>TCP_KEEPCNT</code> 设置 keepalive 的开始时间、间隔、次数等参数。保活时间：<code>keepalive_time = TCP_KEEPIDLE + TCP_KEEPINTVL * TCP_KEEPCNT</code> 从 <code>TCP_KEEPIDLE</code> 时间开始，向对端发送一个探测信息，然后每过 <code>TCP_KEEPINTVL</code>  发送一次探测信息。如果在保活时间内，就算检测不到对端了，仍然保持连接。超过这个保活时间，如果检测不到对端，服务器就会断开连接，如果能够检测到对方，那么连接一直持续。</p></li></ul><h2 id="非阻塞socket"><a href="#非阻塞socket" class="headerlink" title="非阻塞socket"></a>非阻塞socket</h2><p>阻塞是指调用结果返回前，当前线程会被挂起。当函数结果返回时当前线程才恢复执行。非阻塞和阻塞的概念相对应，指在不能立刻得到结果之前，该函数不会阻塞当前线程，而会立刻返回。</p><p>前面的socket函数默认是阻塞模式，使用<code>fcntl</code>可以将socket设置为非阻塞模式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int flags = fcntl(fd, F_GETFL, 0);</span><br><span class="line">fcntl(fd, F_SETFL, flags | O_NONBLOCK);</span><br></pre></td></tr></table></figure><p>非阻塞socket编程与阻塞编程的区别主要在于一些可能造成阻塞的操作在无法完成操作的情况下直接返回<code>EAGAIN</code>或<code>EWOULDBLOCK</code>。比如使用<code>read</code>，而此时输入缓冲区中没有任何数据，那么直接返回<code>EWOULDBLOCK</code>。这样服务器可以将CPU用于处理其他逻辑，而非等待数据到达。</p><p>对于非阻塞socket，可能写出下面的代码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">int fds[MAX_FDS];</span><br><span class="line">// ...</span><br><span class="line">for (int i = 0; i &lt; max_fd; ++i) &#123;</span><br><span class="line">    if (read(fds[i], buf, sizeof(buf)) != EWOULDBLOCK) &#123;</span><br><span class="line">        // do something</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="IO多路复用"><a href="#IO多路复用" class="headerlink" title="IO多路复用"></a>IO多路复用</h2><p>对于非阻塞式socket，如果使用轮询实现，每次都要陷入内核态，且依次轮询效率非常低，所以提出了IO多路复用机制。所谓IO多路复用，在实现上是将轮询机制转换为观察者模式。用户需要注册文件描述符以及需要监听事件，而内核负责在发生某些事件（可读等）时通知用户。也就是说原来需要在每条连接上进行监听，而使用IO多路复用后，监听过程交给了内核，由内核将消息分发到每一条连接上。</p><p>按照IO多路复用的发展历程，出现了<code>select</code>、<code>poll</code>和<code>epoll</code>（在BSD上对应kqueue)。</p><p>关于<code>select</code>使用参考<a href="http://www.cnblogs.com/ccsccs/articles/4224253.html" target="_blank" rel="noopener">Linux select 详解</a>。</p><p>关于<code>poll</code>使用参考<a href="http://blog.csdn.net/zmxiangde_88/article/details/8099049" target="_blank" rel="noopener">poll调用详解</a>。</p><p>关于<code>epoll</code>使用参考<a href="http://blog.jobbole.com/93566/" target="_blank" rel="noopener">通过完整示例来理解如何使用epoll</a>。</p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ol><li><a href="https://zh.wikipedia.org/wiki/%E4%BC%A0%E8%BE%93%E6%8E%A7%E5%88%B6%E5%8D%8F%E8%AE%AE" target="_blank" rel="noopener">TCP - Wikis</a> </li><li>TCP/IP 详解 卷一：协议</li><li>UNIX 网络编程 卷一：套接字联网API</li><li><a href="https://www.zhihu.com/question/48871684" target="_blank" rel="noopener">如何正确关闭 TCP 连接 - 知乎</a></li><li><a href="http://0xffffff.org/2014/11/20/33-servie-program/" target="_blank" rel="noopener">浅谈服务端编程</a></li><li><a href="http://elf8848.iteye.com/blog/1961192" target="_blank" rel="noopener">TCP/IP Socket心跳机制so_keepalive的三个参数详解</a></li><li><a href="http://blog.csdn.net/tengyft/article/details/45826735" target="_blank" rel="noopener">SO_RCVLOWAT和SO_SNDLOWAT选项</a></li><li><a href="https://my.oschina.net/yangan/blog/185262" target="_blank" rel="noopener">TCP选项之SO_RCVLOWAT和SO_SNDLOWAT</a></li><li><a href="http://blog.chinaunix.net/uid-29075379-id-3905006.html" target="_blank" rel="noopener">TCP选项之SO_RCVBUF和SO_SNDBUF</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;TCP(Transmission Control Protocol) 是由 IETF 的 RFC 793 定义的一种&lt;strong&gt;面向连接的、可靠的、基于字节流的&lt;/strong&gt;传输层通信协议。&lt;/p&gt;
&lt;h1 id=&quot;TCP-报文段&quot;&gt;&lt;a href=&quot;#TCP-报文
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://www.hashcoding.net/tags/Linux/"/>
    
      <category term="Socket" scheme="http://www.hashcoding.net/tags/Socket/"/>
    
      <category term="TCP/IP" scheme="http://www.hashcoding.net/tags/TCP-IP/"/>
    
  </entry>
  
  <entry>
    <title>链接</title>
    <link href="http://www.hashcoding.net/2017/05/17/%E9%93%BE%E6%8E%A5/"/>
    <id>http://www.hashcoding.net/2017/05/17/链接/</id>
    <published>2017-05-17T01:50:10.000Z</published>
    <updated>2017-08-15T07:03:19.924Z</updated>
    
    <content type="html"><![CDATA[<p>链接是把各种代码、数据收集起来组合成单一文件的过程，这个文件可以被加载到内存中执行。在实际开发中，会将项目分散成小的、更容易管理的模块，然后独立的修改和编译这些模块。链接则是将各个模块组合成可执行文件的过程。</p><p>链接通常由链接器完成，不过现代编译器或编译环境已经处理了链接过程，需要手动使用链接器完成的场景已经很少了。大多数现代编译系统提供了编译驱动程序，它可以依次使用预处理、编译、汇编、链接器来完成编译到链接的过程，不需要用户干预。</p><p>比如由a.c和b.c两个文件，在编译驱动程序的帮助下，可以使用简单命令完成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -o program a.c b.c</span><br></pre></td></tr></table></figure><p>上述命令等价于下面这些命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cpp a.c a.i</span><br><span class="line">cpp b.c b.i</span><br><span class="line">cc1 a.i -o a.S</span><br><span class="line">cc1 b.i -o b.S</span><br><span class="line">as -o a.o a.S</span><br><span class="line">as -o b.o b.S</span><br><span class="line">ld -o program a.o b.o</span><br></pre></td></tr></table></figure><p>上述过程依次调用预处理、编译、汇编和链接器，最终生成了可执行文件。</p><p>像ld程序这样的静态链接器以一组可重定位的目标文件和参数作为输入，生成完全链接的可执行目标文件。可重定位目标文件由一系列的节(section)组成。</p><h2 id="可重定位目标文件"><a href="#可重定位目标文件" class="headerlink" title="可重定位目标文件"></a>可重定位目标文件</h2><p>目标文件有三种</p><ul><li>可重定位目标文件</li><li>可执行目标文件</li><li>共享目标文件</li></ul><p>这里只关心可重定位目标文件，它包含了二进制代码和数据，不过其中的信息并不完善，需要和其他文件一起才能组成一个可执行目标文件或者共享目标文件。</p><p>所谓可重定位，是指包含的二进制代码中有引用到其他模块的，由于不知道其他模块中二进制代码布局，所以留了空等待回填。使用例子更方便理解可重定位目标文件。假设有下面的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int a, a1=1;</span><br><span class="line"></span><br><span class="line">int main(void) &#123;</span><br><span class="line">  static int b = 1;</span><br><span class="line">  static int c;</span><br><span class="line"></span><br><span class="line">  printf(&quot;hello world&quot;, a, b);</span><br><span class="line"></span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将之命名为<code>hello.c</code>，然后使用命令生成重定位目标文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -c hello.o hello.c</span><br></pre></td></tr></table></figure><p>此时<code>hello.o</code>便是可重定位目标文件，使用<code>objdump -h hello.o</code>可以看看可重定位目标文件的节(section)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">/mnt/d/tmp$ objdump -h hello.o</span><br><span class="line"></span><br><span class="line">hello.o:     file format elf64-x86-64</span><br><span class="line"></span><br><span class="line">Sections:</span><br><span class="line">Idx Name          Size      VMA               LMA               File off  Algn</span><br><span class="line">  0 .text         00000028  0000000000000000  0000000000000000  00000040  2**0</span><br><span class="line">                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE</span><br><span class="line">  1 .data         00000008  0000000000000000  0000000000000000  00000068  2**2</span><br><span class="line">                  CONTENTS, ALLOC, LOAD, DATA</span><br><span class="line">  2 .bss          00000004  0000000000000000  0000000000000000  00000070  2**2</span><br><span class="line">                  ALLOC</span><br><span class="line">  3 .rodata       0000000c  0000000000000000  0000000000000000  00000070  2**0</span><br><span class="line">                  CONTENTS, ALLOC, LOAD, READONLY, DATA</span><br><span class="line">  4 .comment      00000035  0000000000000000  0000000000000000  0000007c  2**0</span><br><span class="line">                  CONTENTS, READONLY</span><br><span class="line">  5 .note.GNU-stack 00000000  0000000000000000  0000000000000000  000000b1  2**0</span><br><span class="line">                  CONTENTS, READONLY</span><br><span class="line">  6 .eh_frame     00000038  0000000000000000  0000000000000000  000000b8  2**3</span><br><span class="line">                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA</span><br></pre></td></tr></table></figure><p><code>Idx</code> 是编号，<code>Name</code> 是节点名称，<code>Size</code> 是节大小，<code>VMA</code> 是在虚拟内存中的起点，<code>LMA</code> 是节的装载地址（除了ROM之外，通常与 VMA 相同），<code>File off</code> 是在文件中的具体偏移，<code>Algn</code> 是对齐地址。各节第二行描述了节的属性。<code>CONTENTS</code> 表示节在文件中占用了内存空间，<code>ALLOC</code> 则表示需要分配内存，<code>RELOC</code> 表示需要重定位。</p><p><code>.text</code> 包含了已编译程序的二进制代码，<code>.data</code>是已经初始化的全局C变量或静态局部变量，<code>.bss</code>是未初始化的全局变量或静态局部变量，<code>rodata</code>包含只读数据。其他的数据暂时可以不用关心。</p><p>观察符号表来说明符号所在section：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">/mnt/d/tmp$ objdump -t hello.o</span><br><span class="line"></span><br><span class="line">hello.o:     file format elf64-x86-64</span><br><span class="line"></span><br><span class="line">SYMBOL TABLE:</span><br><span class="line">0000000000000000 l    df *ABS*  0000000000000000 hello.c</span><br><span class="line">0000000000000000 l    d  .text  0000000000000000 .text</span><br><span class="line">0000000000000000 l    d  .data  0000000000000000 .data</span><br><span class="line">0000000000000000 l    d  .bss   0000000000000000 .bss</span><br><span class="line">0000000000000000 l    d  .rodata        0000000000000000 .rodata</span><br><span class="line">0000000000000004 l     O .data  0000000000000004 b.2288</span><br><span class="line">0000000000000000 l     O .bss   0000000000000004 c.2289</span><br><span class="line">0000000000000000 l    d  .note.GNU-stack        0000000000000000 .note.GNU-stack</span><br><span class="line">0000000000000000 l    d  .eh_frame      0000000000000000 .eh_frame</span><br><span class="line">0000000000000000 l    d  .comment       0000000000000000 .comment</span><br><span class="line">0000000000000004       O *COM*  0000000000000004 a</span><br><span class="line">0000000000000000 g     O .data  0000000000000004 a1</span><br><span class="line">0000000000000000 g     F .text  0000000000000028 main</span><br><span class="line">0000000000000000         *UND*  0000000000000000 printf</span><br></pre></td></tr></table></figure><p>各列分别是解内偏移，标记位，所在节，对齐方式和符号名。<em>ABS</em> 表示这是一个不和任何节相关的绝对符号，<em>UND</em>则这个符号不在本文件中定义，<em>COM</em> 表示还未分配位置的未初始化数据目标。</p><p><code>a</code>和<code>c</code>没有初始化，放到了<code>.bss</code>节中，<code>b</code>和<code>a1</code>则是放到了<code>.data</code>节中，而<code>mian</code>表示的函数放到了<code>.text</code>节中，<code>printf</code>则是未定义的符号，需要进行重定位。使用<code>objdump -r</code>可以显示可重定位目标文件的重定位项：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">/mnt/d/tmp$ objdump -r hello.o</span><br><span class="line"></span><br><span class="line">hello.o:     file format elf64-x86-64</span><br><span class="line"></span><br><span class="line">RELOCATION RECORDS FOR [.text]:</span><br><span class="line">OFFSET           TYPE              VALUE</span><br><span class="line">0000000000000006 R_X86_64_PC32     .data</span><br><span class="line">000000000000000c R_X86_64_PC32     a-0x0000000000000004</span><br><span class="line">0000000000000013 R_X86_64_32       .rodata</span><br><span class="line">000000000000001d R_X86_64_PC32     printf-0x0000000000000004</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">RELOCATION RECORDS FOR [.eh_frame]:</span><br><span class="line">OFFSET           TYPE              VALUE</span><br><span class="line">0000000000000020 R_X86_64_PC32     .text</span><br></pre></td></tr></table></figure><p>分别表示 <code>.text</code> 和 <code>.eh_frame</code> 节的重定位表。重定位表是在程序中留下的空位所在地方，可以修改代码简单验证一下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int a;</span><br><span class="line"></span><br><span class="line">int main(void) &#123;</span><br><span class="line">  static int b = 1;</span><br><span class="line"></span><br><span class="line">  printf(&quot;hello world&quot;, a, b);</span><br><span class="line">  printf(&quot;hello world&quot;, a, b);</span><br><span class="line">  printf(&quot;hello world&quot;, a, b);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里将<code>printf</code>使用多次，然后看看重定位表：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">/mnt/d/tmp$ objdump -r hello.o</span><br><span class="line"></span><br><span class="line">hello.o:     file format elf64-x86-64</span><br><span class="line"></span><br><span class="line">RELOCATION RECORDS FOR [.text]:</span><br><span class="line">OFFSET           TYPE              VALUE</span><br><span class="line">0000000000000006 R_X86_64_PC32     .data</span><br><span class="line">000000000000000c R_X86_64_PC32     a-0x0000000000000004</span><br><span class="line">0000000000000013 R_X86_64_32       .rodata</span><br><span class="line">000000000000001d R_X86_64_PC32     printf-0x0000000000000004</span><br><span class="line">0000000000000023 R_X86_64_PC32     .data</span><br><span class="line">0000000000000029 R_X86_64_PC32     a-0x0000000000000004</span><br><span class="line">0000000000000030 R_X86_64_32       .rodata</span><br><span class="line">000000000000003a R_X86_64_PC32     printf-0x0000000000000004</span><br><span class="line">0000000000000040 R_X86_64_PC32     .data</span><br><span class="line">0000000000000046 R_X86_64_PC32     a-0x0000000000000004</span><br><span class="line">000000000000004d R_X86_64_32       .rodata</span><br><span class="line">0000000000000057 R_X86_64_PC32     printf-0x0000000000000004</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">RELOCATION RECORDS FOR [.eh_frame]:</span><br><span class="line">OFFSET           TYPE              VALUE</span><br><span class="line">0000000000000020 R_X86_64_PC32     .text</span><br></pre></td></tr></table></figure><p>这样的结果刚好印证了前面的说法。</p><p>链接器将可重定位目标文件组合成为可执行或共享目标文件时，必须完成两个任务：</p><ul><li>符号解析 符号解析是将符号的定义和每次使用联系起来</li><li>重定位 重定位则是将引用符号时留空填上对应的符号地址</li></ul><h2 id="符号解析"><a href="#符号解析" class="headerlink" title="符号解析"></a>符号解析</h2><p>链接器解析符号引用的办法是将每个引用与它输入的可重定位目标文件的符号表中一个确定的符号联系起来。如果符号的定义和引用都在同一文件内，解析起来非常方便。如果不是当前模块中定义的符号，则会在其他文件中查找，如果所有文件中都没有，那么会报错。比如对于下面的文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">void bar(int,int);</span><br><span class="line">int main() &#123;</span><br><span class="line">    bar(0,0);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译器能够正常执行，并生成可重定位目标文件，但是链接器会报错误:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/tmp/cc672f5D.o: In function `main&apos;:</span><br><span class="line">test.c:(.text+0x5): undefined reference to `bar&apos;</span><br><span class="line">collect2: error: ld returned 1 exit status</span><br></pre></td></tr></table></figure><blockquote><p>NOTICE: 注意C++中符号的命名不同于C语言（存在重载），所以在C++中可能看到的符号名类似于<code>_Z3barii</code></p></blockquote><p>当然，如果多个文件中存在多重定义的全局符号，则会按照一定的规则来选出一个符号作为目标符号，具体信息可以查阅相关资料。</p><h2 id="重定位"><a href="#重定位" class="headerlink" title="重定位"></a>重定位</h2><p>你可能已经注意到在重定位表中存在这两种不同类型的重定义<code>R_X86_64_PC32</code>和<code>R_X86_64_32</code>。</p><p>前一种表示使用32位PC相对地址引用，比如<code>pc+4</code>之类的值，所以此处应该回填目标符号和当前符号的相对地址。</p><p>后一种表示使用32位绝对地址引用，说明此处可以直接填上符号的绝对地址，比如<code>jmp bar</code>。</p><p>链接器在所有的符号查找完成的同时记录下其真正的地址。链接器重定位算法大概如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">foreach section s &#123;</span><br><span class="line">  foreach relocation entry r &#123;</span><br><span class="line">    refptr = s + r.offset;</span><br><span class="line">    if (r.type == XXXX_PC32) &#123;</span><br><span class="line">      refaddr = ADDR(s) + r.offset;</span><br><span class="line">      *refptr = ADDR(r.symbol) + *refptr - refaddr;</span><br><span class="line">    &#125;</span><br><span class="line">    if (r.type == XXXX_32) &#123;</span><br><span class="line">      *refptr = ADDR(r.symbol) + *refptr;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中的<code>ADDR()</code>表示了指定符号的真正地址。对于相对地址，首先用节的真实地址（这就是为甚么符号表中竟然含有节名）和符号在节中的偏移计算出需要回填的位置在内存中的真实地址。然后通过所引用符号的内存地址计算出其偏移。可能不能理解的是为何算法中加上了<code>*refptr</code>，我们可以看看重定位表项:<code>a-0x0000000000000004</code>，后面的值实际上就是<code>*refptr</code>的值。这样做可以在不同指令大小和编码方式不同的机器上，使用相同的链接器，即链接器可以透明的重定位引用，而不需要知道具体机器相关的细节。对于绝对地址，已经不需要再过解释。</p><h2 id="静态链接库"><a href="#静态链接库" class="headerlink" title="静态链接库"></a>静态链接库</h2><p>有时会用到一些第三方提供的库文件，但是只用到其中一两个函数，而整个文件非常大，感觉非常不合算。比如标准库函数，如果我们只需要一个<code>printf</code>却把整个标准库包含进去，得不偿失。此时静态库的概念被提出来，将所有相关的目标模块打包成为一个单独的文件，然后链接器链接的时候，只拷贝被程序引用到的目标模块或函数。</p><h2 id="共享库与位置无关代码"><a href="#共享库与位置无关代码" class="headerlink" title="共享库与位置无关代码"></a>共享库与位置无关代码</h2><p>比如使用标准库，每个程序都拷贝一份标准库代码，如果 PC 中运行着非常多的程序时，那么标准库拷贝也会被复制多份，因此提出了共享库的概念。使用共享库，将原有的拷贝代码到程序中的方式改为 PC 中只运行一份代码库，所有程序中均调用该共享库的实例。共享库是一个目标模块，在运行时随机加载到储存器的任意地址，并和一个在储存器中的程序链接起来。这个过程成为动态链接，是由一个叫动态链接器的程序来执行的。共享库在 Unix 系统中通常使用后缀 so，在 Windows 系统中称为 DLL。</p><p>动态库是随机加载到存储器中，而用户程序怎么知道何时何地呢？此时使用叫做<strong>位置无关的代码</strong>(Position-Independent Code, PIC)来解决。举例来说明为何位置无关代码能解决这个问题，首先假设有 <code>find_func_address</code> 函数用于在共享库中查找目标函数地址：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">void *find_func_address(const char *name);</span><br></pre></td></tr></table></figure><p>然后在具体的程序中使用共享库并使用内部函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/* 假设共享库中有函数 bar，其签名如下 */</span><br><span class="line">typedef void (*Bar)();</span><br><span class="line"></span><br><span class="line">/* load library */</span><br><span class="line">Bar bar = (Bar)find_func_address(&quot;bar&quot;);  </span><br><span class="line"></span><br><span class="line">bar(); /* call */</span><br><span class="line"></span><br><span class="line">/* release library */</span><br></pre></td></tr></table></figure><p>只需要 <code>find_func_address</code> 能找到函数在共享库中的地址，然后在需要的地方查找即可。不过程序员肯定受不了每次使用均调用一次 <code>find_func_address</code> ，并且程序中存在上千甚至更多次引用时，重复加载的效率也非常低。因此可以将代码改写一下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">typedef void (*Bar)();</span><br><span class="line">void bar() &#123;</span><br><span class="line">  static Bar bar_ = (Bar) find_func_address(&quot;bar&quot;);</span><br><span class="line">  return bar_();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">bar(); /* call */</span><br></pre></td></tr></table></figure><p>这里的代码解决了上面的两个问题：1、程序中引用共享库中的 <code>bar</code> 函数只需要使用 <code>void bar()</code> 函数即可；2、利用局部静态变量的初始化特性保证只初始化一次。</p><blockquote><p>注意，上述代码并不是线程安全的，参考：<a href="http://blog.csdn.net/wingfiring/article/details/498242" target="_blank" rel="noopener">多线程中局部静态变量初始化的陷阱</a></p></blockquote><p>当然，这部分工作已经由编译器完成，我们不需要操心。在编译器实现中，使用了 GOT (global offset table) 和 PLT (procedure linkage table) 完成，而这个过程称为延迟绑定(lazy binding)。所谓延迟绑定，就是将过程地址的绑定推迟到第一次调用该过程（函数）时。每个函数均有对应的 GOT 表项和 PLT 表项，如果将之和上面的代码对应，那么 GOT 表项相当于 <code>void bar()</code>，而 PLT 表项相当于 <code>static Bar bar_ = (Bar) find_func_address(&quot;bar&quot;);</code>。在使用延迟绑定技术时，用户调用了共享库函数，此时 IP 跳转到该函数的 GOT 表项所在位置；对于首次调用，GOT 表项填着 PLT 表项地址，所以 IP 继续跳转到 PLT 表项所在位置，而 PLT 负责完成查找函数地址，并将地址保存到 GOT 表项，然后跳转到 GOT 表项从新执行；对于非首次访问，直接跳转到 GOT 所在地址，完成调用过程。</p><h2 id="references"><a href="#references" class="headerlink" title="references"></a>references</h2><p>[1] 深入理解计算机系统<br>[2] <a href="www.hashcoding.net/2017/05/03/%E5%B8%B8%E7%94%A8Linux%E5%B7%A5%E5%85%B7%E6%95%B4%E7%90%86/">Objdump 使用</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;链接是把各种代码、数据收集起来组合成单一文件的过程，这个文件可以被加载到内存中执行。在实际开发中，会将项目分散成小的、更容易管理的模块，然后独立的修改和编译这些模块。链接则是将各个模块组合成可执行文件的过程。&lt;/p&gt;
&lt;p&gt;链接通常由链接器完成，不过现代编译器或编译环境已经
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://www.hashcoding.net/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>FastJson 踩坑记录</title>
    <link href="http://www.hashcoding.net/2017/05/13/FastJson-%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/"/>
    <id>http://www.hashcoding.net/2017/05/13/FastJson-踩坑记录/</id>
    <published>2017-05-13T12:49:05.000Z</published>
    <updated>2017-08-24T08:42:05.202Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>关键字: fastjson stackoverflow<br>本文使用的版本是 1.2.32</p></blockquote><p>fastjson 是阿里开源的Json格式化工具库。在项目中使用了fastjson，然后出现了一个奇怪的bug。程序在序列化的时候递归调用了我调用序列化函数的函数。简单点说就是序列化中递归地调用了自己，最后stackoverflow。</p><p>下面是是使用的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public class Host &#123;</span><br><span class="line">    private String name;</span><br><span class="line">    </span><br><span class="line">    public Host() &#123;&#125;</span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    public static Host factory(byte [] bytes) &#123;</span><br><span class="line">        return JSON.parseObjec(bytes, Host.class);</span><br><span class="line">    &#125;</span><br><span class="line">    public byte[] getJson() &#123;</span><br><span class="line">        return JSON.toJSONBytes(this);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在程序中某处使用<code>byte []bytes = host.getJson()</code>，出现的错误大概如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">java.lang.StackOverflowError</span><br><span class="line">at com.alibaba.fastjson.serializer.JSONSerializer.setContext(JSONSerializer.java:113)</span><br><span class="line">at com.alibaba.fastjson.serializer.JSONSerializer.setContext(JSONSerializer.java:109)</span><br><span class="line">at com.alibaba.fastjson.serializer.ASMSerializer_1_Host.write(Unknown Source)</span><br><span class="line">at com.alibaba.fastjson.serializer.JSONSerializer.write(JSONSerializer.java:275)</span><br><span class="line">at com.alibaba.fastjson.JSON.toJSONBytes(JSON.java:679)</span><br><span class="line">at com.alibaba.fastjson.JSON.toJSONBytes(JSON.java:605)</span><br><span class="line">at com.alibaba.fastjson.JSON.toJSONBytes(JSON.java:598)</span><br><span class="line">at xxx.Host.getBytes(Host.java:38)</span><br><span class="line">at com.alibaba.fastjson.serializer.ASMSerializer_1_Host.write(Unknown Source)</span><br><span class="line">at com.alibaba.fastjson.serializer.JSONSerializer.write(JSONSerializer.java:275)</span><br><span class="line">at com.alibaba.fastjson.JSON.toJSONBytes(JSON.java:679)</span><br><span class="line">at com.alibaba.fastjson.JSON.toJSONBytes(JSON.java:605)</span><br><span class="line">at com.alibaba.fastjson.JSON.toJSONBytes(JSON.java:598)</span><br><span class="line">at xxx.Host.getBytes(Host.java:38)</span><br></pre></td></tr></table></figure><p>分析调用堆栈发现fastjson在生成的<code>serializer.ASMSerializer\_1\_Host</code>中调用了<code>Host.getJson()</code>导致了递归。排除自己的错误后，就将代码定位到了fastjson中，应该是fastjson中出了问题。然后开始调试代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public static byte[] toJSONBytes(Object object, SerializeConfig config, int defaultFeatures, SerializerFeature... features) &#123;</span><br><span class="line">    SerializeWriter out = new SerializeWriter(null, defaultFeatures, features);</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        JSONSerializer serializer = new JSONSerializer(out, config);</span><br><span class="line">        serializer.write(object);</span><br><span class="line">        return out.toBytes(IOUtils.UTF8);</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>按照栈调用顺序来看，出错点应该在<code>serializer.write(object)</code>内部，继续深入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public final void write(Object object) &#123;</span><br><span class="line">    if (object == null) &#123;</span><br><span class="line">        out.writeNull();</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt; clazz = object.getClass();</span><br><span class="line">    ObjectSerializer writer = getObjectWriter(clazz);</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        writer.write(this, object, null, null, 0);</span><br><span class="line">    &#125; catch (IOException e) &#123;</span><br><span class="line">        throw new JSONException(e.getMessage(), e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里发现通过<code>getObjectWriter(clazz)</code>取得了<code>host</code>的<code>writer</code>，想必就是自动生成的<code>ASMSerializer_1_Host</code>实例。本来想进入<code>writer.write</code>中观察，没有源代码只好放弃。然后将目标放到<code>getObjectWriter</code>中，看看在<code>writer</code>实例构造过程中能不能找到点线索。</p><p>经过几层跳转，来到了真正的<code>getObjectWriter</code>中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br></pre></td><td class="code"><pre><span class="line">private ObjectSerializer getObjectWriter(Class&lt;?&gt; clazz, boolean create) &#123;</span><br><span class="line">    ObjectSerializer writer = serializers.get(clazz);</span><br><span class="line"></span><br><span class="line">    if (writer == null) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            final ClassLoader classLoader = Thread.currentThread().getContextClassLoader();</span><br><span class="line">            for (Object o : ServiceLoader.load(AutowiredObjectSerializer.class, classLoader)) &#123;</span><br><span class="line">                if (!(o instanceof AutowiredObjectSerializer)) &#123;</span><br><span class="line">                    continue;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                AutowiredObjectSerializer autowired = (AutowiredObjectSerializer) o;</span><br><span class="line">                for (Type forType : autowired.getAutowiredFor()) &#123;</span><br><span class="line">                    put(forType, autowired);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (ClassCastException ex) &#123;</span><br><span class="line">            // skip</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        writer = serializers.get(clazz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (writer == null) &#123;</span><br><span class="line">        final ClassLoader classLoader = JSON.class.getClassLoader();</span><br><span class="line">        if (classLoader != Thread.currentThread().getContextClassLoader()) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                for (Object o : ServiceLoader.load(AutowiredObjectSerializer.class, classLoader)) &#123;</span><br><span class="line"></span><br><span class="line">                    if (!(o instanceof AutowiredObjectSerializer)) &#123;</span><br><span class="line">                        continue;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    AutowiredObjectSerializer autowired = (AutowiredObjectSerializer) o;</span><br><span class="line">                    for (Type forType : autowired.getAutowiredFor()) &#123;</span><br><span class="line">                        put(forType, autowired);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; catch (ClassCastException ex) &#123;</span><br><span class="line">                // skip</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            writer = serializers.get(clazz);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    if (writer == null) &#123;</span><br><span class="line">        if (Map.class.isAssignableFrom(clazz)) &#123;</span><br><span class="line">            put(clazz, MapSerializer.instance);</span><br><span class="line">        &#125; else if (List.class.isAssignableFrom(clazz)) &#123;</span><br><span class="line">            put(clazz, ListSerializer.instance);</span><br><span class="line">        &#125; else if (Collection.class.isAssignableFrom(clazz)) &#123;</span><br><span class="line">            put(clazz, CollectionCodec.instance);</span><br><span class="line">        &#125; else if (Date.class.isAssignableFrom(clazz)) &#123;</span><br><span class="line">            put(clazz, DateCodec.instance);</span><br><span class="line">        &#125; else if (JSONAware.class.isAssignableFrom(clazz)) &#123;</span><br><span class="line">            put(clazz, JSONAwareSerializer.instance);</span><br><span class="line">        &#125; else if (JSONSerializable.class.isAssignableFrom(clazz)) &#123;</span><br><span class="line">            put(clazz, JSONSerializableSerializer.instance);</span><br><span class="line">        &#125; else if (JSONStreamAware.class.isAssignableFrom(clazz)) &#123;</span><br><span class="line">            put(clazz, MiscCodec.instance);</span><br><span class="line">        &#125; else if (clazz.isEnum() || (clazz.getSuperclass() != null &amp;&amp; clazz.getSuperclass().isEnum())) &#123;</span><br><span class="line">            JSONType jsonType = clazz.getAnnotation(JSONType.class);</span><br><span class="line">            if (jsonType != null &amp;&amp; jsonType.serializeEnumAsJavaBean()) &#123;</span><br><span class="line">                put(clazz, createJavaBeanSerializer(clazz));</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                put(clazz, EnumSerializer.instance);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else if (clazz.isArray()) &#123;</span><br><span class="line">            Class&lt;?&gt; componentType = clazz.getComponentType();</span><br><span class="line">            ObjectSerializer compObjectSerializer = getObjectWriter(componentType);</span><br><span class="line">            put(clazz, new ArraySerializer(componentType, compObjectSerializer));</span><br><span class="line">        &#125; else if (Throwable.class.isAssignableFrom(clazz)) &#123;</span><br><span class="line">            SerializeBeanInfo beanInfo = TypeUtils.buildBeanInfo(clazz, null, propertyNamingStrategy);</span><br><span class="line">            beanInfo.features |= SerializerFeature.WriteClassName.mask;</span><br><span class="line">            put(clazz, new JavaBeanSerializer(beanInfo));</span><br><span class="line">        &#125; else if (TimeZone.class.isAssignableFrom(clazz) || Map.Entry.class.isAssignableFrom(clazz)) &#123;</span><br><span class="line">            put(clazz, MiscCodec.instance);</span><br><span class="line">        &#125; else if (Appendable.class.isAssignableFrom(clazz)) &#123;</span><br><span class="line">            put(clazz, AppendableSerializer.instance);</span><br><span class="line">        &#125; else if (Charset.class.isAssignableFrom(clazz)) &#123;</span><br><span class="line">            put(clazz, ToStringSerializer.instance);</span><br><span class="line">        &#125; else if (Enumeration.class.isAssignableFrom(clazz)) &#123;</span><br><span class="line">            put(clazz, EnumerationSerializer.instance);</span><br><span class="line">        &#125; else if (Calendar.class.isAssignableFrom(clazz) //</span><br><span class="line">                || XMLGregorianCalendar.class.isAssignableFrom(clazz)) &#123;</span><br><span class="line">            put(clazz, CalendarCodec.instance);</span><br><span class="line">        &#125; else if (Clob.class.isAssignableFrom(clazz)) &#123;</span><br><span class="line">            put(clazz, ClobSeriliazer.instance);</span><br><span class="line">        &#125; else if (TypeUtils.isPath(clazz)) &#123;</span><br><span class="line">            put(clazz, ToStringSerializer.instance);</span><br><span class="line">        &#125; else if (Iterator.class.isAssignableFrom(clazz)) &#123;</span><br><span class="line">            put(clazz, MiscCodec.instance);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            String className = clazz.getName();</span><br><span class="line">            if (className.startsWith(&quot;java.awt.&quot;) //</span><br><span class="line">                &amp;&amp; AwtCodec.support(clazz) //</span><br><span class="line">            ) &#123;</span><br><span class="line">                // awt</span><br><span class="line">                if (!awtError) &#123;</span><br><span class="line">                    try &#123;</span><br><span class="line">                        put(Class.forName(&quot;java.awt.Color&quot;), AwtCodec.instance);</span><br><span class="line">                        put(Class.forName(&quot;java.awt.Font&quot;), AwtCodec.instance);</span><br><span class="line">                        put(Class.forName(&quot;java.awt.Point&quot;), AwtCodec.instance);</span><br><span class="line">                        put(Class.forName(&quot;java.awt.Rectangle&quot;), AwtCodec.instance);</span><br><span class="line">                    &#125; catch (Throwable e) &#123;</span><br><span class="line">                        awtError = true;</span><br><span class="line">                        // skip</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                return  AwtCodec.instance;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            // jdk8</span><br><span class="line">            if ((!jdk8Error) //</span><br><span class="line">                &amp;&amp; (className.startsWith(&quot;java.time.&quot;) //</span><br><span class="line">                    || className.startsWith(&quot;java.util.Optional&quot;) //</span><br><span class="line">                    || className.equals(&quot;java.util.concurrent.atomic.LongAdder&quot;)</span><br><span class="line">                    || className.equals(&quot;java.util.concurrent.atomic.DoubleAdder&quot;)</span><br><span class="line">                )) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    put(Class.forName(&quot;java.time.LocalDateTime&quot;), Jdk8DateCodec.instance);</span><br><span class="line">                    put(Class.forName(&quot;java.time.LocalDate&quot;), Jdk8DateCodec.instance);</span><br><span class="line">                    put(Class.forName(&quot;java.time.LocalTime&quot;), Jdk8DateCodec.instance);</span><br><span class="line">                    put(Class.forName(&quot;java.time.ZonedDateTime&quot;), Jdk8DateCodec.instance);</span><br><span class="line">                    put(Class.forName(&quot;java.time.OffsetDateTime&quot;), Jdk8DateCodec.instance);</span><br><span class="line">                    put(Class.forName(&quot;java.time.OffsetTime&quot;), Jdk8DateCodec.instance);</span><br><span class="line">                    put(Class.forName(&quot;java.time.ZoneOffset&quot;), Jdk8DateCodec.instance);</span><br><span class="line">                    put(Class.forName(&quot;java.time.ZoneRegion&quot;), Jdk8DateCodec.instance);</span><br><span class="line">                    put(Class.forName(&quot;java.time.Period&quot;), Jdk8DateCodec.instance);</span><br><span class="line">                    put(Class.forName(&quot;java.time.Duration&quot;), Jdk8DateCodec.instance);</span><br><span class="line">                    put(Class.forName(&quot;java.time.Instant&quot;), Jdk8DateCodec.instance);</span><br><span class="line"></span><br><span class="line">                    put(Class.forName(&quot;java.util.Optional&quot;), OptionalCodec.instance);</span><br><span class="line">                    put(Class.forName(&quot;java.util.OptionalDouble&quot;), OptionalCodec.instance);</span><br><span class="line">                    put(Class.forName(&quot;java.util.OptionalInt&quot;), OptionalCodec.instance);</span><br><span class="line">                    put(Class.forName(&quot;java.util.OptionalLong&quot;), OptionalCodec.instance);</span><br><span class="line"></span><br><span class="line">                    put(Class.forName(&quot;java.util.concurrent.atomic.LongAdder&quot;), AdderSerializer.instance);</span><br><span class="line">                    put(Class.forName(&quot;java.util.concurrent.atomic.DoubleAdder&quot;), AdderSerializer.instance);</span><br><span class="line">                    </span><br><span class="line">                    writer = serializers.get(clazz);</span><br><span class="line">                    if (writer != null) &#123;</span><br><span class="line">                        return writer;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; catch (Throwable e) &#123;</span><br><span class="line">                    // skip</span><br><span class="line">                    jdk8Error = true;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            if ((!oracleJdbcError) //</span><br><span class="line">                &amp;&amp; className.startsWith(&quot;oracle.sql.&quot;)) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    put(Class.forName(&quot;oracle.sql.DATE&quot;), DateCodec.instance);</span><br><span class="line">                    put(Class.forName(&quot;oracle.sql.TIMESTAMP&quot;), DateCodec.instance);</span><br><span class="line">                    </span><br><span class="line">                    writer = serializers.get(clazz);</span><br><span class="line">                    if (writer != null) &#123;</span><br><span class="line">                        return writer;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; catch (Throwable e) &#123;</span><br><span class="line">                    // skip</span><br><span class="line">                    oracleJdbcError = true;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            if ((!springfoxError) //</span><br><span class="line">                &amp;&amp; className.equals(&quot;springfox.documentation.spring.web.json.Json&quot;)) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    put(Class.forName(&quot;springfox.documentation.spring.web.json.Json&quot;), //</span><br><span class="line">                        SwaggerJsonSerializer.instance);</span><br><span class="line">                    </span><br><span class="line">                    writer = serializers.get(clazz);</span><br><span class="line">                    if (writer != null) &#123;</span><br><span class="line">                        return writer;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; catch (ClassNotFoundException e) &#123;</span><br><span class="line">                    // skip</span><br><span class="line">                    springfoxError = true;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if ((!guavaError) //</span><br><span class="line">                    &amp;&amp; className.startsWith(&quot;com.google.common.collect.&quot;)) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    put(Class.forName(&quot;com.google.common.collect.HashMultimap&quot;), //</span><br><span class="line">                            GuavaCodec.instance);</span><br><span class="line">                    put(Class.forName(&quot;com.google.common.collect.LinkedListMultimap&quot;), //</span><br><span class="line">                            GuavaCodec.instance);</span><br><span class="line">                    put(Class.forName(&quot;com.google.common.collect.ArrayListMultimap&quot;), //</span><br><span class="line">                            GuavaCodec.instance);</span><br><span class="line">                    put(Class.forName(&quot;com.google.common.collect.TreeMultimap&quot;), //</span><br><span class="line">                            GuavaCodec.instance);</span><br><span class="line"></span><br><span class="line">                    writer = serializers.get(clazz);</span><br><span class="line">                    if (writer != null) &#123;</span><br><span class="line">                        return writer;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; catch (ClassNotFoundException e) &#123;</span><br><span class="line">                    // skip</span><br><span class="line">                    guavaError = true;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if (className.equals(&quot;net.sf.json.JSONNull&quot;)) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    put(Class.forName(&quot;net.sf.json.JSONNull&quot;), //</span><br><span class="line">                            MiscCodec.instance);</span><br><span class="line">                &#125; catch (ClassNotFoundException e) &#123;</span><br><span class="line">                    // skip</span><br><span class="line">                &#125;</span><br><span class="line">                writer = serializers.get(clazz);</span><br><span class="line">                if (writer != null) &#123;</span><br><span class="line">                    return writer;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if (TypeUtils.isProxy(clazz)) &#123;</span><br><span class="line">                Class&lt;?&gt; superClazz = clazz.getSuperclass();</span><br><span class="line"></span><br><span class="line">                ObjectSerializer superWriter = getObjectWriter(superClazz);</span><br><span class="line">                put(clazz, superWriter);</span><br><span class="line">                return superWriter;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if (create) &#123;</span><br><span class="line">                put(clazz, createJavaBeanSerializer(clazz));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        writer = serializers.get(clazz);</span><br><span class="line">    &#125;</span><br><span class="line">    return writer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单扫描代码逻辑，发现<code>writer</code>是通过<code>serializers.get(clazz)</code>获取的。而代码中分别从<code>Thread.currentThread().getContextClassLoader</code>、<code>JSON.class.getClassLoader</code>以及最后对一下常见类分析来填充<code>serializers</code>。最后一种办法的末尾，走到了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">put(clazz, createJavaBeanSerializer(clazz));</span><br></pre></td></tr></table></figure><p>可以发现逻辑是实在找不到，使用<code>createJavaBeanSerializer(clazz)</code>来创建<code>clazz</code>对应的<code>writer</code>。看来我们的目标应该是这个<code>createJavaBeanSerializer</code>函数，所以进一步深入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">private final ObjectSerializer createJavaBeanSerializer(Class&lt;?&gt; clazz) &#123;</span><br><span class="line">    SerializeBeanInfo beanInfo = TypeUtils.buildBeanInfo(clazz, null, propertyNamingStrategy, fieldBased);</span><br><span class="line">    if (beanInfo.fields.length == 0 &amp;&amp; Iterable.class.isAssignableFrom(clazz)) &#123;</span><br><span class="line">        return MiscCodec.instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return createJavaBeanSerializer(beanInfo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先调用<code>TypeUtils.buildBeanInfo</code>来生成<code>SerializerBeanInfo</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">public static SerializeBeanInfo buildBeanInfo(Class&lt;?&gt; beanType //</span><br><span class="line">        , Map&lt;String, String&gt; aliasMap //</span><br><span class="line">        , PropertyNamingStrategy propertyNamingStrategy //</span><br><span class="line">        , boolean fieldBased //</span><br><span class="line">) &#123;</span><br><span class="line">    </span><br><span class="line">    JSONType jsonType = beanType.getAnnotation(JSONType.class);</span><br><span class="line"></span><br><span class="line">    // fieldName,field ，先生成fieldName的快照，减少之后的findField的轮询</span><br><span class="line">    Map&lt;String, Field&gt; fieldCacheMap = new HashMap&lt;String, Field&gt;();</span><br><span class="line">    ParserConfig.parserAllFieldToCache(beanType, fieldCacheMap);</span><br><span class="line"></span><br><span class="line">    List&lt;FieldInfo&gt; fieldInfoList = fieldBased</span><br><span class="line">            ? computeGettersWithFieldBase(beanType, aliasMap, false, propertyNamingStrategy) //</span><br><span class="line">            : computeGetters(beanType, jsonType, aliasMap, fieldCacheMap, false, propertyNamingStrategy);</span><br><span class="line">    FieldInfo[] fields = new FieldInfo[fieldInfoList.size()];</span><br><span class="line">    fieldInfoList.toArray(fields);</span><br><span class="line">    </span><br><span class="line">    String[] orders = null;</span><br><span class="line"></span><br><span class="line">    final int features;</span><br><span class="line">    String typeName = null;</span><br><span class="line">    if (jsonType != null) &#123;</span><br><span class="line">        orders = jsonType.orders();</span><br><span class="line">        typeName = jsonType.typeName();</span><br><span class="line">        if (typeName.length() == 0) &#123;</span><br><span class="line">            typeName = null;</span><br><span class="line">        &#125;</span><br><span class="line">        features = SerializerFeature.of(jsonType.serialzeFeatures());</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        features = 0;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    FieldInfo[] sortedFields;</span><br><span class="line">    List&lt;FieldInfo&gt; sortedFieldList;</span><br><span class="line">    if (orders != null &amp;&amp; orders.length != 0) &#123;</span><br><span class="line">        sortedFieldList = fieldBased</span><br><span class="line">                ? computeGettersWithFieldBase(beanType, aliasMap, true, propertyNamingStrategy) //</span><br><span class="line">                : computeGetters(beanType, jsonType, aliasMap,fieldCacheMap, true, propertyNamingStrategy);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        sortedFieldList = new ArrayList&lt;FieldInfo&gt;(fieldInfoList);</span><br><span class="line">        Collections.sort(sortedFieldList);</span><br><span class="line">    &#125;</span><br><span class="line">    sortedFields = new FieldInfo[sortedFieldList.size()];</span><br><span class="line">    sortedFieldList.toArray(sortedFields);</span><br><span class="line">    </span><br><span class="line">    if (Arrays.equals(sortedFields, fields)) &#123;</span><br><span class="line">        sortedFields = fields;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    return new SerializeBeanInfo(beanType, jsonType, typeName, features, fields, sortedFields);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中<code>parserAllFieldToCache</code>将字段保存起来，减少访问次数。紧接着设置<code>fieldInfoList</code>的值，此时<code>fieldBase</code>为<code>false</code>，所以进入了<code>computeGetters</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br></pre></td><td class="code"><pre><span class="line">public static List&lt;FieldInfo&gt; computeGetters(Class&lt;?&gt; clazz, //</span><br><span class="line">                                            JSONType jsonType, //</span><br><span class="line">                                            Map&lt;String, String&gt; aliasMap, //</span><br><span class="line">                                            Map&lt;String, Field&gt; fieldCacheMap, //</span><br><span class="line">                                            boolean sorted, //</span><br><span class="line">                                            PropertyNamingStrategy propertyNamingStrategy //</span><br><span class="line">) &#123;</span><br><span class="line">    Map&lt;String, FieldInfo&gt; fieldInfoMap = new LinkedHashMap&lt;String, FieldInfo&gt;();</span><br><span class="line"></span><br><span class="line">    for (Method method : clazz.getMethods()) &#123;</span><br><span class="line">        String methodName = method.getName();</span><br><span class="line">        int ordinal = 0, serialzeFeatures = 0, parserFeatures = 0;</span><br><span class="line">        String label = null;</span><br><span class="line"></span><br><span class="line">        if (Modifier.isStatic(method.getModifiers())) &#123;</span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (method.getReturnType().equals(Void.TYPE)) &#123;</span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (method.getParameterTypes().length != 0) &#123;</span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (method.getReturnType() == ClassLoader.class) &#123;</span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (method.getName().equals(&quot;getMetaClass&quot;)</span><br><span class="line">            &amp;&amp; method.getReturnType().getName().equals(&quot;groovy.lang.MetaClass&quot;)) &#123;</span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        JSONField annotation = method.getAnnotation(JSONField.class);</span><br><span class="line"></span><br><span class="line">        if (annotation == null) &#123;</span><br><span class="line">            annotation = getSuperMethodAnnotation(clazz, method);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (annotation != null) &#123;</span><br><span class="line">            if (!annotation.serialize()) &#123;</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            ordinal = annotation.ordinal();</span><br><span class="line">            serialzeFeatures = SerializerFeature.of(annotation.serialzeFeatures());</span><br><span class="line">            parserFeatures = Feature.of(annotation.parseFeatures());</span><br><span class="line"></span><br><span class="line">            if (annotation.name().length() != 0) &#123;</span><br><span class="line">                String propertyName = annotation.name();</span><br><span class="line"></span><br><span class="line">                if (aliasMap != null) &#123;</span><br><span class="line">                    propertyName = aliasMap.get(propertyName);</span><br><span class="line">                    if (propertyName == null) &#123;</span><br><span class="line">                        continue;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                FieldInfo fieldInfo = new FieldInfo(propertyName, method, null, clazz, null, ordinal,</span><br><span class="line">                                                    serialzeFeatures, parserFeatures, annotation, null, label);</span><br><span class="line">                fieldInfoMap.put(propertyName, fieldInfo);</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if (annotation.label().length() != 0) &#123;</span><br><span class="line">                label = annotation.label();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (methodName.startsWith(&quot;get&quot;)) &#123;</span><br><span class="line">            if (methodName.length() &lt; 4) &#123;</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if (methodName.equals(&quot;getClass&quot;)) &#123;</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if (methodName.equals(&quot;getDeclaringClass&quot;) &amp;&amp; clazz.isEnum()) &#123;</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            char c3 = methodName.charAt(3);</span><br><span class="line"></span><br><span class="line">            String propertyName;</span><br><span class="line">            if (Character.isUpperCase(c3) //</span><br><span class="line">                || c3 &gt; 512 // for unicode method name</span><br><span class="line">            ) &#123;</span><br><span class="line">            if (compatibleWithJavaBean) &#123;</span><br><span class="line">                    propertyName = decapitalize(methodName.substring(3));</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    propertyName = Character.toLowerCase(methodName.charAt(3)) + methodName.substring(4);</span><br><span class="line">                &#125;</span><br><span class="line">                propertyName = getPropertyNameByCompatibleFieldName(fieldCacheMap, methodName,  propertyName,3);</span><br><span class="line">            &#125; else if (c3 == &apos;_&apos;) &#123;</span><br><span class="line">                propertyName = methodName.substring(4);</span><br><span class="line">            &#125; else if (c3 == &apos;f&apos;) &#123;</span><br><span class="line">                propertyName = methodName.substring(3);</span><br><span class="line">            &#125; else if (methodName.length() &gt;= 5 &amp;&amp; Character.isUpperCase(methodName.charAt(4))) &#123;</span><br><span class="line">                propertyName = decapitalize(methodName.substring(3));</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            boolean ignore = isJSONTypeIgnore(clazz, propertyName);</span><br><span class="line"></span><br><span class="line">            if (ignore) &#123;</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">            //假如bean的field很多的情况一下，轮询时将大大降低效率</span><br><span class="line">            Field field = ParserConfig.getFieldFromCache(propertyName, fieldCacheMap);</span><br><span class="line"></span><br><span class="line">            if (field == null &amp;&amp; propertyName.length() &gt; 1) &#123;</span><br><span class="line">                char ch = propertyName.charAt(1);</span><br><span class="line">                if (ch &gt;= &apos;A&apos; &amp;&amp; ch &lt;= &apos;Z&apos;) &#123;</span><br><span class="line">                    String javaBeanCompatiblePropertyName = decapitalize(methodName.substring(3));</span><br><span class="line">                    field = ParserConfig.getFieldFromCache(javaBeanCompatiblePropertyName, fieldCacheMap);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            JSONField fieldAnnotation = null;</span><br><span class="line">            if (field != null) &#123;</span><br><span class="line">                fieldAnnotation = field.getAnnotation(JSONField.class);</span><br><span class="line"></span><br><span class="line">                if (fieldAnnotation != null) &#123;</span><br><span class="line">                    if (!fieldAnnotation.serialize()) &#123;</span><br><span class="line">                        continue;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    ordinal = fieldAnnotation.ordinal();</span><br><span class="line">                    serialzeFeatures = SerializerFeature.of(fieldAnnotation.serialzeFeatures());</span><br><span class="line">                    parserFeatures = Feature.of(fieldAnnotation.parseFeatures());</span><br><span class="line"></span><br><span class="line">                    if (fieldAnnotation.name().length() != 0) &#123;</span><br><span class="line">                        propertyName = fieldAnnotation.name();</span><br><span class="line"></span><br><span class="line">                        if (aliasMap != null) &#123;</span><br><span class="line">                            propertyName = aliasMap.get(propertyName);</span><br><span class="line">                            if (propertyName == null) &#123;</span><br><span class="line">                                continue;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    if (fieldAnnotation.label().length() != 0) &#123;</span><br><span class="line">                        label = fieldAnnotation.label();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if (aliasMap != null) &#123;</span><br><span class="line">                propertyName = aliasMap.get(propertyName);</span><br><span class="line">                if (propertyName == null) &#123;</span><br><span class="line">                    continue;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if (propertyNamingStrategy != null) &#123;</span><br><span class="line">                propertyName = propertyNamingStrategy.translate(propertyName);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            FieldInfo fieldInfo = new FieldInfo(propertyName, method, field, clazz, null, ordinal, serialzeFeatures, parserFeatures,</span><br><span class="line">                                                annotation, fieldAnnotation, label);</span><br><span class="line">            fieldInfoMap.put(propertyName, fieldInfo);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (methodName.startsWith(&quot;is&quot;)) &#123;</span><br><span class="line">            if (methodName.length() &lt; 3) &#123;</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if (method.getReturnType() != Boolean.TYPE</span><br><span class="line">                    &amp;&amp; method.getReturnType() != Boolean.class) &#123;</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            char c2 = methodName.charAt(2);</span><br><span class="line"></span><br><span class="line">            String propertyName;</span><br><span class="line">            if (Character.isUpperCase(c2)) &#123;</span><br><span class="line">                if (compatibleWithJavaBean) &#123;</span><br><span class="line">                    propertyName = decapitalize(methodName.substring(2));</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    propertyName = Character.toLowerCase(methodName.charAt(2)) + methodName.substring(3);</span><br><span class="line">                &#125;</span><br><span class="line">                propertyName = getPropertyNameByCompatibleFieldName(fieldCacheMap, methodName,  propertyName,2);</span><br><span class="line">            &#125; else if (c2 == &apos;_&apos;) &#123;</span><br><span class="line">                propertyName = methodName.substring(3);</span><br><span class="line">            &#125; else if (c2 == &apos;f&apos;) &#123;</span><br><span class="line">                propertyName = methodName.substring(2);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            boolean ignore = isJSONTypeIgnore(clazz, propertyName);</span><br><span class="line"></span><br><span class="line">            if (ignore) &#123;</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Field field = ParserConfig.getFieldFromCache(propertyName,fieldCacheMap);</span><br><span class="line"></span><br><span class="line">            if (field == null) &#123;</span><br><span class="line">                field = ParserConfig.getFieldFromCache(methodName,fieldCacheMap);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            JSONField fieldAnnotation = null;</span><br><span class="line">            if (field != null) &#123;</span><br><span class="line">                fieldAnnotation = field.getAnnotation(JSONField.class);</span><br><span class="line"></span><br><span class="line">                if (fieldAnnotation != null) &#123;</span><br><span class="line">                    if (!fieldAnnotation.serialize()) &#123;</span><br><span class="line">                        continue;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    ordinal = fieldAnnotation.ordinal();</span><br><span class="line">                    serialzeFeatures = SerializerFeature.of(fieldAnnotation.serialzeFeatures());</span><br><span class="line">                    parserFeatures = Feature.of(fieldAnnotation.parseFeatures());</span><br><span class="line"></span><br><span class="line">                    if (fieldAnnotation.name().length() != 0) &#123;</span><br><span class="line">                        propertyName = fieldAnnotation.name();</span><br><span class="line"></span><br><span class="line">                        if (aliasMap != null) &#123;</span><br><span class="line">                            propertyName = aliasMap.get(propertyName);</span><br><span class="line">                            if (propertyName == null) &#123;</span><br><span class="line">                                continue;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    if (fieldAnnotation.label().length() != 0) &#123;</span><br><span class="line">                        label = fieldAnnotation.label();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if (aliasMap != null) &#123;</span><br><span class="line">                propertyName = aliasMap.get(propertyName);</span><br><span class="line">                if (propertyName == null) &#123;</span><br><span class="line">                    continue;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if (propertyNamingStrategy != null) &#123;</span><br><span class="line">                propertyName = propertyNamingStrategy.translate(propertyName);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            //优先选择get</span><br><span class="line">            if (fieldInfoMap.containsKey(propertyName)) &#123;</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            FieldInfo fieldInfo = new FieldInfo(propertyName, method, field, clazz, null, ordinal, serialzeFeatures, parserFeatures,</span><br><span class="line">                                                annotation, fieldAnnotation, label);</span><br><span class="line">            fieldInfoMap.put(propertyName, fieldInfo);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Field[] fields = clazz.getFields();</span><br><span class="line">    computeFields(clazz, aliasMap, propertyNamingStrategy, fieldInfoMap, fields);</span><br><span class="line"></span><br><span class="line">    return getFieldInfos(clazz, sorted, fieldInfoMap);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里针对<code>clazz</code>的每一个方法进行了判断，由于只有<code>get</code>和<code>set</code>开头的函数，所以只关心<code>methodName.startsWith(&quot;get&quot;)</code>分支。最后进入了<code>getPropertyNameByCompatibleFieldName</code>所在的分支，并将<code>propertyName</code>设置为对应<code>get</code>的属性名。在<code>getPropertyNameByCompatibleFieldName</code>函数中，而<code>compatibleWithFieldName</code>设置为<code>false</code>所以相当于跳过了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">private static String getPropertyNameByCompatibleFieldName(Map&lt;String, Field&gt; fieldCacheMap, String methodName,</span><br><span class="line">                                                            String propertyName,int fromIdx) &#123;</span><br><span class="line">    if (compatibleWithFieldName)&#123;</span><br><span class="line">            if (!fieldCacheMap.containsKey(propertyName))&#123;</span><br><span class="line">                String tempPropertyName=methodName.substring(fromIdx);</span><br><span class="line">                return  fieldCacheMap.containsKey(tempPropertyName)?tempPropertyName:propertyName;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    return propertyName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续分析，程序进入<code>isJSONTypeIgnore</code>根据注解判断是否跳过该字段，我的例子中不关心。紧接着调用了<code>getFieldFromCache</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">public static Field getFieldFromCache(String fieldName, Map&lt;String, Field&gt; fieldCacheMap) &#123;</span><br><span class="line">    Field field = fieldCacheMap.get(fieldName);</span><br><span class="line"></span><br><span class="line">    if (field == null) &#123;</span><br><span class="line">        field = fieldCacheMap.get(&quot;_&quot; + fieldName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (field == null) &#123;</span><br><span class="line">        field = fieldCacheMap.get(&quot;m_&quot; + fieldName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (field == null) &#123;</span><br><span class="line">        char c0 = fieldName.charAt(0);</span><br><span class="line">        if (c0 &gt;= &apos;a&apos; &amp;&amp; c0 &lt;= &apos;z&apos;) &#123;</span><br><span class="line">            char[] chars = fieldName.toCharArray();</span><br><span class="line">            chars[0] -= 32; // lower</span><br><span class="line">            String fieldNameX = new String(chars);</span><br><span class="line">            field = fieldCacheMap.get(fieldNameX);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return field;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里按照刚才取出的方法名来查找字段，如果失败则加上<code>_</code>或者<code>m_</code>之类的方法继续判断。返回继续分析，在做了部分如注解别名之类的处理后，将分析得到的结果生成一个<code>FieldInfo</code>，并保存在<code>fieldInfoMap</code>中。最后调用<code>computeFields</code>进一步处理一些<code>public</code>属性的<code>fields</code>数据。最后经过<code>getFieldInfos</code>处理后，将得到的<code>List&lt;FieldInfo&gt;</code>中，返回上一级。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">private static void computeFields(</span><br><span class="line">        Class&lt;?&gt; clazz, //</span><br><span class="line">        Map&lt;String, String&gt; aliasMap, //</span><br><span class="line">        PropertyNamingStrategy propertyNamingStrategy, //</span><br><span class="line">        Map&lt;String, FieldInfo&gt; fieldInfoMap, //</span><br><span class="line">        Field[] fields) &#123;</span><br><span class="line"></span><br><span class="line">    for (Field field : fields) &#123;</span><br><span class="line">        if (Modifier.isStatic(field.getModifiers())) &#123;</span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        JSONField fieldAnnotation = field.getAnnotation(JSONField.class);</span><br><span class="line"></span><br><span class="line">        int ordinal = 0, serialzeFeatures = 0, parserFeatures = 0;</span><br><span class="line">        String propertyName = field.getName();</span><br><span class="line">        String label = null;</span><br><span class="line">        if (fieldAnnotation != null) &#123;</span><br><span class="line">            if (!fieldAnnotation.serialize()) &#123;</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            ordinal = fieldAnnotation.ordinal();</span><br><span class="line">            serialzeFeatures = SerializerFeature.of(fieldAnnotation.serialzeFeatures());</span><br><span class="line">            parserFeatures = Feature.of(fieldAnnotation.parseFeatures());</span><br><span class="line"></span><br><span class="line">            if (fieldAnnotation.name().length() != 0) &#123;</span><br><span class="line">                propertyName = fieldAnnotation.name();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if (fieldAnnotation.label().length() != 0) &#123;</span><br><span class="line">                label = fieldAnnotation.label();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (aliasMap != null) &#123;</span><br><span class="line">            propertyName = aliasMap.get(propertyName);</span><br><span class="line">            if (propertyName == null) &#123;</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (propertyNamingStrategy != null) &#123;</span><br><span class="line">            propertyName = propertyNamingStrategy.translate(propertyName);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (!fieldInfoMap.containsKey(propertyName)) &#123;</span><br><span class="line">            FieldInfo fieldInfo = new FieldInfo(propertyName, null, field, clazz, null, ordinal, serialzeFeatures, parserFeatures,</span><br><span class="line">                                                null, fieldAnnotation, label);</span><br><span class="line">            fieldInfoMap.put(propertyName, fieldInfo);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析到这里，可以发现在<code>fieldInfoList</code>中实际上值：<code>name</code>,<code>json</code>。看到这里相比也能猜出大概了，现在继续跟踪。回到<code>buildBeanInfo</code>中，将刚才得到的<code>fieldInfoList</code>构造为<code>SerializeBeanInfo</code>并返回。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line">public ObjectSerializer createJavaBeanSerializer(SerializeBeanInfo beanInfo) &#123;</span><br><span class="line">    JSONType jsonType = beanInfo.jsonType;</span><br><span class="line">    </span><br><span class="line">    if (jsonType != null) &#123;</span><br><span class="line">        Class&lt;?&gt; serializerClass = jsonType.serializer();</span><br><span class="line">        if (serializerClass != Void.class) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                Object seralizer = serializerClass.newInstance();</span><br><span class="line">                if (seralizer instanceof ObjectSerializer) &#123;</span><br><span class="line">                    return (ObjectSerializer) seralizer;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; catch (Throwable e) &#123;</span><br><span class="line">                // skip</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        if (jsonType.asm() == false) &#123;</span><br><span class="line">            asm = false;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        for (SerializerFeature feature : jsonType.serialzeFeatures()) &#123;</span><br><span class="line">            if (SerializerFeature.WriteNonStringValueAsString == feature //</span><br><span class="line">                    || SerializerFeature.WriteEnumUsingToString == feature //</span><br><span class="line">                    || SerializerFeature.NotWriteDefaultValue == feature) &#123;</span><br><span class="line">                asm = false;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    Class&lt;?&gt; clazz = beanInfo.beanType;</span><br><span class="line">    if (!Modifier.isPublic(beanInfo.beanType.getModifiers())) &#123;</span><br><span class="line">        return new JavaBeanSerializer(beanInfo);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    boolean asm = this.asm &amp;&amp; !fieldBased;</span><br><span class="line"></span><br><span class="line">    if (asm &amp;&amp; asmFactory.classLoader.isExternalClass(clazz)</span><br><span class="line">            || clazz == Serializable.class || clazz == Object.class) &#123;</span><br><span class="line">        asm = false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (asm &amp;&amp; !ASMUtils.checkName(clazz.getSimpleName())) &#123;</span><br><span class="line">        asm = false;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    if (asm) &#123;</span><br><span class="line">        for(FieldInfo fieldInfo : beanInfo.fields)&#123;</span><br><span class="line">            Field field = fieldInfo.field;</span><br><span class="line">            if (field != null &amp;&amp; !field.getType().equals(fieldInfo.fieldClass)) &#123;</span><br><span class="line">                asm = false;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Method method = fieldInfo.method;</span><br><span class="line">            if (method != null &amp;&amp; !method.getReturnType().equals(fieldInfo.fieldClass)) &#123;</span><br><span class="line">                asm = false;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            JSONField annotation = fieldInfo.getAnnotation();</span><br><span class="line">            </span><br><span class="line">            if (annotation == null) &#123;</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if ((!ASMUtils.checkName(annotation.name())) //</span><br><span class="line">                    || annotation.format().length() != 0</span><br><span class="line">                    || annotation.jsonDirect()</span><br><span class="line">                    || annotation.serializeUsing() != Void.class</span><br><span class="line">                    || annotation.unwrapped()</span><br><span class="line">                    ) &#123;</span><br><span class="line">                asm = false;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            for (SerializerFeature feature : annotation.serialzeFeatures()) &#123;</span><br><span class="line">                if (SerializerFeature.WriteNonStringValueAsString == feature //</span><br><span class="line">                        || SerializerFeature.WriteEnumUsingToString == feature //</span><br><span class="line">                        || SerializerFeature.NotWriteDefaultValue == feature) &#123;</span><br><span class="line">                    asm = false;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    if (asm) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            ObjectSerializer asmSerializer = createASMSerializer(beanInfo);</span><br><span class="line">            if (asmSerializer != null) &#123;</span><br><span class="line">                return asmSerializer;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (ClassFormatError e) &#123;</span><br><span class="line">            // skip</span><br><span class="line">        &#125; catch (ClassCastException e) &#123;</span><br><span class="line">            // skip</span><br><span class="line">        &#125; catch (Throwable e) &#123;</span><br><span class="line">            throw new JSONException(&quot;create asm serializer error, class &quot;</span><br><span class="line">                    + clazz, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return new JavaBeanSerializer(beanInfo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过处理后进入了<code>createASMSerializer</code>，其中调用<code>createJavaBeanSerializer</code>来创建具体的<code>writer</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br></pre></td><td class="code"><pre><span class="line">public JavaBeanSerializer createJavaBeanSerializer(SerializeBeanInfo beanInfo) throws Exception &#123;</span><br><span class="line">    Class&lt;?&gt; clazz = beanInfo.beanType;</span><br><span class="line">    if (clazz.isPrimitive()) &#123;</span><br><span class="line">        throw new JSONException(&quot;unsupportd class &quot; + clazz.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    JSONType jsonType = clazz.getAnnotation(JSONType.class);</span><br><span class="line"></span><br><span class="line">    FieldInfo[] unsortedGetters = beanInfo.fields;;</span><br><span class="line"></span><br><span class="line">    for (FieldInfo fieldInfo : unsortedGetters) &#123;</span><br><span class="line">        if (fieldInfo.field == null //</span><br><span class="line">            &amp;&amp; fieldInfo.method != null //</span><br><span class="line">            &amp;&amp; fieldInfo.method.getDeclaringClass().isInterface()) &#123;</span><br><span class="line">            return new JavaBeanSerializer(clazz);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    FieldInfo[] getters = beanInfo.sortedFields;</span><br><span class="line"></span><br><span class="line">    boolean nativeSorted = beanInfo.sortedFields == beanInfo.fields;</span><br><span class="line"></span><br><span class="line">    if (getters.length &gt; 256) &#123;</span><br><span class="line">        return new JavaBeanSerializer(clazz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    for (FieldInfo getter : getters) &#123;</span><br><span class="line">        if (!ASMUtils.checkName(getter.getMember().getName())) &#123;</span><br><span class="line">            return new JavaBeanSerializer(clazz);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String className = &quot;ASMSerializer_&quot; + seed.incrementAndGet() + &quot;_&quot; + clazz.getSimpleName();</span><br><span class="line">    String packageName = ASMSerializerFactory.class.getPackage().getName();</span><br><span class="line">    String classNameType = packageName.replace(&apos;.&apos;, &apos;/&apos;) + &quot;/&quot; + className;</span><br><span class="line">    String classNameFull = packageName + &quot;.&quot; + className;</span><br><span class="line"></span><br><span class="line">    ClassWriter cw = new ClassWriter();</span><br><span class="line">    cw.visit(V1_5 //</span><br><span class="line">                , ACC_PUBLIC + ACC_SUPER //</span><br><span class="line">                , classNameType //</span><br><span class="line">                , JavaBeanSerializer //</span><br><span class="line">                , new String[] &#123; ObjectSerializer &#125; //</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    for (FieldInfo fieldInfo : getters) &#123;</span><br><span class="line">        if (fieldInfo.fieldClass.isPrimitive() //</span><br><span class="line">            //|| fieldInfo.fieldClass.isEnum() //</span><br><span class="line">            || fieldInfo.fieldClass == String.class) &#123;</span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        new FieldWriter(cw, ACC_PUBLIC, fieldInfo.name + &quot;_asm_fieldType&quot;, &quot;Ljava/lang/reflect/Type;&quot;) //</span><br><span class="line">                                                                                                        .visitEnd();</span><br><span class="line"></span><br><span class="line">        if (List.class.isAssignableFrom(fieldInfo.fieldClass)) &#123;</span><br><span class="line">            new FieldWriter(cw, ACC_PUBLIC, fieldInfo.name + &quot;_asm_list_item_ser_&quot;,</span><br><span class="line">                            ObjectSerializer_desc) //</span><br><span class="line">                                                    .visitEnd();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        new FieldWriter(cw, ACC_PUBLIC, fieldInfo.name + &quot;_asm_ser_&quot;, ObjectSerializer_desc) //</span><br><span class="line">                                                                                                    .visitEnd();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    MethodVisitor mw = new MethodWriter(cw, ACC_PUBLIC, &quot;&lt;init&gt;&quot;, &quot;(&quot; + desc(SerializeBeanInfo.class) + &quot;)V&quot;, null, null);</span><br><span class="line">    mw.visitVarInsn(ALOAD, 0);</span><br><span class="line">    mw.visitVarInsn(ALOAD, 1);</span><br><span class="line">    mw.visitMethodInsn(INVOKESPECIAL, JavaBeanSerializer, &quot;&lt;init&gt;&quot;, &quot;(&quot; + desc(SerializeBeanInfo.class) + &quot;)V&quot;);</span><br><span class="line"></span><br><span class="line">    // init _asm_fieldType</span><br><span class="line">    for (int i = 0; i &lt; getters.length; ++i) &#123;</span><br><span class="line">        FieldInfo fieldInfo = getters[i];</span><br><span class="line">        if (fieldInfo.fieldClass.isPrimitive() //</span><br><span class="line">//                || fieldInfo.fieldClass.isEnum() //</span><br><span class="line">            || fieldInfo.fieldClass == String.class) &#123;</span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        mw.visitVarInsn(ALOAD, 0);</span><br><span class="line"></span><br><span class="line">        if (fieldInfo.method != null) &#123;</span><br><span class="line">            mw.visitLdcInsn(com.alibaba.fastjson.asm.Type.getType(desc(fieldInfo.declaringClass)));</span><br><span class="line">            mw.visitLdcInsn(fieldInfo.method.getName());</span><br><span class="line">            mw.visitMethodInsn(INVOKESTATIC, type(ASMUtils.class), &quot;getMethodType&quot;,</span><br><span class="line">                                &quot;(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/reflect/Type;&quot;);</span><br><span class="line"></span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            mw.visitVarInsn(ALOAD, 0);</span><br><span class="line">            mw.visitLdcInsn(i);</span><br><span class="line">            mw.visitMethodInsn(INVOKESPECIAL, JavaBeanSerializer, &quot;getFieldType&quot;, &quot;(I)Ljava/lang/reflect/Type;&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        mw.visitFieldInsn(PUTFIELD, classNameType, fieldInfo.name + &quot;_asm_fieldType&quot;, &quot;Ljava/lang/reflect/Type;&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mw.visitInsn(RETURN);</span><br><span class="line">    mw.visitMaxs(4, 4);</span><br><span class="line">    mw.visitEnd();</span><br><span class="line"></span><br><span class="line">    boolean DisableCircularReferenceDetect = false;</span><br><span class="line">    if (jsonType != null) &#123;</span><br><span class="line">        for (SerializerFeature featrues : jsonType.serialzeFeatures()) &#123;</span><br><span class="line">            if (featrues == SerializerFeature.DisableCircularReferenceDetect) &#123;</span><br><span class="line">                DisableCircularReferenceDetect = true;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 0 write</span><br><span class="line">    // 1 writeNormal</span><br><span class="line">    // 2 writeNonContext</span><br><span class="line">    for (int i = 0; i &lt; 3; ++i) &#123;</span><br><span class="line">        String methodName;</span><br><span class="line">        boolean nonContext = DisableCircularReferenceDetect;</span><br><span class="line">        boolean writeDirect = false;</span><br><span class="line">        if (i == 0) &#123;</span><br><span class="line">            methodName = &quot;write&quot;;</span><br><span class="line">            writeDirect = true;</span><br><span class="line">        &#125; else if (i == 1) &#123;</span><br><span class="line">            methodName = &quot;writeNormal&quot;;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            writeDirect = true;</span><br><span class="line">            nonContext = true;</span><br><span class="line">            methodName = &quot;writeDirectNonContext&quot;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Context context = new Context(getters, beanInfo, classNameType, writeDirect,</span><br><span class="line">                                        nonContext);</span><br><span class="line"></span><br><span class="line">        mw = new MethodWriter(cw, //</span><br><span class="line">                                ACC_PUBLIC, //</span><br><span class="line">                                methodName, //</span><br><span class="line">                                &quot;(L&quot; + JSONSerializer</span><br><span class="line">                                            + &quot;;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/reflect/Type;I)V&quot;, //</span><br><span class="line">                                null, //</span><br><span class="line">                                new String[] &#123; &quot;java/io/IOException&quot; &#125; //</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        &#123;</span><br><span class="line">            Label endIf_ = new Label();</span><br><span class="line">            mw.visitVarInsn(ALOAD, Context.obj);</span><br><span class="line">            //serializer.writeNull();</span><br><span class="line">            mw.visitJumpInsn(IFNONNULL, endIf_);</span><br><span class="line">            mw.visitVarInsn(ALOAD, Context.serializer);</span><br><span class="line">            mw.visitMethodInsn(INVOKEVIRTUAL, JSONSerializer,</span><br><span class="line">                    &quot;writeNull&quot;, &quot;()V&quot;);</span><br><span class="line"></span><br><span class="line">            mw.visitInsn(RETURN);</span><br><span class="line">            mw.visitLabel(endIf_);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        mw.visitVarInsn(ALOAD, Context.serializer);</span><br><span class="line">        mw.visitFieldInsn(GETFIELD, JSONSerializer, &quot;out&quot;, SerializeWriter_desc);</span><br><span class="line">        mw.visitVarInsn(ASTORE, context.var(&quot;out&quot;));</span><br><span class="line"></span><br><span class="line">        if ((!nativeSorted) //</span><br><span class="line">            &amp;&amp; !context.writeDirect) &#123;</span><br><span class="line"></span><br><span class="line">            if (jsonType == null || jsonType.alphabetic()) &#123;</span><br><span class="line">                Label _else = new Label();</span><br><span class="line"></span><br><span class="line">                mw.visitVarInsn(ALOAD, context.var(&quot;out&quot;));</span><br><span class="line">                mw.visitMethodInsn(INVOKEVIRTUAL, SerializeWriter, &quot;isSortField&quot;, &quot;()Z&quot;);</span><br><span class="line"></span><br><span class="line">                mw.visitJumpInsn(IFNE, _else);</span><br><span class="line">                mw.visitVarInsn(ALOAD, 0);</span><br><span class="line">                mw.visitVarInsn(ALOAD, 1);</span><br><span class="line">                mw.visitVarInsn(ALOAD, 2);</span><br><span class="line">                mw.visitVarInsn(ALOAD, 3);</span><br><span class="line">                mw.visitVarInsn(ALOAD, 4);</span><br><span class="line">                mw.visitVarInsn(ILOAD, 5);</span><br><span class="line">                mw.visitMethodInsn(INVOKEVIRTUAL, classNameType,</span><br><span class="line">                                    &quot;writeUnsorted&quot;, &quot;(L&quot; + JSONSerializer</span><br><span class="line">                                                    + &quot;;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/reflect/Type;I)V&quot;);</span><br><span class="line">                mw.visitInsn(RETURN);</span><br><span class="line"></span><br><span class="line">                mw.visitLabel(_else);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // isWriteDoubleQuoteDirect</span><br><span class="line">        if (context.writeDirect &amp;&amp; !nonContext) &#123;</span><br><span class="line">            Label _direct = new Label();</span><br><span class="line">            Label _directElse = new Label();</span><br><span class="line"></span><br><span class="line">            mw.visitVarInsn(ALOAD, 0);</span><br><span class="line">            mw.visitVarInsn(ALOAD, Context.serializer);</span><br><span class="line">            mw.visitMethodInsn(INVOKEVIRTUAL, JavaBeanSerializer, &quot;writeDirect&quot;, &quot;(L&quot; + JSONSerializer + &quot;;)Z&quot;);</span><br><span class="line">            mw.visitJumpInsn(IFNE, _directElse);</span><br><span class="line"></span><br><span class="line">            mw.visitVarInsn(ALOAD, 0);</span><br><span class="line">            mw.visitVarInsn(ALOAD, 1);</span><br><span class="line">            mw.visitVarInsn(ALOAD, 2);</span><br><span class="line">            mw.visitVarInsn(ALOAD, 3);</span><br><span class="line">            mw.visitVarInsn(ALOAD, 4);</span><br><span class="line">            mw.visitVarInsn(ILOAD, 5);</span><br><span class="line">            mw.visitMethodInsn(INVOKEVIRTUAL, classNameType,</span><br><span class="line">                                &quot;writeNormal&quot;, &quot;(L&quot; + JSONSerializer</span><br><span class="line">                                                + &quot;;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/reflect/Type;I)V&quot;);</span><br><span class="line">            mw.visitInsn(RETURN);</span><br><span class="line"></span><br><span class="line">            mw.visitLabel(_directElse);</span><br><span class="line">            mw.visitVarInsn(ALOAD, context.var(&quot;out&quot;));</span><br><span class="line">            mw.visitLdcInsn(SerializerFeature.DisableCircularReferenceDetect.mask);</span><br><span class="line">            mw.visitMethodInsn(INVOKEVIRTUAL, SerializeWriter, &quot;isEnabled&quot;, &quot;(I)Z&quot;);</span><br><span class="line">            mw.visitJumpInsn(IFEQ, _direct);</span><br><span class="line"></span><br><span class="line">            mw.visitVarInsn(ALOAD, 0);</span><br><span class="line">            mw.visitVarInsn(ALOAD, 1);</span><br><span class="line">            mw.visitVarInsn(ALOAD, 2);</span><br><span class="line">            mw.visitVarInsn(ALOAD, 3);</span><br><span class="line">            mw.visitVarInsn(ALOAD, 4);</span><br><span class="line">            mw.visitVarInsn(ILOAD, 5);</span><br><span class="line">            mw.visitMethodInsn(INVOKEVIRTUAL, classNameType, &quot;writeDirectNonContext&quot;,</span><br><span class="line">                                &quot;(L&quot; + JSONSerializer + &quot;;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/reflect/Type;I)V&quot;);</span><br><span class="line">            mw.visitInsn(RETURN);</span><br><span class="line"></span><br><span class="line">            mw.visitLabel(_direct);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        mw.visitVarInsn(ALOAD, Context.obj); // obj</span><br><span class="line">        mw.visitTypeInsn(CHECKCAST, type(clazz)); // serializer</span><br><span class="line">        mw.visitVarInsn(ASTORE, context.var(&quot;entity&quot;)); // obj</span><br><span class="line">        generateWriteMethod(clazz, mw, getters, context);</span><br><span class="line">        mw.visitInsn(RETURN);</span><br><span class="line">        mw.visitMaxs(7, context.variantIndex + 2);</span><br><span class="line">        mw.visitEnd();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (!nativeSorted) &#123;</span><br><span class="line">        // sortField support</span><br><span class="line">        Context context = new Context(getters, beanInfo, classNameType, false,</span><br><span class="line">                                        DisableCircularReferenceDetect);</span><br><span class="line"></span><br><span class="line">        mw = new MethodWriter(cw, ACC_PUBLIC, &quot;writeUnsorted&quot;,</span><br><span class="line">                                &quot;(L&quot; + JSONSerializer + &quot;;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/reflect/Type;I)V&quot;,</span><br><span class="line">                                null, new String[] &#123; &quot;java/io/IOException&quot; &#125;);</span><br><span class="line"></span><br><span class="line">        mw.visitVarInsn(ALOAD, Context.serializer);</span><br><span class="line">        mw.visitFieldInsn(GETFIELD, JSONSerializer, &quot;out&quot;, SerializeWriter_desc);</span><br><span class="line">        mw.visitVarInsn(ASTORE, context.var(&quot;out&quot;));</span><br><span class="line"></span><br><span class="line">        mw.visitVarInsn(ALOAD, Context.obj); // obj</span><br><span class="line">        mw.visitTypeInsn(CHECKCAST, type(clazz)); // serializer</span><br><span class="line">        mw.visitVarInsn(ASTORE, context.var(&quot;entity&quot;)); // obj</span><br><span class="line"></span><br><span class="line">        generateWriteMethod(clazz, mw, unsortedGetters, context);</span><br><span class="line"></span><br><span class="line">        mw.visitInsn(RETURN);</span><br><span class="line">        mw.visitMaxs(7, context.variantIndex + 2);</span><br><span class="line">        mw.visitEnd();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 0 writeAsArray</span><br><span class="line">    // 1 writeAsArrayNormal</span><br><span class="line">    // 2 writeAsArrayNonContext</span><br><span class="line">    for (int i = 0; i &lt; 3; ++i) &#123;</span><br><span class="line">        String methodName;</span><br><span class="line">        boolean nonContext = DisableCircularReferenceDetect;</span><br><span class="line">        boolean writeDirect = false;</span><br><span class="line">        if (i == 0) &#123;</span><br><span class="line">            methodName = &quot;writeAsArray&quot;;</span><br><span class="line">            writeDirect = true;</span><br><span class="line">        &#125; else if (i == 1) &#123;</span><br><span class="line">            methodName = &quot;writeAsArrayNormal&quot;;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            writeDirect = true;</span><br><span class="line">            nonContext = true;</span><br><span class="line">            methodName = &quot;writeAsArrayNonContext&quot;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Context context = new Context(getters, beanInfo, classNameType, writeDirect,</span><br><span class="line">                                        nonContext);</span><br><span class="line"></span><br><span class="line">        mw = new MethodWriter(cw, ACC_PUBLIC, methodName,</span><br><span class="line">                                &quot;(L&quot; + JSONSerializer + &quot;;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/reflect/Type;I)V&quot;,</span><br><span class="line">                                null, new String[] &#123; &quot;java/io/IOException&quot; &#125;);</span><br><span class="line"></span><br><span class="line">        mw.visitVarInsn(ALOAD, Context.serializer);</span><br><span class="line">        mw.visitFieldInsn(GETFIELD, JSONSerializer, &quot;out&quot;, SerializeWriter_desc);</span><br><span class="line">        mw.visitVarInsn(ASTORE, context.var(&quot;out&quot;));</span><br><span class="line"></span><br><span class="line">        mw.visitVarInsn(ALOAD, Context.obj); // obj</span><br><span class="line">        mw.visitTypeInsn(CHECKCAST, type(clazz)); // serializer</span><br><span class="line">        mw.visitVarInsn(ASTORE, context.var(&quot;entity&quot;)); // obj</span><br><span class="line">        generateWriteAsArray(clazz, mw, getters, context);</span><br><span class="line">        mw.visitInsn(RETURN);</span><br><span class="line">        mw.visitMaxs(7, context.variantIndex + 2);</span><br><span class="line">        mw.visitEnd();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    byte[] code = cw.toByteArray();</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt; exampleClass = classLoader.defineClassPublic(classNameFull, code, 0, code.length);</span><br><span class="line">    Constructor&lt;?&gt; constructor = exampleClass.getConstructor(SerializeBeanInfo.class);</span><br><span class="line">    Object instance = constructor.newInstance(beanInfo);</span><br><span class="line"></span><br><span class="line">    return (JavaBeanSerializer) instance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这里为止，我们的分析就可以结束了，实际上这里是根据<code>fieldInfo</code>，通过CodeGen技术生成一个<code>writer</code>实例。而<code>getJson</code>被简单当作了<code>json</code>属性的<code>getter</code>，所以在<code>writer.write(object)</code>中调用了<code>getJson</code>从而出现了递归。那么这个问题的简单解决办法就是将<code>getJson</code>换个名字，比如<code>toJson</code>。最后，在github的issue中也翻到了一个对应的问题，作者给出的答案就是换个名字。</p><p><img src="http://www.hashcoding.net/uploads/images/2017/5/2.png" alt="question"></p><p><img src="http://www.hashcoding.net/uploads/images/2017/5/3.png" alt="answer"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;关键字: fastjson stackoverflow&lt;br&gt;本文使用的版本是 1.2.32&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;fastjson 是阿里开源的Json格式化工具库。在项目中使用了fastjson，然后出现了一个奇怪的bug。
      
    
    </summary>
    
      <category term="Debug 日志" scheme="http://www.hashcoding.net/categories/Debug-%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="Java" scheme="http://www.hashcoding.net/tags/Java/"/>
    
      <category term="Debug" scheme="http://www.hashcoding.net/tags/Debug/"/>
    
  </entry>
  
  <entry>
    <title>C/C++ 调用约定</title>
    <link href="http://www.hashcoding.net/2017/05/07/C-C-%E8%B0%83%E7%94%A8%E7%BA%A6%E5%AE%9A/"/>
    <id>http://www.hashcoding.net/2017/05/07/C-C-调用约定/</id>
    <published>2017-05-07T10:42:50.000Z</published>
    <updated>2017-06-12T11:58:42.159Z</updated>
    
    <content type="html"><![CDATA[<p><code>__cdecl</code> 是 C declaration 的缩写，表示 C 语言默认的函数调用方法：</p><ul><li>所有参数从右到左依次入栈，</li><li>参数由调用者清除，称为手动清栈</li><li>被调用函数不会要求调用者传递多少参数，调用者传递过多或者过少的参数，甚至完全不同的参数都不会产生编译阶段的错误。</li></ul><p><code>__stdcall</code> 是 Standard Call 的缩写，是 C++ 的标准调用方式：</p><ul><li>所有参数从右到左依次入栈，如果是调用类成员的话，最后一个入栈的是 this 指针。</li><li>这些堆栈中的参数由被调用的函数在返回后清除，使用的指令是 retn X，X 表示参数占用的字节数，CPU 在 ret 之后自动弹出 X 个字节的堆栈空间，称为自动清栈。</li><li>函数在编译的时候就必须确定参数个数，并且调用者必须严格的控制参数的生成，不能多，不能少，否则返回后会出错。</li></ul><p><code>__pascal</code> 是 Pascal 语言（Delphi）的函数调用方式，也可以在 C/C++ 中使用，参数压栈顺序与前两者相反。返回时的清栈方式与 <code>__stdcall</code> 相同。</p><p><code>__fastcall</code> 是编译器指定的快速调用方式。由于大多数的函数参数个数很少，使用堆栈传递比较费时。因此 <code>__fastcall</code> 通常规定将前两个（或若干个）参数由寄存器传递，其余参数还是通过堆栈传递。不同编译器编译的程序规定的寄存器不同，返回方式和 <code>__stdcall</code> 相当。</p><p><code>__thiscall</code> 是为了解决类成员调用中 this 指针传递而规定的。<code>__thiscall</code> 要求把 this 指针放在特定寄存器中，该寄存器由编译器决定。VC 使用 ecx，Borland 的 C++ 编译器使用 eax。返回方式和 <code>__stdcall</code> 相当。</p><p><code>__fastcall</code> 和 <code>__thiscall</code> 涉及的寄存器由编译器决定，因此不能用作跨编译器的接口。所以 Windows 上的 COM 对象接口都定义为 <code>__stdcall</code> 调用方式。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;__cdecl&lt;/code&gt; 是 C declaration 的缩写，表示 C 语言默认的函数调用方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;所有参数从右到左依次入栈，&lt;/li&gt;
&lt;li&gt;参数由调用者清除，称为手动清栈&lt;/li&gt;
&lt;li&gt;被调用函数不会要求调用者传递多少参
      
    
    </summary>
    
      <category term="C++" scheme="http://www.hashcoding.net/categories/C/"/>
    
    
      <category term="C" scheme="http://www.hashcoding.net/tags/C/"/>
    
      <category term="C++" scheme="http://www.hashcoding.net/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>SIMD 与编程</title>
    <link href="http://www.hashcoding.net/2017/05/07/SIMD-%E4%B8%8E%E7%BC%96%E7%A8%8B/"/>
    <id>http://www.hashcoding.net/2017/05/07/SIMD-与编程/</id>
    <published>2017-05-07T06:33:49.000Z</published>
    <updated>2017-05-07T07:38:06.162Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SIMD-简介"><a href="#SIMD-简介" class="headerlink" title="SIMD 简介"></a>SIMD 简介</h1><p>在谈 SIMD 之前，不得不谈一谈计算机体系结构的分类。常见的体系结构分类方法有两种：冯氏分类法和 Flynn 分类法。</p><p>冯氏分类法使用系统的最大并行度对计算机进行分类。最大并行度的定义是：计算机系统在单位时间内能够处理的最大的二进制位数。</p><p>Flynn 分类法则是按照指令流和数据流的多倍性进行分类。在 Flynn 中有定义：</p><ul><li>指令流（instruction stream），即计算机执行的指令序列</li><li>数据流（data stream），即由指令流调用的数据序列</li><li>多倍性（multiplicity），即在系统受限的部件上，同时处于同一执行阶段的指令或数据的最大数目</li></ul><p>Flynn 把计算机系统结构分为4类：</p><ul><li>单指令流单数据流（single instruction stream single data stream, SISD)</li><li>单指令流多数据流（single instruction stream multiple data stream, SIMD)</li><li>多指令流单数据流（multiple instruction stream single data stream, MISD)</li><li>多指令流多数据流（multiple instruction stream multiple data stream, MIMD)</li></ul><p>其中 SIMD 就是今天的主角：单指令流多数据流是一种采用一个控制器来控制多个处理器，同时对一组数据（又称“数据向量”）中的每一个分别执行相同的操作从而实现空间上的并行性的技术。在微处理器中，单指令流多数据流技术则是一个控制器控制多个平行的处理微元。</p><p>SIMD 技术的关键是在一条单独的指令中同时执行多个运算操作，以增加处理器的吞吐量。为此，SIMD 结构的 CPU 有多个执行部件，但都在同一个指令部件的控制之下，中央控制器向各个处理单元发送指令，整个系统只要求有一个中央控制器，只要求存储一份程序，所有的计算都是同步的。</p><p>为了了解 SIMD 在性能上的优势，我们以加法指令为例进行说明：单指令流单数据流型 CPU 对加法指令译码后，执行部件先访问主存，取得第一个操作数，之后再一次访问主存，取得第二个操作数，随后才能进行求和运算；而在 SIMD 型 CPU 中，指令译码后，几个执行部件同时访问主存，一次性获得所有操作数进行运算。这一特点使得 SIMD 技术特别适合于多媒体应用等数据密集型运算，比如可以在 libx264、ffmpeg 等中看到其身影。</p><h1 id="SIMD-在现代处理器上的应用"><a href="#SIMD-在现代处理器上的应用" class="headerlink" title="SIMD 在现代处理器上的应用"></a>SIMD 在现代处理器上的应用</h1><p>SIMD 在现代处理器上得到了广泛的应用，其中 Intel 开发了 MMX、SSE、SSE2 等等，AMD 开发了 3D Now! ，而 neon 则是 ARM 在 Cortex-A 系列机上的 SIMD 支持。</p><h2 id="MMX"><a href="#MMX" class="headerlink" title="MMX"></a>MMX</h2><p>MMX 是 Intel 于1996年在奔腾上设计开发的 SIMD 支持，通过一次处理多个数据，增强了多媒体处理方面的能力。然而 MMX 占用浮点数寄存器进行运算，使得 MMX 指令和浮点操作指令不能同时运行，必须做密集的切换。</p><blockquote><p>MMX 寄存器，称作 MM0-MM7，实际上就是处理器内部 80 比特字长的浮点寄存器栈 st（0）到 st (7)的尾数部分（64 比特长）的复用。由于浮点栈寄存器的高16位未被 MMX 技术使用，因此这 16 位都置为 1，因此从栈寄存器的角度看，其浮点值为 NaN 或 Infinities，这可用于区分寄存器是处于浮点栈状态还是 MMX 状态。利用了装配数据类型（packed data type）的概念，每个 MMX 寄存器的 64 比特字长可以看作是 2 个 32 位整数、或者 4 个 16 位整数、或者 8 个 8 位整数，从而可以执行整数 SIMD 运算。</p></blockquote><h2 id="SSE"><a href="#SSE" class="headerlink" title="SSE"></a>SSE</h2><p>1999年，Intel在其Pentium III微处理器中集成了 SSE（Streaming SIMD Extensions）技术，有效增强了 CPU 浮点运算的能力。SSE兼容MMX指令，可以通过 SIMD 和单时钟周期并行处理多个浮点数据来有效提高浮点运算速度。具有 SSE 指令集支持的处理器有 8 个 128 位的寄存器，每一个寄存器可以存放 4 个单精度（32位）浮点数。SSE同时提供了一个指令集，其中的指令允许把浮点数加载到这些 128 位寄存器中，这些数就可以在这些寄存器中进行算术逻辑运算，然后把结果送回主存。也就是说，SSE 中的所有计算都可以针对 4 个浮点数一次性完成。</p><p>在 SSE 之后，Intel 对 SSE 进行了拓展。时至今日已经发展到了AVX（Advanced Vector Extensions）。</p><h2 id="3D-Now"><a href="#3D-Now" class="headerlink" title="3D Now!"></a>3D Now!</h2><p>3DNow!（据称是“3D No Waiting!”的缩写）是由AMD开发的一套SIMD多媒体指令集，支持单精度浮点数的矢量运算，用于增强x86架构的计算机在三维图像处理上的性能</p><h2 id="NEON"><a href="#NEON" class="headerlink" title="NEON"></a>NEON</h2><p>ARM CPU 最开始只有普通的寄存器，可以进行基本数据类型的基本运算。自 ARMv5 开始引入了 VFP（Vector Floating Point）指令，该指令用于向量化加速浮点运算。自ARMv7开始正式引入 NEON 指令，NEON 性能远超 VFP，因此 VFP 指令被废弃。</p><h1 id="SIMD-与编程"><a href="#SIMD-与编程" class="headerlink" title="SIMD 与编程"></a>SIMD 与编程</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TODO: 自己都还没学会</span><br></pre></td></tr></table></figure><p>入门可以参考<a href="http://blog.csdn.net/gengshenghong/article/details/7007100" target="_blank" rel="noopener">在C/C++代码中使用SSE等指令集的指令(1)介绍</a></p><p>简单应用可以参考<a href="http://blog.csdn.net/housisong/article/details/1866970" target="_blank" rel="noopener">YUV视频格式到RGB32格式转换的速度优化 中篇</a></p><p>在 Intel 上与 SIMD 相关可以参考<a href="https://software.intel.com/sites/landingpage/IntrinsicsGuide" target="_blank" rel="noopener">Intel Intrinsics Guide</a>。</p><p>源码阅读可以参考<a href="https://github.com/Microsoft/DirectXMath" target="_blank" rel="noopener">DirectXMath</a>。</p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p>[1] 计算机系统结构 高等教育出版社 王志英<br>[2] <a href="https://zh.wikipedia.org/wiki/%E5%8D%95%E6%8C%87%E4%BB%A4%E6%B5%81%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%B5%81" target="_blank" rel="noopener">单指令多数据流 - wiki</a><br>[3] <a href="http://share.onlinesjtu.com/mod/tab/view.php?id=303" target="_blank" rel="noopener">SIMD 技术 - 上海交通大学</a><br>[4] <a href="http://baike.baidu.com/link?url=q7oQjCLR8a8YYzM0tW5bUBln2J1rEKXXxjjhmv1eQoZYaJwMrOT8mp88qvXx1Q8_cnOh_WlsNS9XDbIRqLBbUK" target="_blank" rel="noopener">Neon ARM架构处理器扩展结构 - 百度百科</a><br>[5] <a href="https://zh.wikipedia.org/wiki/MMX" target="_blank" rel="noopener">MMX - wiki</a><br>[6] <a href="https://zh.wikipedia.org/wiki/SSE" target="_blank" rel="noopener">SSE - wiki</a><br>[7] <a href="https://zh.wikipedia.org/wiki/3DNow!" target="_blank" rel="noopener">3DNow! - wiki</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SIMD-简介&quot;&gt;&lt;a href=&quot;#SIMD-简介&quot; class=&quot;headerlink&quot; title=&quot;SIMD 简介&quot;&gt;&lt;/a&gt;SIMD 简介&lt;/h1&gt;&lt;p&gt;在谈 SIMD 之前，不得不谈一谈计算机体系结构的分类。常见的体系结构分类方法有两种：冯氏分类法和 
      
    
    </summary>
    
    
      <category term="Architecture" scheme="http://www.hashcoding.net/tags/Architecture/"/>
    
  </entry>
  
  <entry>
    <title>浮点数</title>
    <link href="http://www.hashcoding.net/2017/05/07/%E6%B5%AE%E7%82%B9%E6%95%B0/"/>
    <id>http://www.hashcoding.net/2017/05/07/浮点数/</id>
    <published>2017-05-07T02:52:30.000Z</published>
    <updated>2017-08-24T08:40:36.081Z</updated>
    
    <content type="html"><![CDATA[<p>在计算机科学中，浮点是一种对实数近似值的表现方法，有一个尾数（即小数）加上阶码（即指数）来表示，通常是乘以某个基数的指数次。使用这种办法表示的数值成为浮点数。计算机中一般采用二进制为基，加上固定的精度来表示浮点。</p><p>\begin{equation} f = \pm m \times b^{ \pm e } \end{equation}</p><p>此外，浮点数表示法通常还包括一些特别的数值：+∞ 和 −∞（正负无穷大）以及 NaN（Not a Number）。无穷大用于数太大而无法表示的时候，NaN 则指示非法操作或者无法定义的结果。其中，无穷大，可表示为inf，在内存中的值是阶码为全1，尾数全0。而NaN在内存中的值则是阶码全1，尾数不全0。</p><p>通常情况下，在电脑中使用的浮点规范为 IEEE 754。</p><h1 id="IEEE-754"><a href="#IEEE-754" class="headerlink" title="IEEE 754"></a>IEEE 754</h1><blockquote><p>IEEE二进制浮点数算术标准（IEEE 754）是20世纪80年代以来最广泛使用的浮点数运算标准，为许多CPU与浮点运算器所采用。该标准的全称为IEEE二进制浮点数算术标准（ANSI/IEEE Std 754-1985），又称IEC 60559:1989，微处理器系统的二进制浮点数算术（本来的编号是IEC 559:1989）[1]。后来还有“与基数无关的浮点数”的“IEEE 854-1987标准”，有规定基数为2跟10的状况。现在最新标准是“ISO/IEC/IEEE FDIS 60559:2010”。</p></blockquote><p>标准主要定义了下面的内容：</p><ul><li>浮点数的格式</li><li>反常值（denormal number）</li><li>一些特殊数值（无穷（Inf）与非数值（NaN））</li><li>以及这些数值的“浮点数运算符”</li><li>四种数值舍入规则</li><li>五种例外情况</li></ul><p>同时，标准还规定了四种浮点数的表示方式：单精确度（32位）、双精确度（64位）、延伸单精确度（43比特以上，很少使用）与延伸双精确度（79比特以上，通常以80比特实做）。</p><h2 id="存储格式"><a href="#存储格式" class="headerlink" title="存储格式"></a>存储格式</h2><p>IEEE 754 规定二进制了浮点数的存储格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">+----------------------------+</span><br><span class="line">| sign | exponent | fraction |</span><br><span class="line">+----------------------------+</span><br><span class="line">e+f+1  e+f        f          0</span><br></pre></td></tr></table></figure><p>其中最高位为符号位，紧接着的 e 个 bit 存储指数部分，剩 f 个 bit 则表示小数部分。</p><p>需要注意的是 IEEE 754 的指数部分有一个指数偏移值，标准规定该值为：$ 2^{e - 1}-1 $。</p><blockquote><p>指数偏移值（exponent bias），是指浮点数表示法中的指数域的编码值为指数的实际值加上某个固定的值。</p></blockquote><p>以单精度为例，指数部分长度为 8 ，如果编码值为 128，那么实际值应该为 <code>128 - 127 = 1</code></p><blockquote><p>采用指数的实际值加上固定的偏移值的办法表示浮点数的指数，好处是可以用长度为e个比特的无符号整数来表示所有的指数取值，这使得两个浮点数的指数大小的比较更为容易，实际上可以按照字典序比较两个浮点表示的大小。这种移码表示的指数部分，中文称作阶码。如果不能理解，可以参考<a href="http://blog.csdn.net/wlccomeon/article/details/25000705" target="_blank" rel="noopener">一张图看懂原码、反码、补码、移码</a>。</p></blockquote><h2 id="浮点数的“规约”"><a href="#浮点数的“规约”" class="headerlink" title="浮点数的“规约”"></a>浮点数的“规约”</h2><p>浮点数中存在多种表示为相同值的情况，比如:</p><p>\begin{equation} 0.1 \times 10^2 = 0.01 \times 10^3 \end{equation}</p><p>为了统一，将指数部分的编码值在 $ 0 &lt; exponent &lt; 2^{e}-2 $ 之间，且尾数部分最高有效位（即整数字）是1的浮点数将被称为规约形式的浮点数。“规约”是指用唯一确定的浮点形式去表示一个值。</p><p>因为最高位始终为1，所以实际编码中可以省略，称为隐含的二进制有效数字，而 IEEE 754 称这种编码方式的尾数为有效数（significant）。</p><p>显然，有规约形式就有非规约形式，但是<strong>并非所以不是规约形式的浮点数都叫做非规约形式</strong>哦。非规约形式的浮点数（Denormalized Number）：规格浮点约定小数点前一位默认是1，而非规格浮点约定小数点前一位可以为0，这样小数精度就相当于多了最多<code>2^22</code>范围。可以看到，非规约形式的浮点数实际上也是“规约”的。IEEE 754 标准规定：非规约形式的浮点数的指数偏移值比规约形式的浮点数的指数偏移值大1。实际上非规约形式的浮点数比规约形式的浮点数更接近与 0 。如果不能理解为甚么有“规约”的非规约形式浮点数，可以参考<a href="http://cenalulu.github.io/linux/about-denormalized-float-number/" target="_blank" rel="noopener">你应该知道的浮点数基础知识</a>。</p><h2 id="浮点数比较"><a href="#浮点数比较" class="headerlink" title="浮点数比较"></a>浮点数比较</h2><p>通过规约化形式和指数偏移，浮点数基本上可以按照符号位、指数域、尾数域的顺序作字典比较。显然，所有正数大于负数；正负号相同时，指数的二进制表示法更大的其浮点数值更大；指数相同则比较尾数部分的大小。</p><p>这里有三个特殊值需要指出：</p><ul><li>如果指数是0并且尾数的小数部分是0，这个数 ±0（和符号位相关）</li><li>如果指数 $ 2^{e}-1 $ 并且尾数的小数部分是0，这个数是 ±∞（同样和符号位相关）</li><li>如果指数 $ 2^{e}-1 $ 并且尾数的小数部分非0，这个数表示为不是一个数（NaN）</li></ul><p>此时有：</p><ul><li>-Inf &lt; 负的规约浮点数数 &lt; 负的非规约浮点数 &lt; -0.0 = 0.0 &lt; 正的非规约浮点数 &lt; 正的规约浮点数 &lt; Inf</li><li>-inf = -inf, inf = inf, NaN 与任何浮点数（包括自身）的比较结果都为假，即 (NaN ≠ x) = false.</li></ul><h1 id="编程语言中的浮点数"><a href="#编程语言中的浮点数" class="headerlink" title="编程语言中的浮点数"></a>编程语言中的浮点数</h1><p>如果 ISO C 有预定义 <code>__STDC_IEC_559__</code> 时支持 IEC 60559:1989 (IEEE 754) 指定的浮点数，C++下则是浮点类型对应 <code>numeric_limits</code> 的 <code>is_iec559</code> 为 <code>true</code> 时。此时 <code>float</code> 和 <code>double</code> 浮点型分别对应的是单精度和双精度浮点数。</p><p><img src="http://www.hashcoding.net/uploads/images/2017/5/1.png" alt="C语言中浮点内存布局"></p><h1 id="references"><a href="#references" class="headerlink" title="references"></a>references</h1><p>[1] <a href="https://zh.wikipedia.org/wiki/%E6%B5%AE%E7%82%B9%E6%95%B0" target="_blank" rel="noopener">浮点数 - wiki</a><br>[2] <a href="https://zh.wikipedia.org/wiki/IEEE_754#.E8.A7.84.E7.BA.A6.E5.BD.A2.E5.BC.8F.E7.9A.84.E6.B5.AE.E7.82.B9.E6.95.B0" target="_blank" rel="noopener">IEEE 754 - wiki</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在计算机科学中，浮点是一种对实数近似值的表现方法，有一个尾数（即小数）加上阶码（即指数）来表示，通常是乘以某个基数的指数次。使用这种办法表示的数值成为浮点数。计算机中一般采用二进制为基，加上固定的精度来表示浮点。&lt;/p&gt;
&lt;p&gt;\begin{equation} f = \p
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>C语言格式化输出</title>
    <link href="http://www.hashcoding.net/2017/05/03/C%E8%AF%AD%E8%A8%80%E6%A0%BC%E5%BC%8F%E5%8C%96%E8%BE%93%E5%87%BA/"/>
    <id>http://www.hashcoding.net/2017/05/03/C语言格式化输出/</id>
    <published>2017-05-03T13:19:45.000Z</published>
    <updated>2017-06-12T11:58:56.023Z</updated>
    
    <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>格式化输出函数会根据参数 format 字符串来转换并格式化数据，然后输出。其中字符串由多个指令组成。指令有以下两种：</p><ol><li>非 % 字符，将会被原封不动的拷贝到输出流</li><li>由 % 字符开头的转换说明符号，每个都会从后面取出若干个参数，按照相应的转换规则（如果适用）转换并将结果写入输出流</li></ol><a id="more"></a><blockquote><p>一般而言，每个 % 符号在其后都必需有一个参数与之相呼应（只有当 %% 转换字符出现时会直接输出 % 字符），而欲输出的数据类型必须与其相对应的转换字符类型相同。</p></blockquote><h2 id="组成规则"><a href="#组成规则" class="headerlink" title="组成规则"></a>组成规则</h2><p>格式化说明符的组成规则如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&apos;%&apos; [flags]zero-or-more [field-width]opt [precision]opt [length-modifier]opt conversition-specifier</span><br></pre></td></tr></table></figure><ul><li>flags: 任意个数，用来修改转换说明符的行为</li><li>field-width: 可选，如果转换后的值的字符数少于字段宽度，则在左侧用空格填充剩余字段（默认情况下为左）。字段宽度采用星号*（稍后描述）或非负十进制整数的表示。</li><li>precision: 可选，参考 precision</li><li>length-modifer: 可选，用于指定输入参数的长度</li><li>conversition-specifier: 字符，说明用什么转换类型来转换参数</li></ul><h2 id="flags"><a href="#flags" class="headerlink" title="flags"></a>flags</h2><p>flag 字符可以按照任意的次序写，所有的 flag 字符和它们的含义如下：</p><p>- 返回的结果为左对齐，默认情况为右对齐</p><p>+ 有符号的转换结果前始终包括加号或者减号（默认情况下只有负数前才会显示一个符号）</p><p>space 如果有符号的转换的结果第一个字符不是符号，或者如果有符号的转换结果没有字符，都会在前面加上一个空格。如果空格和 + 两个 flag 都出现，则忽略空格。</p><p># 将结果转换为“替代形式”。对于 o 转换，当且仅当必要时，它会提高精度，以将结果的第一位数强制设为零（如果值和精度均为 0 ，则打印单个 0 ）。对于x（或 X ）转换，非零结果前将加上 0x（或 0X）前缀。 对于 a，e，E，f，F，g 和 G 转换，转换的结果总是包含一个小数点字符，即使小数点后没有数字（正常情况下只有后面有数字是才会出现小数点）。对于 g 和 G 转换，尾随零并不会从结果中移除。对于其他转换，行为是未定义的。</p><p>0 对于 d，i，o，u，x，x，a，A，e，E，f，F，g 和 G 转换，除非转换无效或者 NaN，使用前导零填充剩余宽度字符（在 +- 和 0x 的基础上）。如果同时出现 0 和 -，则 0 被忽略。对于其他转换，行为是未定义的。</p><h2 id="precision-精度"><a href="#precision-精度" class="headerlink" title="precision(精度)"></a>precision(精度)</h2><p>precision 有几种情况：</p><ul><li>给出 d，i，o，u，x 和 X 转换所显示的最小位数</li><li>给出 a，e，E，f 和 F 转换的小数点后出现的位数 </li><li>g 和 G 格式代表有效位数的最大值</li><li>在 %s 格式代表字符串的最大长度</li></ul><p><strong>Notice: 如果精度和非上述类型说明符(conversition specifier)一起使用，行为是未定义的。</strong></p><p>精度由 . (period) 开头，比如 <code>.3d</code>，后面加上 * 号或可选的十进制整数(如果仅仅只有一个<code>.</code>，那么精度为0)。</p><p>如上所述，字段宽度(field-width)或精度(precision)两者都可以用星号表示。在这种情况下，表示用一个 int 类型的参数提供字段的宽度或精度。指定字段宽度或精度或两者的参数将在要转换的参数（如果有的话）之前出现（按顺序）。</p><p>如果字段宽度为负数，相当于一个 <code>-</code> flag 加上正的字段宽度；如果精度为负数，那么会被忽略。</p><h2 id="length-modifier"><a href="#length-modifier" class="headerlink" title="length modifier"></a>length modifier</h2><p>hh 表示紧跟着的 d, i, o, u, x 或者 X 转换说明符将被应用到 <code>signed char</code> 或者 <code>unsigned char</code> 参数（参数已经通过整数提升提升了，但是它的值仍然应该被转换为对应的类型）；如果紧跟 n 说明符则表示参数应该是指向 <code>signed char</code> 类型的指针。</p><p>h 表示紧跟着的 d, i, o, u, x 或者 X 转换说明符将被应用到 <code>short int</code> 或者 <code>unsigned short int</code> 参数（参数已经通过整数提升提升了，但是它的值仍然应该被转换为对应的类型）；如果紧跟 n 说明符则表示参数应该是指向 <code>short int</code> 类型的指针。</p><p>l(ell) 表示紧跟着的 d, i, o, u, x 或者 X 转换说明符将被应用到 <code>long int</code> 或者 <code>unsigned long int</code> 参数；如果紧跟 n 说明符则表示参数应该是指向 <code>long int</code> 类型的指针；如果紧跟着 c 说明符则表示 <code>wint_t</code> 参数；如果紧跟着 <code>s</code> 则表示参数为 <code>wchar_t</code> 类型的指针；对于 a, A, e, E, f, F, g 和 G 则没有任何影响。</p><p>ll(ell-ell) 表示紧跟着的 d, i, o, u, x 或者 X 转换说明符将被应用到 <code>long long int</code> 或者 <code>unsigned long long int</code> 参数；如果紧跟 n 说明符则表示参数应该是指向 <code>long long int</code> 类型的指针。</p><p>j 表示紧跟着的 d, i, o, u, x 或者 X 转换说明符将被应用到 <code>intmax_t</code> 或者 <code>uintmax_t</code> 参数；如果紧跟 n 说明符则表示参数应该是指向 <code>intmax_t</code> 类型的指针。</p><p>z 表示紧跟着的 d, i, o, u, x 或者 X 转换说明符将被应用到 <code>size_t</code> 或者相应的有符号整形参数；如果紧跟 n 说明符则表示转换规范适用于对应于 <code>size_t</code> 参数的带符号整数类型的指针。</p><p>t 表示紧跟着的 d, i, o, u, x 或者 X 转换说明符将被应用到 <code>ptrdiff_t</code> 或者相应的无符号整形参数；如果紧跟 n 说明符则表示参数应该是指向 <code>ptrdiff_t</code> 类型的指针。</p><p>L 表示紧跟着的 a, A, e, E, f, F, g 或者 G 转换说明符将被应用到 <code>long double</code> 类型的参数上。</p><h2 id="conversition-specifier"><a href="#conversition-specifier" class="headerlink" title="conversition-specifier"></a>conversition-specifier</h2><h3 id="整数"><a href="#整数" class="headerlink" title="整数"></a>整数</h3><ul><li>%d,i  整数的参数会被转成有符号的十进制数字。</li><li>%u  整数的参数会被转成无符号的十进制数字。</li><li>%o  整数的参数会被转成无符号的八进制数字。</li><li>%x,X  整数的参数会被转成无符号的十六进制数字，并以小写abcdef 表示，对于 X 以大写ABCDEF 表示浮点型数（下同，不在赘述）。</li><li>%f,F <code>double</code> 型的参数会被转成十进制数字 <code>[-]ddd.ddd</code>，并取到小数点以下六位，四舍五入。如果为无穷(inﬁnity)则按照具体实现输出 <code>[-]inf</code> 或者 <code>infinity</code>；如果为 NaN 则输出 <code>[-]nan</code> 或者 <code>[-]nan(any n-char-sequence)</code>。</li><li>%e,E <code>double</code> 型的参数以指数形式打印，有一个数字会在小数点前，六位数字在小数点后，而在指数部分会以小写的 e 来表示<code>[-]d.ddde+/-dd</code>。如果参数表示无穷(inﬁnity)或者 NaN 则类似于 f 或 F。</li><li>%g,G <code>double</code> 型的参数会自动选择以 %f 或 %e 的格式来打印，其标准是根据打印的数值及所设置的有效位数来决定。</li><li>%a, A 浮点数、十六进制数字和p-记数法。把一个浮点数以一个十六进制的数如0x1.C0000p+1类似的样子输出一个浮点数。</li></ul><h3 id="字符及字符串"><a href="#字符及字符串" class="headerlink" title="字符及字符串"></a>字符及字符串</h3><ul><li>%c 整型数的参数会被转成 <code>unsigned char</code> 型打印出</li><li>%s 指向字符串的参数会被逐字输出，直到出现 <code>&#39;\0&#39;</code> 字符为止</li><li>%p 如果是参数是 <code>void *</code> 型指针则使用十六进制格式显示</li></ul><h1 id="others"><a href="#others" class="headerlink" title="others"></a>others</h1><p>最后，标准规定：</p><blockquote><p>The number of characters that can be produced by any single conversion shall be at least 4095. </p></blockquote><h1 id="references"><a href="#references" class="headerlink" title="references"></a>references</h1><p>[1] ISO/IEC 9899:201x Committee Draft — December 2, 2010 N1548</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h1&gt;&lt;p&gt;格式化输出函数会根据参数 format 字符串来转换并格式化数据，然后输出。其中字符串由多个指令组成。指令有以下两种：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;非 % 字符，将会被原封不动的拷贝到输出流&lt;/li&gt;
&lt;li&gt;由 % 字符开头的转换说明符号，每个都会从后面取出若干个参数，按照相应的转换规则（如果适用）转换并将结果写入输出流&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="C++" scheme="http://www.hashcoding.net/categories/C/"/>
    
    
      <category term="C" scheme="http://www.hashcoding.net/tags/C/"/>
    
      <category term="C++" scheme="http://www.hashcoding.net/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>常用Linux工具整理</title>
    <link href="http://www.hashcoding.net/2017/05/03/%E5%B8%B8%E7%94%A8Linux%E5%B7%A5%E5%85%B7%E6%95%B4%E7%90%86/"/>
    <id>http://www.hashcoding.net/2017/05/03/常用Linux工具整理/</id>
    <published>2017-05-03T09:31:54.000Z</published>
    <updated>2017-05-03T12:29:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>记录本人常用Linux命令</p><a id="more"></a><h1 id="C"><a href="#C" class="headerlink" title="C"></a>C</h1><h2 id="Cloc"><a href="#Cloc" class="headerlink" title="Cloc"></a>Cloc</h2><p>Cloc是一款使用Perl语言开发的开源代码统计工具，支持多平台使用、多语言识别，能够计算指定目标文件或文件夹中的文件数（files）、空白行数（blank）、注释行数（comment）和代码行数（code）。</p><p>Cloc具备很多特性以致于让它更方便于使用、完善、拓展和便携。</p><ul><li>作为一个单一的独立形式存在的文件，Cloc只需要下载相应文件并运行这样最少的安装工作即可。</li><li>能够从源码文件中识别编程语言注释定义；</li><li>允许通过语言和项目来分开统计计算；</li><li>能够以纯文本、SQL、XML、YAML、逗号分隔等多样化的格式生成统计结果；</li><li>能够统计诸如tar、Zip等格式的压缩文件中的代码数；</li><li>有许多排除式的指令；</li><li>能够使用空格或者不常用的字符处理文件名和目录名；</li><li>不需要依赖外部标准的Perl语言配置；</li><li>支持多平台使用。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Usage: cloc [options] &lt;file(s)/dir(s)&gt; | &lt;set 1&gt; &lt;set 2&gt; | &lt;report files&gt;</span><br></pre></td></tr></table></figure><h3 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h3><p>// TODO: </p><h1 id="G"><a href="#G" class="headerlink" title="G"></a>G</h1><h2 id="GDB"><a href="#GDB" class="headerlink" title="GDB"></a>GDB</h2><h3 id="开始和停止"><a href="#开始和停止" class="headerlink" title="开始和停止"></a>开始和停止</h3><p><code>quit</code>: 退出GDB<br><code>run</code>: 运行程序（在此给出命令行参数）<br><code>kill</code>: 停止程序</p><h3 id="断点"><a href="#断点" class="headerlink" title="断点"></a>断点</h3><p><code>break sum</code>: 在函数 sum 入口设置断点<br><code>break *0x8048394</code>: 在地址 0x8048394 处设置断点<br><code>delete 1</code>: 删除断点1<br><code>delete</code>: 删除所有断点</p><h3 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h3><p><code>stepi</code>: 执行一条指令<br><code>stepi 4</code>: 执行四条指令<br><code>nexti</code>: 类似<code>stepi</code>，但是以函数调用为单位<br><code>continue</code>: 继续执行<br><code>finish</code>: 运行到当前函数返回</p><h3 id="检查代码"><a href="#检查代码" class="headerlink" title="检查代码"></a>检查代码</h3><p><code>disas</code>: 反汇编当前函数<br><code>disas sum</code>: 反汇编函数<code>sum</code><br><code>disas 0x000001</code>: 反汇编位于地址 0x000001 附近的函数<br><code>disas 0x000000 0x000001</code>: 反汇编指定范围的代码<br><code>print /x $eip</code>: 以十六进制输出程序计数器的内容</p><h3 id="检查数据"><a href="#检查数据" class="headerlink" title="检查数据"></a>检查数据</h3><p><code>print $eax</code>: 以十进制数出 $eax 的内容<br><code>print /x $eax</code>: 以十六进制输出<br><code>print /t $eax</code>: 以二进制输出<br><code>print sum</code>: 输出sum的值<br><code>print *(int*)sum</code>: 输出sum指向int的值<br><code>x/20b sum</code>: 检查函数sum的前20个字节<br><code>x/2w 0xfff076b0</code>: 检查0xfff076b0开始的4字节</p><h3 id="有用的信息"><a href="#有用的信息" class="headerlink" title="有用的信息"></a>有用的信息</h3><p><code>info frame</code>: 有关与当前栈帧的信息<br><code>info registers</code>: 所有寄存器的值<br><code>help</code>: 显示GDB的帮助信息</p><h1 id="O"><a href="#O" class="headerlink" title="O"></a>O</h1><h2 id="Objdump"><a href="#Objdump" class="headerlink" title="Objdump"></a>Objdump</h2><h3 id="info"><a href="#info" class="headerlink" title="info"></a>info</h3><p>Display infomation from object files.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int main(void) &#123;</span><br><span class="line">  printf(&quot;hello world&quot;);</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<code>gcc hello.c</code>生成<code>hello.o</code>文件，下面使用<code>hello.o</code>作为源文件使用objdump。</p><h3 id="usage"><a href="#usage" class="headerlink" title="usage"></a>usage</h3><p><code>-f, --file-headers</code> 显示整个文件头部的内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/mnt/d/tmp$ objdump -f hello.o</span><br><span class="line"></span><br><span class="line">hello.o:     file format elf64-x86-64</span><br><span class="line">architecture: i386:x86-64, flags 0x00000011:</span><br><span class="line">HAS_RELOC, HAS_SYMS</span><br><span class="line">start address 0x0000000000000000</span><br></pre></td></tr></table></figure><p><code>-h, --[section]-headers</code> 显示文件的<code>section</code>头信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">/mnt/d/tmp$ objdump -h hello.o</span><br><span class="line"></span><br><span class="line">hello.o:     file format elf64-x86-64</span><br><span class="line"></span><br><span class="line">Sections:</span><br><span class="line">Idx Name          Size      VMA               LMA               File off  Algn</span><br><span class="line">  0 .text         0000001a  0000000000000000  0000000000000000  00000040  2**0</span><br><span class="line">                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE</span><br><span class="line">  1 .data         00000000  0000000000000000  0000000000000000  0000005a  2**0</span><br><span class="line">                  CONTENTS, ALLOC, LOAD, DATA</span><br><span class="line">  2 .bss          00000000  0000000000000000  0000000000000000  0000005a  2**0</span><br><span class="line">                  ALLOC</span><br><span class="line">  3 .rodata       0000000c  0000000000000000  0000000000000000  0000005a  2**0</span><br><span class="line">                  CONTENTS, ALLOC, LOAD, READONLY, DATA</span><br><span class="line">  4 .comment      00000035  0000000000000000  0000000000000000  00000066  2**0</span><br><span class="line">                  CONTENTS, READONLY</span><br><span class="line">  5 .note.GNU-stack 00000000  0000000000000000  0000000000000000  0000009b  2**0</span><br><span class="line">                  CONTENTS, READONLY</span><br><span class="line">  6 .eh_frame     00000038  0000000000000000  0000000000000000  000000a0  2**3</span><br><span class="line">                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA</span><br></pre></td></tr></table></figure><p>Idx 是编号，Name 是节点名称，Size 是节大小，VMA 是在虚拟内存中的起点，LMA 是节的装载地址（除了ROM之外，通常与 VMA 相同），File off 是在文件中的具体偏移，Algn 是对齐地址。各节第二行描述了节的属性。CONTENTS 表示节在文件中占用了内存空间，ALLOC 则表示需要分配内存，RELOC 表示需要重定位。</p><p><code>-d, --disassemble</code> 显示可执行<code>section</code>的反汇编代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">/mnt/d/tmp$ objdump --disassemble hello.o</span><br><span class="line"></span><br><span class="line">hello.o:     file format elf64-x86-64</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disassembly of section .text:</span><br><span class="line"></span><br><span class="line">0000000000000000 &lt;main&gt;:</span><br><span class="line">   0:   55                      push   %rbp</span><br><span class="line">   1:   48 89 e5                mov    %rsp,%rbp</span><br><span class="line">   4:   bf 00 00 00 00          mov    $0x0,%edi</span><br><span class="line">   9:   b8 00 00 00 00          mov    $0x0,%eax</span><br><span class="line">   e:   e8 00 00 00 00          callq  13 &lt;main+0x13&gt;</span><br><span class="line">  13:   b8 00 00 00 00          mov    $0x0,%eax</span><br><span class="line">  18:   5d                      pop    %rbp</span><br><span class="line">  19:   c3                      retq</span><br></pre></td></tr></table></figure><p><code>-D, --disassemble-all</code> 显示所有<code>section</code>的反汇编</p><p>NOTICE: <strong>反汇编过程中使用 <code>-M</code> 可以设置反汇编格式：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">(multiple options should be separated by commas):</span><br><span class="line">  x86-64      Disassemble in 64bit mode</span><br><span class="line">  i386        Disassemble in 32bit mode</span><br><span class="line">  i8086       Disassemble in 16bit mode</span><br><span class="line">  att         Display instruction in AT&amp;T syntax</span><br><span class="line">  intel       Display instruction in Intel syntax</span><br><span class="line">  att-mnemonic</span><br><span class="line">              Display instruction in AT&amp;T mnemonic</span><br><span class="line">  intel-mnemonic</span><br><span class="line">              Display instruction in Intel mnemonic</span><br><span class="line">  addr64      Assume 64bit address size</span><br><span class="line">  addr32      Assume 32bit address size</span><br><span class="line">  addr16      Assume 16bit address size</span><br><span class="line">  data32      Assume 32bit data size</span><br><span class="line">  data16      Assume 16bit data size</span><br><span class="line">  suffix      Always display instruction suffix in AT&amp;T syntax</span><br><span class="line">  amd64       Display instruction in AMD64 ISA</span><br><span class="line">  intel64     Display instruction in Intel64 ISA</span><br></pre></td></tr></table></figure><p>比如要显示 Intel 格式的汇编代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">/mnt/d/tmp$ objdump --disassemble -M intel hello.o</span><br><span class="line"></span><br><span class="line">hello.o:     file format elf64-x86-64</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disassembly of section .text:</span><br><span class="line"></span><br><span class="line">0000000000000000 &lt;main&gt;:</span><br><span class="line">   0:   55                      push   rbp</span><br><span class="line">   1:   48 89 e5                mov    rbp,rsp</span><br><span class="line">   4:   bf 00 00 00 00          mov    edi,0x0</span><br><span class="line">   9:   b8 00 00 00 00          mov    eax,0x0</span><br><span class="line">   e:   e8 00 00 00 00          call   13 &lt;main+0x13&gt;</span><br><span class="line">  13:   b8 00 00 00 00          mov    eax,0x0</span><br><span class="line">  18:   5d                      pop    rbp</span><br><span class="line">  19:   c3                      ret</span><br></pre></td></tr></table></figure><p><code>-t, --syms</code> 显示符号表内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">/mnt/d/tmp$ objdump -t hello.o</span><br><span class="line"></span><br><span class="line">hello.o:     file format elf64-x86-64</span><br><span class="line"></span><br><span class="line">SYMBOL TABLE:</span><br><span class="line">0000000000000000 l    df *ABS*  0000000000000000 hello.c</span><br><span class="line">0000000000000000 l    d  .text  0000000000000000 .text</span><br><span class="line">0000000000000000 l    d  .data  0000000000000000 .data</span><br><span class="line">0000000000000000 l    d  .bss   0000000000000000 .bss</span><br><span class="line">0000000000000000 l    d  .rodata        0000000000000000 .rodata</span><br><span class="line">0000000000000000 l    d  .note.GNU-stack        0000000000000000 .note.GNU-stack</span><br><span class="line">0000000000000000 l    d  .eh_frame      0000000000000000 .eh_frame</span><br><span class="line">0000000000000000 l    d  .comment       0000000000000000 .comment</span><br><span class="line">0000000000000000 g     F .text  000000000000001a main</span><br><span class="line">0000000000000000         *UND*  0000000000000000 printf</span><br></pre></td></tr></table></figure><p>各列分别是界内偏移，标记位，所在节，对齐方式和符号名。<code>*ABS*</code> 表示这是一个不和任何节相关的绝对符号，<code>*UND*</code>则这个符号不在本文件中定义，<code>*COM*</code> 表示还未分配位置的未初始化数据目标。</p><p><code>-T, --dynamic-syms</code> 显示文件的动态符号表入口,仅仅对动态目标文件有意义，比如共享库。</p><p><code>-r, --reloc</code> 显示重定位入口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">:/mnt/d/tmp$ objdump -r hello.o</span><br><span class="line"></span><br><span class="line">hello.o:     file format elf64-x86-64</span><br><span class="line"></span><br><span class="line">RELOCATION RECORDS FOR [.text]:</span><br><span class="line">OFFSET           TYPE              VALUE</span><br><span class="line">0000000000000005 R_X86_64_32       .rodata</span><br><span class="line">000000000000000f R_X86_64_PC32     printf-0x0000000000000004</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">RELOCATION RECORDS FOR [.eh_frame]:</span><br><span class="line">OFFSET           TYPE              VALUE</span><br><span class="line">0000000000000020 R_X86_64_PC32     .text</span><br></pre></td></tr></table></figure><p>分别表示 text 和 eh_frame 节的重定位表。所谓重定位表是指代码中需要回填地址的表，链接器重定位算法大概如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">foreach section s &#123;</span><br><span class="line">  foreach relocation entry r &#123;</span><br><span class="line">    refptr = s + r.offset;</span><br><span class="line">    if (r.type == XXXX_PC32) &#123;</span><br><span class="line">      refaddr = ADDR(s) + r.offset;</span><br><span class="line">      *refptr = ADDR(r.symbol) + *refptr - refaddr;</span><br><span class="line">    &#125;</span><br><span class="line">    if (r.type == XXXX_32) &#123;</span><br><span class="line">      *refptr = ADDR(r.symbol) + *refptr;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果配合<code>d D</code>使用,则以反汇编以后的格式显示:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">/mnt/d/tmp$ objdump -rd hello.o</span><br><span class="line"></span><br><span class="line">hello.o:     file format elf64-x86-64</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disassembly of section .text:</span><br><span class="line"></span><br><span class="line">0000000000000000 &lt;main&gt;:</span><br><span class="line">   0:   55                      push   %rbp</span><br><span class="line">   1:   48 89 e5                mov    %rsp,%rbp</span><br><span class="line">   4:   bf 00 00 00 00          mov    $0x0,%edi</span><br><span class="line">                        5: R_X86_64_32  .rodata</span><br><span class="line">   9:   b8 00 00 00 00          mov    $0x0,%eax</span><br><span class="line">   e:   e8 00 00 00 00          callq  13 &lt;main+0x13&gt;</span><br><span class="line">                        f: R_X86_64_PC32        printf-0x4</span><br><span class="line">  13:   b8 00 00 00 00          mov    $0x0,%eax</span><br><span class="line">  18:   5d                      pop    %rbp</span><br><span class="line">  19:   c3                      retq</span><br></pre></td></tr></table></figure><p><code>-R, --dynamic-reloc</code> 显示动态重定位入口，仅仅对动态文件起作用。</p><h1 id="T"><a href="#T" class="headerlink" title="T"></a>T</h1><h2 id="time"><a href="#time" class="headerlink" title="time"></a>time</h2><p>来自: <a href="http://man.linuxde.net/time" target="_blank" rel="noopener">Linux Man 手册</a><br>time命令用于统计给定命令所花费的总时间。 </p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">time 参数</span><br></pre></td></tr></table></figure><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><p>指令：指定需要运行的额指令及其参数。<br>实例 当测试一个程序或比较不同算法时，执行时间是非常重要的，一个好的算法应该是用时最短的。所有类UNIX系统都包含time命令，使用这个命令可以统计时间消耗。例如： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# time ls </span><br><span class="line">anaconda-ks.cfg install.log install.log.syslog satools text </span><br><span class="line"></span><br><span class="line">real 0m0.009s </span><br><span class="line">user 0m0.002s </span><br><span class="line">sys 0m0.007s</span><br></pre></td></tr></table></figure><p>输出的信息分别显示了该命令所花费的real时间、user时间和sys时间。 </p><p>real时间是指挂钟时间，也就是命令开始执行到结束的时间。这个短时间包括其他进程所占用的时间片，和进程被阻塞时所花费的时间。 </p><p>user时间是指进程花费在用户模式中的CPU时间，这是唯一真正用于执行进程所花费的时间，其他进程和花费阻塞状态中的时间没有计算在内。 sys时间是指花费在内核模式中的CPU时间，代表在内核中执系统调用所花费的时间，这也是真正由进程使用的CPU时间。 </p><p>shell内建也有一个time命令，当运行time时候是调用的系统内建命令，应为系统内建的功能有限，所以需要时间其他功能需要使用time命令可执行二进制文件/usr/bin/time。 </p><p>使用-o选项将执行时间写入到文件中： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/time -o outfile.txt ls</span><br></pre></td></tr></table></figure><p>使用-a选项追加信息： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/time -a -o outfile.txt ls</span><br></pre></td></tr></table></figure><p>使用-f选项格式化时间输出： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/time -f &quot;time: %U&quot; ls</span><br></pre></td></tr></table></figure><p>-f选项后的参数：<br>参数    描述<br>%E    real时间，显示格式为[小时:]分钟:秒<br>%U    user时间。<br>%S    sys时间。<br>%C    进行计时的命令名称和命令行参数。<br>%D    进程非共享数据区域，以KB为单位。<br>%x    命令退出状态。<br>%k    进程接收到的信号数量。<br>%w    进程被交换出主存的次数。<br>%Z    系统的页面大小，这是一个系统常量，不用系统中常量值也不同。<br>%P    进程所获取的CPU时间百分百，这个值等于user+system时间除以总共的运行时间。<br>%K    进程的平均总内存使用量（data+stack+text），单位是KB。<br>%w    进程主动进行上下文切换的次数，例如等待I/O操作完成。<br>%c    进程被迫进行上下文切换的次数（由于时间片到期）。</p><h1 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h1><h2 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h2><h3 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h3><h4 id="APT-安装"><a href="#APT-安装" class="headerlink" title="APT 安装"></a>APT 安装</h4><p>普通安装：<code>apt install softname1 softname2 ...</code><br>修复安装: <code>apt -f install softname1 softname2 ...</code><br>重新安装: <code>apt --reinstall install ....</code></p><h4 id="DPKG-安装"><a href="#DPKG-安装" class="headerlink" title="DPKG 安装"></a>DPKG 安装</h4><p><code>dpkg -i package_name.deb</code></p><h4 id="源码安装"><a href="#源码安装" class="headerlink" title="源码安装"></a>源码安装</h4><p>通过tar解压，然后configure后make install</p><p>tar: <code>tar method filename</code></p><p>.tar.gz, .tar.Z, .tgz: <code>zxf</code><br>.tar: <code>xf</code></p><p>.bz2: <code>bunzip xx.bz2</code></p><h3 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h3><h4 id="APT方式"><a href="#APT方式" class="headerlink" title="APT方式"></a>APT方式</h4><p>移除式卸载：<code>apt-get remove softname1 softname2 …</code>;（移除软件包，当包尾部有+时，意为安装）</p><p>清除式卸载 ：<code>apt-get --purge remove softname1 softname2...</code>;(同时清除配置)</p><p>清除式卸载：<code>apt-get purge sofname1 softname2...</code>;(同上，也清除配置文件)</p><h4 id="Dpkg方式"><a href="#Dpkg方式" class="headerlink" title="Dpkg方式"></a>Dpkg方式</h4><p>移除式卸载：<code>dpkg -r pkg1 pkg2 ...</code>;</p><p>清除式卸载：<code>dpkg -P pkg1 pkg2...</code>;</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录本人常用Linux命令&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://www.hashcoding.net/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode - 32 Longest Valid Parenthess</title>
    <link href="http://www.hashcoding.net/2017/03/13/LeetCode-32-Longest-Valid-Parenthess/"/>
    <id>http://www.hashcoding.net/2017/03/13/LeetCode-32-Longest-Valid-Parenthess/</id>
    <published>2017-03-13T04:55:22.000Z</published>
    <updated>2017-06-12T11:57:53.816Z</updated>
    
    <content type="html"><![CDATA[<h1 id="problem"><a href="#problem" class="headerlink" title="problem"></a>problem</h1><p><a href="https://leetcode.com/problems/longest-valid-parentheses/#/description" target="_blank" rel="noopener">Longest Valid Parenthess</a></p><a id="more"></a><h1 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h1><p><code>((())))())())(()())</code>，如果把这个中所有符合条件的找出来：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">((()))   ) () ) (()())</span><br></pre></td></tr></table></figure><p>此时发现单独出现的 <code>)</code> 是作为分隔符出现的。只要统计 <code>)</code> 出现的次数就可以得到解。</p><h1 id="code"><a href="#code" class="headerlink" title="code"></a>code</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int longestValidParentheses(string s) &#123;</span><br><span class="line">        int n = s.length(), longest = 0;</span><br><span class="line">        stack&lt;int&gt; st;</span><br><span class="line">        for (int i = 0; i &lt; n; i++) &#123;</span><br><span class="line">            if (s[i] == &apos;(&apos;) st.push(i);</span><br><span class="line">            else &#123;</span><br><span class="line">                if (!st.empty()) &#123;</span><br><span class="line">                    if (s[st.top()] == &apos;(&apos;) st.pop();</span><br><span class="line">                    else st.push(i);</span><br><span class="line">                &#125;</span><br><span class="line">                else st.push(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if (st.empty()) longest = n;</span><br><span class="line">        else &#123;</span><br><span class="line">            int a = n, b = 0;</span><br><span class="line">            while (!st.empty()) &#123;</span><br><span class="line">                b = st.top(); st.pop();</span><br><span class="line">                longest = max(longest, a-b-1);</span><br><span class="line">                a = b;</span><br><span class="line">            &#125;</span><br><span class="line">            longest = max(longest, a);</span><br><span class="line">        &#125;</span><br><span class="line">        return longest;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;problem&quot;&gt;&lt;a href=&quot;#problem&quot; class=&quot;headerlink&quot; title=&quot;problem&quot;&gt;&lt;/a&gt;problem&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/longest-valid-parentheses/#/description&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Longest Valid Parenthess&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://www.hashcoding.net/categories/LeetCode/"/>
    
    
      <category term="Algorithm" scheme="http://www.hashcoding.net/tags/Algorithm/"/>
    
      <category term="LeetCode" scheme="http://www.hashcoding.net/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>Effective Modern C++ - Type deduction</title>
    <link href="http://www.hashcoding.net/2017/03/12/Effective-Modern-C-Type-deduction/"/>
    <id>http://www.hashcoding.net/2017/03/12/Effective-Modern-C-Type-deduction/</id>
    <published>2017-03-12T13:54:36.000Z</published>
    <updated>2017-06-12T11:59:19.771Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h1 id="模板类型推导"><a href="#模板类型推导" class="headerlink" title="模板类型推导"></a>模板类型推导</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">template&lt;class Type&gt;</span><br><span class="line">void f(ParamType p);</span><br></pre></td></tr></table></figure><p>如上述代码，对于模板有两种类型需要推导。而具体推导细节有三种方案：</p><ol><li>ParamType 为引用，但非 <code>universal reference</code>；</li><li>ParamType 为 <code>universal reference</code>；</li><li>ParamType 非引用</li></ol><h2 id="一"><a href="#一" class="headerlink" title="一"></a>一</h2><p>对于第一种情况，推导方式如下：</p><ol><li>参数如果为引用，那么忽略；</li><li>剩下部分与 ParamType 做匹配得出 Type 类型</li></ol><h2 id="二"><a href="#二" class="headerlink" title="二"></a>二</h2><p>第二种情况涉及到引用折叠。</p><ol><li>如果参数为左值引用，那么 Type 和 ParamType 类型为左值引用；</li><li>如果参数为右值引用，那么应用方案一的情况</li></ol><h2 id="三"><a href="#三" class="headerlink" title="三"></a>三</h2><p>这种情况下，参数默认以 “pass by value” 的方式传递：</p><ol><li>如果参数为引用，忽略引用部分；</li><li>忽略后以值拷贝规则匹配 Type 类型；</li></ol><h1 id="auto"><a href="#auto" class="headerlink" title="auto"></a>auto</h1><p>auto 类型推导和模板类型推导的唯一区别是关于处理 <code>braced initializer</code> 的区别：</p><blockquote><p>auto 认为 braced initializer 表示为 <code>std::initialzier</code> 列表</p></blockquote><p>同时，在 C++ 14 中，auto 还可以用于推导返回值类型，此时规则等同于模板类型推导。</p><h1 id="decltype"><a href="#decltype" class="headerlink" title="decltype"></a>decltype</h1><p>不同于 auto，decltype 返回表达式的具体类型。decltype 的更多用于推导与参数类型相关的返回类型：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">auto f(int a) -&gt; decltype(a) &#123;&#125;</span><br></pre></td></tr></table></figure><p>因为 C++ 14 中可以使用 auto 推导返回值类型，而 auto 推导规则限定不太灵活。此时提供了 <code>decltype(auto)</code> 来完美推导返回值类型（<code>decltype(auto)</code> 也可以用于定义变量）。</p><p>C++ 中规定 (x) 返回的是左值引用，所以 <code>decltype(x)</code> 和 <code>decltype((x))</code> 是不同的类型。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;模板类型推导&quot;&gt;&lt;a href=&quot;#模板类型推导&quot; class=&quot;headerlink&quot; title=&quot;模板类型推导&quot;&gt;&lt;/a&gt;模板类型推导&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;
      
    
    </summary>
    
      <category term="C++" scheme="http://www.hashcoding.net/categories/C/"/>
    
    
      <category term="C++" scheme="http://www.hashcoding.net/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode - 28 Implement strStr()</title>
    <link href="http://www.hashcoding.net/2017/03/12/LeetCode-28-Implement-strStr/"/>
    <id>http://www.hashcoding.net/2017/03/12/LeetCode-28-Implement-strStr/</id>
    <published>2017-03-12T07:28:14.000Z</published>
    <updated>2017-06-12T11:57:50.541Z</updated>
    
    <content type="html"><![CDATA[<h1 id="problem"><a href="#problem" class="headerlink" title="problem"></a>problem</h1><p><a href="https://leetcode.com/problems/implement-strstr/" target="_blank" rel="noopener">Implement strStr</a></p><a id="more"></a><h1 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h1><p>这道题很明显使用 mp 算法进行字符串匹配。</p><h2 id="MP-算法"><a href="#MP-算法" class="headerlink" title="MP 算法"></a>MP 算法</h2><p>假设原字符串：<code>abbaabbaaba</code>, 匹配字符串 <code>abbaaba</code>。现在我们要从原字符串中找到第一个满足匹配字符串的位置。一般的算法是匹配失败后从新开始匹配：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">abbaabbaaba</span><br><span class="line">匹配过程：</span><br><span class="line">abbaab|x</span><br><span class="line"> x</span><br><span class="line">  x</span><br><span class="line">   ax</span><br><span class="line">    ab|baaba</span><br></pre></td></tr></table></figure><p>这种办法效率并不高，并不能利用我们已经知道的信息。观察有两个竖线分割开的部分，两部分左边有相同部分，如何把这部分信息利用起来就是 MP 算法的工作。</p><p>这里已经知道了匹配过程中失败了我们可以使用前缀信息来跳过部分无用匹配。现在将匹配字符串 <code>abbaaba</code> 的前缀展开：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1   a</span><br><span class="line">2   ab</span><br><span class="line">3   abb</span><br><span class="line">4   abba</span><br><span class="line">5   abbaa</span><br><span class="line">6   abbaab</span><br><span class="line">7   abbaaba</span><br></pre></td></tr></table></figure><p>可以发现：</p><ol><li>与 4 后缀匹配的最长前缀是 1</li><li>与 4 后缀匹配的最长前缀是 1</li><li>与 6 后缀匹配的最长前缀是 2</li><li>与 7 后缀匹配的最长前缀是 1</li></ol><p>如何计算呢？假设 <code>prefix[i]</code> 表示i匹配的最长前缀是第几个，那么有：</p><ol><li>对于 i=1 时，没有任何前缀；</li><li>当 i&gt;1 时，等于i-1的最长前缀的下一个字符和当前字符进行判断的结果</li></ol><p>为了方便将定义改为 <code>fail[i+1]</code> 表示i匹配的最长前缀的下一个字符所在位置，所以计算fail的代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;int&gt; getNext(string &amp;str) &#123;</span><br><span class="line">    vector&lt;int&gt; failed(str.size()+1, 0);</span><br><span class="line">    for (int i = 1; i &lt; str.size(); ++i) &#123;</span><br><span class="line">        int j = failed[i];</span><br><span class="line">        while (j &amp;&amp; str[j] != str[i]) j = failed[j];</span><br><span class="line">        failed[i+1] = str[j] == str[i] ? j+1 : 0;</span><br><span class="line">    &#125;</span><br><span class="line">    return failed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果匹配失败了，我们还可以继续以前缀的最长前缀继续寻找知道没有任何匹配前缀。</p><p>有了前缀后，就可以使用fail计算最长匹配。</p><h1 id="code"><a href="#code" class="headerlink" title="code"></a>code</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int strStr(string haystack, string needle) &#123;</span><br><span class="line">        if (needle.empty()) return 0;</span><br><span class="line">        </span><br><span class="line">        vector&lt;int&gt; failed = getNext(needle);</span><br><span class="line">        int j = 0;</span><br><span class="line">        for (int i = 0; i &lt; haystack.size(); ++i) &#123;</span><br><span class="line">            while (j &amp;&amp; haystack[i] != needle[j]) j = failed[j];</span><br><span class="line">            if (haystack[i] == needle[j]) j++;</span><br><span class="line">            if (j == needle.size()) return i-j+1;</span><br><span class="line">        &#125;</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    vector&lt;int&gt; getNext(string &amp;str) &#123;</span><br><span class="line">        vector&lt;int&gt; failed(str.size()+5, 0);</span><br><span class="line">        for (int i = 1; i &lt; str.size(); ++i) &#123;</span><br><span class="line">            int j = failed[i];</span><br><span class="line">            while (j &amp;&amp; str[j] != str[i]) j = failed[j];</span><br><span class="line">            failed[i+1] = str[j] == str[i] ? j+1 : 0;</span><br><span class="line">        &#125;</span><br><span class="line">        return failed;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;problem&quot;&gt;&lt;a href=&quot;#problem&quot; class=&quot;headerlink&quot; title=&quot;problem&quot;&gt;&lt;/a&gt;problem&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/implement-strstr/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Implement strStr&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://www.hashcoding.net/categories/LeetCode/"/>
    
    
      <category term="Algorithm" scheme="http://www.hashcoding.net/tags/Algorithm/"/>
    
      <category term="LeetCode" scheme="http://www.hashcoding.net/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode - 15-3 Sum</title>
    <link href="http://www.hashcoding.net/2017/03/08/LeetCode-15-3-Sum/"/>
    <id>http://www.hashcoding.net/2017/03/08/LeetCode-15-3-Sum/</id>
    <published>2017-03-08T04:53:40.000Z</published>
    <updated>2017-06-12T11:57:46.086Z</updated>
    
    <content type="html"><![CDATA[<h1 id="problem"><a href="#problem" class="headerlink" title="problem"></a>problem</h1><p><a href="https://leetcode.com/problems/3sum" target="_blank" rel="noopener">3 Sum</a></p><a id="more"></a><h1 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h1><p>最简单的办法是 n^3。如果我们对数组排序，使用 n^2 生成和，logn 查找，则可以降到 n^2 * logn。如果对 n^2进行查找呢？那么可以将匹配部分降低到 2nlogn。所以问题变成了求n^2内生成一个有序的n^2数组，不过这个问题也很困难。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for (int i = 0; i &lt; length - 2; ++i) </span><br><span class="line">    for (int j = i+1; j &lt; length - 1; ++j) </span><br><span class="line">        cmp nums[i] + nums[j]</span><br></pre></td></tr></table></figure><p>通过上面的代码发现虽然无法将整个 n^2 数组排序，但是对于每一层的i，生成的和一定是有序的。也就是说 <code>nums[0] + nums[1]</code> 一定小于 <code>nums[0] + nums[2]</code>，那么我们不需要对 n 的数组使用二分查找，只需从后向前遍历。对于每一层 i ，只需要对 N 的数组编译一次， 总共 n^2 次。所以目前的总效率为排序 nlogn 加上 n^2。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">for (int i = 0; i &lt; length - 2; ++i) &#123;</span><br><span class="line">    int k = length - 1;</span><br><span class="line">    for (int j = i + 1; j &lt; length - 1; ++j) &#123;</span><br><span class="line">        int sum = nums[i] + nums[j];</span><br><span class="line">        while (sum + nums[k] &gt;= 0) &#123;</span><br><span class="line">            if (sum + nums[k] == 0) &#123;</span><br><span class="line">                // push i j k</span><br><span class="line">            &#125;</span><br><span class="line">            else &#123;</span><br><span class="line">                k--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面是题解的大概逻辑。到这里我们可以发现等同于另外一种思路：对于 i ，存在 j 和 k，如果 <code>sum = nums[i] + nums[j] + nums[k]</code> 为 0 ，那么对于任意有 l,m (j &lt; l, m &lt; k)，至少要满足 <code>nums[j] &lt; nums[l] &amp; nums[k] &gt; nums[m]</code> 才能为 0 。所以上述方法也可以写成下面的代码：</p><h1 id="code"><a href="#code" class="headerlink" title="code"></a>code</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    vector&lt;vector&lt;int&gt;&gt; threeSum(vector&lt;int&gt;&amp; nums) &#123;</span><br><span class="line">        vector&lt;vector&lt;int&gt;&gt; resultSet;</span><br><span class="line">        if (nums.size() &lt; 3)</span><br><span class="line">            return resultSet;</span><br><span class="line">        </span><br><span class="line">        std::sort(nums.begin(), nums.end());</span><br><span class="line">        int length = nums.size();</span><br><span class="line">        for (int i = 0; i &lt;= length - 3; ++i) &#123;</span><br><span class="line">            int j = length - 1, k = i + 1;</span><br><span class="line">            while (k &lt; j) &#123;</span><br><span class="line">                int sum = nums[k] + nums[j] + nums[i];</span><br><span class="line">                if (sum == 0) &#123;</span><br><span class="line">                    resultSet.push_back(&#123;nums[i], nums[k], nums[j]&#125;);</span><br><span class="line">                    k++, j--;</span><br><span class="line">                    while (k &lt; j &amp;&amp; nums[k] == nums[k-1]) k++;</span><br><span class="line">                    while (k &lt; j &amp;&amp; nums[j] == nums[j+1]) j--;</span><br><span class="line">                &#125;</span><br><span class="line">                else if (sum &gt; 0) &#123;</span><br><span class="line">                    j--;</span><br><span class="line">                &#125;</span><br><span class="line">                else &#123;</span><br><span class="line">                    k++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            while (i &lt;= length - 3 &amp;&amp; nums[i] == nums[i+1]) ++i;</span><br><span class="line">        &#125;</span><br><span class="line">        return resultSet;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>其中涉及到 i,j,k 的三个 while 主要用于避免重复。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;problem&quot;&gt;&lt;a href=&quot;#problem&quot; class=&quot;headerlink&quot; title=&quot;problem&quot;&gt;&lt;/a&gt;problem&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/3sum&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;3 Sum&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://www.hashcoding.net/categories/LeetCode/"/>
    
    
      <category term="Algorithm" scheme="http://www.hashcoding.net/tags/Algorithm/"/>
    
      <category term="LeetCode" scheme="http://www.hashcoding.net/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode - 11-Container With Most Water</title>
    <link href="http://www.hashcoding.net/2017/03/07/LeetCode-11-Container-With-Most-Water/"/>
    <id>http://www.hashcoding.net/2017/03/07/LeetCode-11-Container-With-Most-Water/</id>
    <published>2017-03-07T04:41:38.000Z</published>
    <updated>2017-06-12T11:57:42.058Z</updated>
    
    <content type="html"><![CDATA[<h1 id="problem"><a href="#problem" class="headerlink" title="problem"></a>problem</h1><p><a href="https://leetcode.com/problems/container-with-most-water/?tab=Description" target="_blank" rel="noopener">Container With Most Water</a></p><a id="more"></a><h1 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h1><p>这道题目直观的解法是每对线都比较一次，直到最大的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int maxArea(vector&lt;int&gt;&amp; height) &#123;</span><br><span class="line">        int m = 0;</span><br><span class="line">        for (int i = 0; i &lt; height.size()-1; ++i) &#123;</span><br><span class="line">            for (int j = 1; j &lt; height.size(); ++j) &#123;</span><br><span class="line">                int value = (j-i) * min(height[i], height[j]);</span><br><span class="line">                if (value &gt; m)</span><br><span class="line">                    m = value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return m;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    int min(int l, int r) &#123;</span><br><span class="line">        return l &lt; r ? l : r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这样效率肯定不够高，会超时。</p><p>我们换一个角度来看，容积取决于最短的线。那么容积中最短的线，其与最远距离的乘积为容量。重复此操作就可以找到最大容积。所以问题就变成了求 a 到左边和右边最远的&gt;= a的点的距离。这个仍然不好求，换个角度来看，就是求a点出发，所有小于等于a的点的最大值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    struct Point &#123;</span><br><span class="line">        int idx;</span><br><span class="line">        int height;</span><br><span class="line">        bool operator &lt; (const Point &amp;rhs) const &#123;</span><br><span class="line">            return height &gt; rhs.height || (height == rhs.height &amp;&amp; idx &gt; rhs.idx);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    void fill(priority_queue&lt;Point&gt; &amp;queue, const vector&lt;int&gt; &amp;height) &#123;</span><br><span class="line">        for (size_t i = 0; i &lt; height.size(); ++i) &#123;</span><br><span class="line">            queue.push(Point&#123;i, height[i]&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    int maxArea(vector&lt;int&gt;&amp; height) &#123;</span><br><span class="line">        priority_queue&lt;Point&gt; left;</span><br><span class="line">        fill(left, height);</span><br><span class="line">        </span><br><span class="line">        priority_queue&lt;Point&gt; right = left;</span><br><span class="line">        </span><br><span class="line">        int size = height.size(), result = 0;</span><br><span class="line">        for (int i = 0; i &lt; size - 1; ++i) &#123;</span><br><span class="line">            while (!left.empty()) &#123;</span><br><span class="line">                Point point = left.top();</span><br><span class="line">                if (point.height &gt; height[i])</span><br><span class="line">                    break;</span><br><span class="line">                left.pop();</span><br><span class="line">                result = max(result, (point.idx - i) * point.height);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        for (int i = size - 1; i &gt; 0; --i) &#123;</span><br><span class="line">            while (!right.empty()) &#123;</span><br><span class="line">                Point point = right.top();</span><br><span class="line">                if (point.height &gt; height[i])</span><br><span class="line">                    break;</span><br><span class="line">                right.pop();</span><br><span class="line">                result = max(result, (i - point.idx) * point.height);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这样的算法肯定能够通过测试了。但是仍然不够快，为什么？因为我们这种办法求出了所有的点能组成的最大值，然而题目中只要求最大的。现在考虑一种情况，如果比a小的且离a最远的旁边还有值，那么意味着所有针对a的计算全是白费的（想想为什么）。</p><p>根据刚才的启示，在 a 和 b 的中间，除非有两个大于 a 和 b 的值，否则 a 与 b 最大（想想为什么）。不过话说回来，这么简单的思路为什么一开始想不到呢？</p><h1 id="code"><a href="#code" class="headerlink" title="code"></a>code</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int maxArea(vector&lt;int&gt;&amp; height) &#123;</span><br><span class="line">        int water = 0;</span><br><span class="line">        int i = 0, j = height.size() - 1;</span><br><span class="line">        while (i &lt; j) &#123;</span><br><span class="line">            int h = min(height[i], height[j]);</span><br><span class="line">            water = max(water, (j - i) * h);</span><br><span class="line">            while (height[i] &lt;= h &amp;&amp; i &lt; j) i++;</span><br><span class="line">            while (height[j] &lt;= h &amp;&amp; i &lt; j) j--;</span><br><span class="line">        &#125;</span><br><span class="line">        return water;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;problem&quot;&gt;&lt;a href=&quot;#problem&quot; class=&quot;headerlink&quot; title=&quot;problem&quot;&gt;&lt;/a&gt;problem&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/container-with-most-water/?tab=Description&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Container With Most Water&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://www.hashcoding.net/categories/LeetCode/"/>
    
    
      <category term="Algorithm" scheme="http://www.hashcoding.net/tags/Algorithm/"/>
    
      <category term="LeetCode" scheme="http://www.hashcoding.net/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode - 10-Regular-Expression-Matching</title>
    <link href="http://www.hashcoding.net/2017/03/06/LeetCode-10-Regular-Expression/"/>
    <id>http://www.hashcoding.net/2017/03/06/LeetCode-10-Regular-Expression/</id>
    <published>2017-03-06T15:37:28.000Z</published>
    <updated>2017-06-12T11:57:38.093Z</updated>
    
    <content type="html"><![CDATA[<h1 id="problem"><a href="#problem" class="headerlink" title="problem"></a>problem</h1><p><a href="https://leetcode.com/problems/regular-expression-matching/?tab=Description" target="_blank" rel="noopener">regular-expression-matching</a></p><a id="more"></a><h1 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h1><p>这道题目需要注意 zero or more 的处理。我的办法是开始不吃掉任何字符，直接判断；只讨论不能匹配的，此时吃掉一个字符后再行判断，直到所有字符判断完毕。</p><h1 id="code"><a href="#code" class="headerlink" title="code"></a>code</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    struct Rule &#123;</span><br><span class="line">        bool zeroOrMore;</span><br><span class="line">        char ch;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    bool isMatch(string s, string p) &#123;</span><br><span class="line">        return normalRule(parseRexpr(p), s.data());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    vector&lt;Rule&gt; parseRexpr(const string &amp;p) &#123;</span><br><span class="line">        vector&lt;Rule&gt; rules;</span><br><span class="line">        const char *s = p.data();</span><br><span class="line">        while (*s != &apos;\0&apos;) &#123;</span><br><span class="line">            bool rep = false;</span><br><span class="line">            char c = *s++;</span><br><span class="line">            if (*s == &apos;*&apos;) &#123;</span><br><span class="line">                rep = true;</span><br><span class="line">                s++;</span><br><span class="line">            &#125;</span><br><span class="line">            rules.push_back((Rule)&#123;rep, c&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        return rules;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    bool normalRule(const vector&lt;Rule&gt; &amp;rules, const char *p) &#123;</span><br><span class="line">        if (rules.empty() &amp;&amp; *p == &apos;\0&apos;)</span><br><span class="line">            return true;</span><br><span class="line">            </span><br><span class="line">        for (vector&lt;Rule&gt;::const_iterator it = rules.begin();</span><br><span class="line">            it != rules.end(); it++) &#123;</span><br><span class="line">            if (it-&gt;zeroOrMore) &#123;</span><br><span class="line">                char ch = it-&gt;ch;</span><br><span class="line">                return specialRule(vector&lt;Rule&gt;(++it, rules.end()), p, ch);</span><br><span class="line">            &#125;</span><br><span class="line">            else if (*p == &apos;\0&apos; || (it-&gt;ch != &apos;.&apos; &amp;&amp; it-&gt;ch != *p)) &#123;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">            else &#123;</span><br><span class="line">                p++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return *p == &apos;\0&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    bool specialRule(vector&lt;Rule&gt; rules, const char *p, char ch) &#123;</span><br><span class="line">        const char *tmp = p;</span><br><span class="line">        while (*tmp == ch || (ch == &apos;.&apos; &amp;&amp; *tmp != &apos;\0&apos;)) &#123;</span><br><span class="line">            if (normalRule(rules, tmp))</span><br><span class="line">                return true;</span><br><span class="line">            tmp++;</span><br><span class="line">        &#125;</span><br><span class="line">        return normalRule(rules, tmp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;problem&quot;&gt;&lt;a href=&quot;#problem&quot; class=&quot;headerlink&quot; title=&quot;problem&quot;&gt;&lt;/a&gt;problem&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/regular-expression-matching/?tab=Description&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;regular-expression-matching&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://www.hashcoding.net/categories/LeetCode/"/>
    
    
      <category term="Algorithm" scheme="http://www.hashcoding.net/tags/Algorithm/"/>
    
      <category term="LeetCode" scheme="http://www.hashcoding.net/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>Effective C++: Exception-safe code</title>
    <link href="http://www.hashcoding.net/2017/03/05/Effective-C-Exception-safe-code/"/>
    <id>http://www.hashcoding.net/2017/03/05/Effective-C-Exception-safe-code/</id>
    <published>2017-03-05T07:12:43.000Z</published>
    <updated>2017-06-12T11:59:13.006Z</updated>
    
    <content type="html"><![CDATA[<h1 id="异常安全"><a href="#异常安全" class="headerlink" title="异常安全"></a>异常安全</h1><p>异常安全的代码需要满足两个条件：</p><ol><li>异常中立性</li><li>异常安全性</li></ol><a id="more"></a><p>异常中立性是指任何底层的异常都能保持原样传递到外层调用代码。</p><p>而异常安全性也有两个条件：</p><ol><li>不泄露任何资源</li><li>不允许数据破坏</li></ol><p>只有满足上诉两个条件的函数才称为拥有异常安全性。</p><p>这里主要讨论异常安全性的保证。</p><h1 id="不泄露任何资源"><a href="#不泄露任何资源" class="headerlink" title="不泄露任何资源"></a>不泄露任何资源</h1><p>解决资源泄露的问题比较容易，可以通过智能指针等对象管理资源来确保资源被正确释放。</p><h1 id="不允许数据被破坏"><a href="#不允许数据被破坏" class="headerlink" title="不允许数据被破坏"></a>不允许数据被破坏</h1><ul><li><p>基本承诺：如果异常被抛出，程序内的任何事物仍然保持在有效状态下。没有任何对象或数据机构会因此而被破坏，所有对象都处于一种内部前后一致的状态。</p></li><li><p>强烈保证：如果异常被抛出，程序状态不改变。调用这样的函数需要有这样的认知：如果函数成功，就是完全成功；如果函数失败，程序会回到“调用函数之前”的状态。</p></li><li><p>不抛出保证：保证绝对不抛出异常。对于所有对内建类型（例如，ints，指针，等等）的操作都是不抛出（nothrow）的（也就是说，提供不抛出保证）。这是异常安全代码中必不可少的基础构件。</p></li></ul><p>一个异常安全的函数必须保证满足上诉三个条件之一。如果不这样，那么就不具备异常安全性。</p><h1 id="实现数据不被破坏"><a href="#实现数据不被破坏" class="headerlink" title="实现数据不被破坏"></a>实现数据不被破坏</h1><p>我们在写代码时，保证满足其中一个条件。从异常安全的角度来说，nothrow 是最优的选择，但是实际上很难不调用任何一个可能抛出异常的函数。所以大多数时候会选择 <strong>基本保证</strong> 和 <strong>强烈保证</strong> 之一。</p><p>实现 <strong>强烈保证</strong> 的一种策略是使用 <strong>copy and swap</strong> 技术：</p><blockquote><p>为你打算修改的对象做一份备份，然后在副本上做一切必要的修改。若有任何修改动作抛出异常，原对象仍保持未改变状态。待所有改变都成功后，再将修改过的副本和原对象在一个不抛出异常的操作中做置换。</p></blockquote><p>需要注意的是函数提供的“异常安全保证”通常只等于其所调用的各函数的“异常安全保证”中的最弱的一项。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;异常安全&quot;&gt;&lt;a href=&quot;#异常安全&quot; class=&quot;headerlink&quot; title=&quot;异常安全&quot;&gt;&lt;/a&gt;异常安全&lt;/h1&gt;&lt;p&gt;异常安全的代码需要满足两个条件：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;异常中立性&lt;/li&gt;
&lt;li&gt;异常安全性&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="C++" scheme="http://www.hashcoding.net/categories/C/"/>
    
    
      <category term="C++" scheme="http://www.hashcoding.net/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Effective C++: Designs &amp; Implements</title>
    <link href="http://www.hashcoding.net/2017/03/05/Effective-C-Designs-Implements/"/>
    <id>http://www.hashcoding.net/2017/03/05/Effective-C-Designs-Implements/</id>
    <published>2017-03-05T06:45:50.000Z</published>
    <updated>2017-06-12T11:59:08.438Z</updated>
    
    <content type="html"><![CDATA[<h1 id="让接口容易被正确使用，不易被误用"><a href="#让接口容易被正确使用，不易被误用" class="headerlink" title="让接口容易被正确使用，不易被误用"></a>让接口容易被正确使用，不易被误用</h1><p>一个好的接口设计方式应该满足要求：“容易被正确使用，不易被误用”。所以设计主要分为两个方面，促进正确使用，阻止误用。</p><a id="more"></a><p>促进正确使用的方法主要有：</p><ol><li>保持接口的一致性</li><li>与内置类型行为兼容</li></ol><p>STL 勘称保持接口一致性的典范，这样降低了用户的记忆负担。而与内置行为兼容同时也保证不会出现违反用户直觉的问题。</p><p>阻止误用主要有：</p><ol><li>建立新的类型</li><li>限制类型上的操作</li><li>束缚对象取值范围</li><li>消除客户对资源的管理</li></ol><h1 id="增加封装性"><a href="#增加封装性" class="headerlink" title="增加封装性"></a>增加封装性</h1><p>如果某些东西被封装，它就不再可见；越多的东西被封装，那么看到它的人也就越少。而看到它的人越少，我们就有越大的弹性去变化它。所以我们推崇封装：它使我们能够改变事物而只影响有限的客户。</p><p>类的设计中，坚持以下两条准则有利于促进封装性：</p><ol><li>成员变量 private</li><li>使用 non-member 和 non-friend 替换 member 函数</li><li>避免返回指向对象内部成分的 handles</li></ol><p>将成员变量声明为 private 可以赋予客户访问数据的一致性、可细微划分访问控制、允诺约束条件获得保证，并提供 class 作者以充分实现弹性。</p><p>而尽可能的 member 函数，则减少其暴露数据，也能提高其封装性。</p><p>避免返回内部分成引用，可以保证对象状态不会被外部破坏，自然也能提高封装性。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;让接口容易被正确使用，不易被误用&quot;&gt;&lt;a href=&quot;#让接口容易被正确使用，不易被误用&quot; class=&quot;headerlink&quot; title=&quot;让接口容易被正确使用，不易被误用&quot;&gt;&lt;/a&gt;让接口容易被正确使用，不易被误用&lt;/h1&gt;&lt;p&gt;一个好的接口设计方式应该满足要求：“容易被正确使用，不易被误用”。所以设计主要分为两个方面，促进正确使用，阻止误用。&lt;/p&gt;
    
    </summary>
    
      <category term="C++" scheme="http://www.hashcoding.net/categories/C/"/>
    
    
      <category term="C++" scheme="http://www.hashcoding.net/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Effective C++:Resource management</title>
    <link href="http://www.hashcoding.net/2017/03/05/Effective-C-Resource-management/"/>
    <id>http://www.hashcoding.net/2017/03/05/Effective-C-Resource-management/</id>
    <published>2017-03-05T05:31:06.000Z</published>
    <updated>2017-09-23T03:10:54.144Z</updated>
    
    <content type="html"><![CDATA[<p>C++ 中不同于Java之类的语言，编写者需要对资源进行手动管理。</p><a id="more"></a><h1 id="Use-object-to-manage-resources"><a href="#Use-object-to-manage-resources" class="headerlink" title="Use object to manage resources"></a>Use object to manage resources</h1><p>和C语言一样，C++中也需要对手动申请的内存进行释放。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">void bar() &#123;</span><br><span class="line">    int *p = new int;</span><br><span class="line">    //...</span><br><span class="line">    delete p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果总是依赖于手动调用 delete 释放资源是行不通的。手动管理资源总会出现差错，比如后面修改代码时加上了一句 return ，那么申请的内存将得不到释放。另外，在一下非常复杂的系统中，可能出现资源被多个模块公有，如果简单释放，可能导致其他部分崩溃。</p><p>现在需要的是一种自动进行内存管理的机制：把资源放到对象内，依靠C++提供的“析构函数自动调用机制”确保资源的释放。这种机制有两个关键的想法：</p><ul><li>获取资源后立刻放进管理对象内</li><li>管理对象运用析构函数确保资源被正确释放</li></ul><p>实际上“以对象管理资源”的观念通常被称为“资源获取时机便是初始化时机（Resource Acquisition Is Initialization; RAII）。C++中提供了基础的 RAII 类，分别是:</p><ul><li>std::shared_ptr 及 std::weak_ptr</li><li>std::unique_ptr</li></ul><p>我们改写一下例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">void bar() &#123;</span><br><span class="line">    std::shared_ptr&lt;int&gt; wrapper(new int);</span><br><span class="line">    //...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然资源不仅仅是内存，也可以是文件描述符、互斥锁等。C++ 的 RAII 类中允许我们定义自己的删除函数，所以可以直接使用之管理其他非内存资源。</p><h1 id="Think-carefully-about-copying-behavior-in-resource-managing-classes"><a href="#Think-carefully-about-copying-behavior-in-resource-managing-classes" class="headerlink" title="Think carefully about copying behavior in resource-managing classes"></a>Think carefully about copying behavior in resource-managing classes</h1><p>资源因为其特殊性，所以不能简单拷贝。通常用于处理拷贝的方式有以下两种：</p><ul><li>禁止复制</li><li>对底层资源进行“引用计数”</li></ul><p><code>unique_ptr</code> 要求对象同一时刻只能拥有一个 owner，而 <code>shared_ptr</code> 则使用引用计数实现；对 <code>unique_ptr</code> 只能进行所有权转移，<code>shared_ptr</code> 则要避免循环计数。</p><h1 id="Use-the-same-form-in-corresponding-uses-of-new-and-delete"><a href="#Use-the-same-form-in-corresponding-uses-of-new-and-delete" class="headerlink" title="Use the same form in corresponding uses of new and delete"></a>Use the same form in corresponding uses of new and delete</h1><p>如果你在 <code>new</code> 表达式中使用了[]，那么也应该在 <code>delete</code> 中使用[]。当然 C++ 中提供了 <code>vector</code> 和 <code>string</code> 等 templates，可以将对数组的要求降为 0。如果你非要使用原生数组，也可以使用 <code>unique_ptr</code> 管理，只需要在类型模板参数后添加[]：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unique_ptr&lt;int[]&gt; arrays(new int[10]);</span><br></pre></td></tr></table></figure><p>然而 <code>shared_ptr</code> 并不支持，如果你非要使用，那么请自己定义 <code>delete</code>。</p><h1 id="store-newed-objects-in-smart-pointers-in-standalone-statements"><a href="#store-newed-objects-in-smart-pointers-in-standalone-statements" class="headerlink" title="store newed objects in smart pointers in standalone statements"></a>store newed objects in smart pointers in standalone statements</h1><p>C++ 在实现上有很大的弹性，所以编译器可能会对指令进行重排，所以凡是写标准未定义执行顺序的代码，都可能出现问题。例如 C++ 没有规定参数求值，那么求值结果跟顺序有关时，就会出现非预期行为。</p><p>如果其中涉及到资源管理，那么可能造成资源泄露，所以 C++ 提供了单独的环境将对象置于资源管理对象中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">int foo() &#123;</span><br><span class="line">    //...</span><br><span class="line">    throw ...;</span><br><span class="line">    //...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void bar(std::shared_ptr&lt;int&gt; ptr, int);</span><br><span class="line"></span><br><span class="line">bar(std::shared_ptr&lt;int&gt;(new int), foo());  // dangerous</span><br><span class="line"></span><br><span class="line">// 上面的代码求值顺序未定义，通过编译器重排后可能导致内存泄露</span><br><span class="line"></span><br><span class="line">bar(std::make_shared&lt;int&gt;(), foo());</span><br></pre></td></tr></table></figure><p>单独的环境中确保资源能够正确放入资源管理对象，从而保证了不会发生资源泄露。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;C++ 中不同于Java之类的语言，编写者需要对资源进行手动管理。&lt;/p&gt;
    
    </summary>
    
      <category term="C++" scheme="http://www.hashcoding.net/categories/C/"/>
    
    
      <category term="C++" scheme="http://www.hashcoding.net/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Effective c++:Constructors,Destructors,and Assignment Operators</title>
    <link href="http://www.hashcoding.net/2017/03/02/Effective-c-Constructors-Destructors-and-Assignment-Operators/"/>
    <id>http://www.hashcoding.net/2017/03/02/Effective-c-Constructors-Destructors-and-Assignment-Operators/</id>
    <published>2017-03-02T09:05:47.000Z</published>
    <updated>2017-06-12T11:59:04.365Z</updated>
    
    <content type="html"><![CDATA[<p>C++ 中有三个特殊的函数，构造、析构、赋值。</p><a id="more"></a><h1 id="Know-what-functions-C-silently-writes-and-calls"><a href="#Know-what-functions-C-silently-writes-and-calls" class="headerlink" title="Know what functions C++ silently writes and calls"></a>Know what functions C++ silently writes and calls</h1><p>在 C++ 中，如果你没有事先没有声明，那么编译器会为它声明一个构造函数，一个 copy 构造函数，一个 copy assignment 操作符和一个析构函数。这些函数都是属于 public inline，且只有用户有调用的时候才会被创建。其中需要注意的有以下几点：</p><ul><li>析构函数默认为 non-virtual </li><li>copy 类默认拷贝每一个 non-static 函数的值</li><li>一旦定义了构造函数，则不会创建默认构造函数</li><li>有 reference 或 const 时不产生默认 operator=</li></ul><h1 id="Explicitly-disallow-the-use-of-compiler-generated-functions-you-do-not-want"><a href="#Explicitly-disallow-the-use-of-compiler-generated-functions-you-do-not-want" class="headerlink" title="Explicitly disallow the use of compiler-generated functions you do not want"></a>Explicitly disallow the use of compiler-generated functions you do not want</h1><p>有的时候我们不需要编译器产生的赋值或者其他默认函数，那我们可以将其声明为私有且不实现。不过这种办法并不完美，friend 是可以访问 private 的；另外有人不小心将其实现了也会违背预期。一种更好的办法是将其封装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class noncopyable &#123;</span><br><span class="line">    noncopyable(const &amp;nocopyable);</span><br><span class="line">    nocopyable &amp;operator(const noncopyable &amp;) const;</span><br><span class="line">public:</span><br><span class="line">    noncopyable() &#123;&#125;</span><br><span class="line">    ~noncopyable() &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class Bar : noncopyable &#123;&#125;</span><br></pre></td></tr></table></figure><p>总之，为驳回编译器自动提供的机制，可以将成员函数声明为 private 并且不予以实现；或者使用 noncopyable 这样的基类进行限制。</p><h1 id="virtual-function-amp-constructors-and-destructors"><a href="#virtual-function-amp-constructors-and-destructors" class="headerlink" title="virtual function &amp; constructors and destructors"></a>virtual function &amp; constructors and destructors</h1><p>C++ 的虚函数可以提供动态绑定，不过在构造函数和析构函数中要避免使用到虚函数（哪怕是间接调用也不可以）。在构造完成之前和析构调用之后，对象都不再是一个完整的对象。这也不难理解，因为子类于父类前析构，那么此时父类调用的虚函数已经不再动态绑定到子类，则没有达到预期目的。</p><p>而对于任何具有多态性质的基类都应该将其析构函数声明为 virtual，否则会出现无法完全回收对象的问题。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">class base &#123;</span><br><span class="line">public:</span><br><span class="line">    ~base() &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class child : public base &#123;</span><br><span class="line">    // ...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">base *b = new child();</span><br><span class="line">delete b;   // Error: boom</span><br></pre></td></tr></table></figure><h1 id="Handle-assignment-to-self-in-operator"><a href="#Handle-assignment-to-self-in-operator" class="headerlink" title="Handle assignment to self in operator ="></a>Handle assignment to self in operator =</h1><p>对于自我赋值，一般的做法是进行证同测试，另外采用精心安排的语句导出异常安全的代码。一种比较好的办法则是使用 copy and swap 技术：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Class &amp;operator=(const Class &amp;c) &#123;</span><br><span class="line">    Class s(c);</span><br><span class="line">    swap(s);</span><br><span class="line">    return *this;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这中办法将目标拷贝到一个临时变量中，然后和当前对象进行交换。如果构造变量失败时，不会影响原有的数据；并且保证了swap为异常安全，那么整个函数就能保证异常安全。最后，类似于 scope_ptr ，临时变量在退出时析构并释放资源。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;C++ 中有三个特殊的函数，构造、析构、赋值。&lt;/p&gt;
    
    </summary>
    
      <category term="C++" scheme="http://www.hashcoding.net/categories/C/"/>
    
    
      <category term="C++" scheme="http://www.hashcoding.net/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Effective C++: Accustoming Yourself to C++</title>
    <link href="http://www.hashcoding.net/2017/03/02/Effective-C-Accustoming-Yourself-to-C/"/>
    <id>http://www.hashcoding.net/2017/03/02/Effective-C-Accustoming-Yourself-to-C/</id>
    <published>2017-03-02T04:40:11.000Z</published>
    <updated>2017-06-12T11:59:00.949Z</updated>
    
    <content type="html"><![CDATA[<h1 id="View-C-as-a-federation-of-languages"><a href="#View-C-as-a-federation-of-languages" class="headerlink" title="View C++ as a federation of languages"></a>View C++ as a federation of languages</h1><p>今天的C++已经是一个多重泛型编程语言，它同时支持：</p><ul><li>过程式</li><li>面对对象</li><li>函数形式</li><li>泛型形式</li><li>元编程形式</li></ul><p>而我们在使用C++时，应当针对性的使用。C++的高效编程守则视情况而变化，取决于你使用他的那一部分。</p><a id="more"></a><h1 id="Perfer-consts-enums-and-inlines-to-defines"><a href="#Perfer-consts-enums-and-inlines-to-defines" class="headerlink" title="Perfer consts, enums, and inlines to #defines"></a>Perfer consts, enums, and inlines to #defines</h1><p>在C++中，不建议使用 #define 来定义常量或者函数，应该使用语言自身机制，将预处理器的工作交给编译器来做。</p><p>使用 const 和 enum 可以让标识符进入符号表，报错的时候就不会出现“魔数”。而 inline 则替代宏函数，在保证函数行为一致性的同时，确保类型安全。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">template&lt;typename T&gt;</span><br><span class="line">inline bool call(const T &amp;a, const T &amp;b) &#123;</span><br><span class="line">    return (a &gt; b) ? a : b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Use-const-whenever-possible"><a href="#Use-const-whenever-possible" class="headerlink" title="Use const whenever possible"></a>Use const whenever possible</h1><p>const 允许你指定一个 <strong>语义约束</strong> ，而编译器会强制执行这项约束。const 可以被施加于任何作用域内的对象、函数参数、函数返回类型、成员函数本体。</p><p>当 const 与指针同时出现的时候往往具有迷惑性，实际上并不高深莫测。如果 const 出现在 * 左边，表示被指物是常量；如果出现在右边，则表示指针本身是常量。</p><p>在使用 STL 的时候需要注意使用 const_iterator 而不是 const iterator 。因为 iterator 是模拟指针，在编译器的视角里于普通变量无异。</p><p>将 const 运用于成员函数的目的，是为了确认该成员函数可以作用于 const 对象。如果一个对象被定义为了 const，那么编译器会对它进行 <strong>bitwise constness</strong> 约束，即成员函数只有在不更改对象之任何成员变量（static 除外）时才可以说是 const。不过实际上项目中可能出现特殊情况，比如多线程中保证互斥的对象必须能改变，这就是 <strong>logic constness</strong> 。对于这种情况，可以使用 mutable 释放掉 non-static 成员变量的 <strong>bitwise</strong> 约束。</p><blockquote><p>编译器强制实施 <strong>bitwise constness</strong>，但是你编写程序的时候应使用“概念上的常量”（conceptual constness）。</p></blockquote><p>当 const 和 non-const 成员函数有着实质性的等价实现时，令 non-const 版本调用 const 版本可以避免代码重复。</p><h1 id="Make-sure-that-objects-are-initialized-before-they’re-used"><a href="#Make-sure-that-objects-are-initialized-before-they’re-used" class="headerlink" title="Make sure that objects are initialized before they’re used"></a>Make sure that objects are initialized before they’re used</h1><p>C++ 并没有保证所有的变量都能被初始化，而读取未初始化的值会导致不明确行为。所以要在使用对象之前将其进行初始化。对于没有任何成员的内置类型，需要手动完成初始化。对于内置类型外的，则由构造函数进行初始化，所以确保每一个构造函数都将对象的每一个成员初始化。</p><p>C++ 规定了对象成员变量的初始化动作发生在进入构造函数本体之前。最好的方式是总使用成员初值列表完成初始化。初值列表列出的成员变量，其排列次序应该和他们在class中的声明次序相同。</p><p>对于定义于不同编译单元内的 non-local static 对象初始化顺序，C++没有明确定义。而解决办法则是 Singleton 模式解决，因为 C++ 保证了函数内的 local static 会在“该函数被调用期间”“首次遇上该对象的定义式”时被初始化。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;View-C-as-a-federation-of-languages&quot;&gt;&lt;a href=&quot;#View-C-as-a-federation-of-languages&quot; class=&quot;headerlink&quot; title=&quot;View C++ as a federation of languages&quot;&gt;&lt;/a&gt;View C++ as a federation of languages&lt;/h1&gt;&lt;p&gt;今天的C++已经是一个多重泛型编程语言，它同时支持：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;过程式&lt;/li&gt;
&lt;li&gt;面对对象&lt;/li&gt;
&lt;li&gt;函数形式&lt;/li&gt;
&lt;li&gt;泛型形式&lt;/li&gt;
&lt;li&gt;元编程形式&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;而我们在使用C++时，应当针对性的使用。C++的高效编程守则视情况而变化，取决于你使用他的那一部分。&lt;/p&gt;
    
    </summary>
    
      <category term="C++" scheme="http://www.hashcoding.net/categories/C/"/>
    
    
      <category term="C++" scheme="http://www.hashcoding.net/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode - 4-Median of Two Sorted Arrays</title>
    <link href="http://www.hashcoding.net/2017/02/28/LeetCode-4-Median-of-Two-Sorted-Arrays/"/>
    <id>http://www.hashcoding.net/2017/02/28/LeetCode-4-Median-of-Two-Sorted-Arrays/</id>
    <published>2017-02-28T12:14:02.000Z</published>
    <updated>2017-06-12T11:57:34.630Z</updated>
    
    <content type="html"><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a>problem</h2><p><a href="https://leetcode.com/problems/median-of-two-sorted-arrays/?tab=Description" target="_blank" rel="noopener">Median of Two Sorted Arrays</a></p><a id="more"></a><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><p>这道题目没能做出来，从网上找到了题解。题解是将问题转换为寻找第K小的数，且边际情况非常少。</p><p>首先假设数组A和B的元素个数都大于k/2，我们比较A的第k/2小的元素和B的第k/2小的元素A[k/2-1]和B[k/2-1]。</p><p>如果A[k/2-1]&lt;B[k/2-1]，这表示A[0]到A[k/2-1]的元素都在A和B合并之后的前k小的元素中。换句话说，A[k/2-1]不可能大于两数组合并之后的第k小值，所以我们可以将其抛弃。证明：假设A[k/2-1]大于合并之后的第k小值，我们不妨假定其为第（k+1）小值。由于A[k/2-1]小于B[k/2-1]，所以B[k/2-1]至少是第（k+2）小值。但实际上，在A中至多存在k/2-1个元素小于A[k/2-1]，B中也至多存在k/2-1个元素小于A[k/2-1]，所以小于A[k/2-1]的元素个数至多有k/2+ k/2-2，小于k，这与A[k/2-1]是第（k+1）的数矛盾。</p><p>当A[k/2-1]&gt;B[k/2-1]时存在类似的结论。</p><p>当A[k/2-1]=B[k/2-1]时，我们已经找到了第k小的数，也即这个相等的元素，我们将其记为m。由于在A和B中分别有k/2-1个元素小于m，所以m即是第k小的数。(这里可能有人会有疑问，如果k为奇数，则m不是中位数。这里是进行了理想化考虑，在实际代码中略有不同，是先求k/2，然后利用k-k/2获得另一个数。)</p><p>通过上面的分析，我们即可以采用递归的方式实现寻找数组A和B的元素个数都大于k/2时第k小的数。对于另一种情况，使用min(k / 2, A.size)和k-k/2且保证A.size&lt;B.size那么就可以转为前面的条件。</p><p>此外我们还需要考虑几个边界条件：</p><p>. 如果A或者B为空，则直接返回B[k-1]或者A[k-1]；<br>. 如果k为1，我们只需要返回A[0]和B[0]中的较小值；<br>. 如果A[k/2-1]=B[k/2-1]，返回其中一个；</p><h2 id="code"><a href="#code" class="headerlink" title="code"></a>code</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">double findKth(int a[], int m, int b[], int n, int k)  </span><br><span class="line">&#123;  </span><br><span class="line">    //always assume that m is equal or smaller than n  </span><br><span class="line">    if (m &gt; n)  </span><br><span class="line">        return findKth(b, n, a, m, k);  </span><br><span class="line">    if (m == 0)  </span><br><span class="line">        return b[k - 1];  </span><br><span class="line">    if (k == 1)  </span><br><span class="line">        return min(a[0], b[0]);  </span><br><span class="line">    //divide k into two parts  </span><br><span class="line">    int pa = min(k / 2, m), pb = k - pa;  </span><br><span class="line">    if (a[pa - 1] &lt; b[pb - 1])  </span><br><span class="line">        return findKth(a + pa, m - pa, b, n, k - pa);  </span><br><span class="line">    else if (a[pa - 1] &gt; b[pb - 1])  </span><br><span class="line">        return findKth(a, m, b + pb, n - pb, k - pb);  </span><br><span class="line">    else  </span><br><span class="line">        return a[pa - 1];  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    double findMedianSortedArrays(vector&lt;int&gt;&amp; nums1, vector&lt;int&gt;&amp; nums2) &#123;</span><br><span class="line">        int *A = nums1.data(), m = nums1.size(), *B = nums2.data(), n = nums2.size();</span><br><span class="line">        int total = m + n;  </span><br><span class="line">        if (total &amp; 0x1)  </span><br><span class="line">            return findKth(A, m, B, n, total / 2 + 1);  </span><br><span class="line">        else  </span><br><span class="line">            return (findKth(A, m, B, n, total / 2)  </span><br><span class="line">                    + findKth(A, m, B, n, total / 2 + 1)) / 2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;problem&quot;&gt;&lt;a href=&quot;#problem&quot; class=&quot;headerlink&quot; title=&quot;problem&quot;&gt;&lt;/a&gt;problem&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/median-of-two-sorted-arrays/?tab=Description&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Median of Two Sorted Arrays&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://www.hashcoding.net/categories/LeetCode/"/>
    
    
      <category term="Algorithm" scheme="http://www.hashcoding.net/tags/Algorithm/"/>
    
      <category term="LeetCode" scheme="http://www.hashcoding.net/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode - 3-Longest Substring Without Repeating Characters</title>
    <link href="http://www.hashcoding.net/2017/02/27/LeetCode-3-Longest-Substring-Without-Repeating-Characters/"/>
    <id>http://www.hashcoding.net/2017/02/27/LeetCode-3-Longest-Substring-Without-Repeating-Characters/</id>
    <published>2017-02-27T09:30:31.000Z</published>
    <updated>2017-06-12T11:57:26.176Z</updated>
    
    <content type="html"><![CDATA[<h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a>problem</h2><p><a href="https://leetcode.com/problems/longest-substring-without-repeating-characters/?tab=Description" target="_blank" rel="noopener">Longest Substring Without Repeating Characters</a></p><a id="more"></a><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><ol><li>对于一个没有重复的字符串，加入一个新字符，长度+1</li><li>如果加入的字符已经存在，那么找到字符串中冲突字符后的字符串，构成新的未重复字符串</li></ol><p>需要注意的是我开始潜意识认为字符串指“a-z”,实际上还包含“！@”之类的字符</p><h2 id="code"><a href="#code" class="headerlink" title="code"></a>code</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">int lengthOfLongestSubstring(string str) &#123;</span><br><span class="line">    if (str.size() == 0 || str.size() == 1)</span><br><span class="line">        return str.size();</span><br><span class="line">    </span><br><span class="line">    int left = 0, right = 1;    // [left, right)</span><br><span class="line">    int index[128] = &#123;1&#125;, length = 1;</span><br><span class="line">    </span><br><span class="line">    index[str[left]] = 1;</span><br><span class="line">    while (right &lt; str.size()) &#123;</span><br><span class="line">        char a = str[right];</span><br><span class="line">        </span><br><span class="line">        if (index[a] == 0) &#123;   // without</span><br><span class="line">            index[a] = 1;         // add</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            while (str[left] != a) &#123;</span><br><span class="line">                index[str[left]] = 0;  // del</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">            left++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        right++;</span><br><span class="line">        </span><br><span class="line">        int current = right - left;</span><br><span class="line">        if (length &lt; current) </span><br><span class="line">            length = current;</span><br><span class="line">    &#125;</span><br><span class="line">    return length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;problem&quot;&gt;&lt;a href=&quot;#problem&quot; class=&quot;headerlink&quot; title=&quot;problem&quot;&gt;&lt;/a&gt;problem&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/longest-substring-without-repeating-characters/?tab=Description&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Longest Substring Without Repeating Characters&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://www.hashcoding.net/categories/LeetCode/"/>
    
    
      <category term="Algorithm" scheme="http://www.hashcoding.net/tags/Algorithm/"/>
    
      <category term="LeetCode" scheme="http://www.hashcoding.net/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>Mysql ERROR 2002 (HY000): Can’t connect to local MySQL server through socket ‘/var/lib/mysql/mysql.sock’ (2)</title>
    <link href="http://www.hashcoding.net/2017/02/23/Mysql-ERROR-2002-HY000-Can%E2%80%99t-connect-to-local-MySQL-server-through-socket-%E2%80%98-var-lib-mysql-mysql-sock%E2%80%99-2/"/>
    <id>http://www.hashcoding.net/2017/02/23/Mysql-ERROR-2002-HY000-Can’t-connect-to-local-MySQL-server-through-socket-‘-var-lib-mysql-mysql-sock’-2/</id>
    <published>2017-02-23T09:15:06.000Z</published>
    <updated>2017-02-23T09:17:41.016Z</updated>
    
    <content type="html"><![CDATA[<p>使用 <code>mysql -uroot -p</code> 连接 Mysql 时出现了下面的错误:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ERROR 2002 (HY000): Can’t connect to local MySQL server through socket</span><br><span class="line">  ‘/var/run/mysqld/mysqld.sock’ (2)</span><br></pre></td></tr></table></figure><p>经过排查，发现是权限问题，使用:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown -R mysql:mysql /var/run/mysqld</span><br></pre></td></tr></table></figure><p>修改权限，然后启动，成功。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;使用 &lt;code&gt;mysql -uroot -p&lt;/code&gt; 连接 Mysql 时出现了下面的错误:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;l
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://www.hashcoding.net/tags/Linux/"/>
    
      <category term="Mysql" scheme="http://www.hashcoding.net/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>Linux 查看3306端口命令</title>
    <link href="http://www.hashcoding.net/2017/02/23/Linux-%E6%9F%A5%E7%9C%8B3306%E7%AB%AF%E5%8F%A3%E5%91%BD%E4%BB%A4/"/>
    <id>http://www.hashcoding.net/2017/02/23/Linux-查看3306端口命令/</id>
    <published>2017-02-23T09:12:18.000Z</published>
    <updated>2017-02-23T09:13:54.534Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>查看3306端口被什么程序占用 <code>lsof -i :3306</code></p></li><li><p>查看3306端口是被哪个服务使用着 <code>netstat -tunlp | grep :3306</code></p></li><li><p>查看3306端口的是否已在使用中，可验证使用该端口的服务是否已正常运行 <code>netstat -an | grep :3306</code></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;p&gt;查看3306端口被什么程序占用 &lt;code&gt;lsof -i :3306&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;查看3306端口是被哪个服务使用着 &lt;code&gt;netstat -tunlp | grep :3306&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://www.hashcoding.net/tags/Linux/"/>
    
      <category term="Mysql" scheme="http://www.hashcoding.net/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>Mysql The server quit without updating PID file (/var/run/mysqld/mysqld.pid) </title>
    <link href="http://www.hashcoding.net/2017/02/23/Mysql-The-server-quit-without-updating-PID-file-var-run-mysqld-mysqld-pid/"/>
    <id>http://www.hashcoding.net/2017/02/23/Mysql-The-server-quit-without-updating-PID-file-var-run-mysqld-mysqld-pid/</id>
    <published>2017-02-23T09:06:37.000Z</published>
    <updated>2017-02-23T09:11:37.665Z</updated>
    
    <content type="html"><![CDATA[<p>Mysql 启动时出现以下错误:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The server quit without updating PID file (/var/run/mysqld/mysqld.pid)</span><br></pre></td></tr></table></figure><p>根据网上方法，用: <code>sudo find / -name my.conf</code> 发现有多个 <code>my.conf</code> 文件存在:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/var/my.conf</span><br><span class="line">/var/mysql/my.conf</span><br></pre></td></tr></table></figure><p>删除 <code>/etc/mysql/my.cnf</code> 这个文件，启动MySql服务，成功。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Mysql 启动时出现以下错误:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td cla
      
    
    </summary>
    
    
      <category term="Mysql" scheme="http://www.hashcoding.net/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>C++对象线程安全</title>
    <link href="http://www.hashcoding.net/2017/01/15/C-%E5%AF%B9%E8%B1%A1%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8/"/>
    <id>http://www.hashcoding.net/2017/01/15/C-对象线程安全/</id>
    <published>2017-01-15T09:29:31.000Z</published>
    <updated>2017-07-10T05:05:34.504Z</updated>
    
    <content type="html"><![CDATA[<p>最近翻阅了陈硕先生写的《Linux 多线程服务端编程》一书，收益颇丰。书指出了不少异步编程中陷阱，并提供了最佳实践。书中把问题抽丝剥茧、娓娓道来，是一本不可多得的好书。</p><a id="more"></a><p>该书第一章为线程安全的对象生命周期管理，给出了C++中写出线程安全代码的良好建议。写出线程安全的具体逻辑代码并不是什么难事，通过同步原语保护内部数据、进行同步即可。在C++中，除了代码逻辑外，还需要对对象生死进行特殊处理。这是因为对象生死不能由其内部拥有的 mutex 来保护。因此，如何解决对象构造、析构时可能存在的竞争条件是C++多线程编程面临的一个基本问题。</p><h2 id="什么是线程安全"><a href="#什么是线程安全" class="headerlink" title="什么是线程安全"></a>什么是线程安全</h2><p>这里引用 Wiki 对线程安全的描述：</p><blockquote><p>线程安全是一个计算机编程的概念，适用于多线程编程环境。我们说一段代码是线程安全的，当它只对共享的数据进行操作，且保证它在同一时刻被多个线程安全的执行。有很多策略可以生成线程安全的数据结构。<br>程序可能在一个共享地址空间中创建多个线程并同步执行一段代码，在该地址空间中每个线程实际都可以访问其他线程的内存空间。<br>线程安全是一种属性，它通过同步来重建代码片段与控制流的关联，从而保证代码在多线程环境的运行。</p></blockquote><p>陈硕先生的书中也给出了线程安全的 class 应当满足的三个条件：</p><blockquote><ul><li>多个线程同时访问时，其表现出正确的行为</li><li>无论操作系统如何调度这些线程，无论这些线程的执行顺序如何交织</li><li>调用端代码无额外的同步或其他协调动作</li></ul></blockquote><p>按照上述条件来约束对象，那么 C++ 标准库中常用的容器并非线程安全的，如：<code>std::string、std::map、std::vector</code>。</p><h2 id="基本保证"><a href="#基本保证" class="headerlink" title="基本保证"></a>基本保证</h2><p>对于对象中的除构造、析构外的成员函数，写出线程安全的代码十分容易，通过 mutex 进行同步就好。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;mutex&gt;</span><br><span class="line"></span><br><span class="line">templete &lt;typename T&gt;</span><br><span class="line">class blocking_queue </span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    void push_back(const T &amp;t) &#123;</span><br><span class="line">        std::lock_guard lock(mutex_);</span><br><span class="line">        queue_.push(t);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    T pop() &#123;</span><br><span class="line">        std::lock_guard lock(mutex_);</span><br><span class="line">        T t = queue_.front();</span><br><span class="line">        queue_.pop();</span><br><span class="line">        return t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">private:</span><br><span class="line">    std::mutex mutex_;</span><br><span class="line">    std::queue&lt;T&gt; queue_;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="对象创建约束"><a href="#对象创建约束" class="headerlink" title="对象创建约束"></a>对象创建约束</h2><p>根据《Linux 多线程服务端编程》书中所说：</p><blockquote><p>对象构造要做到线程安全，唯一的要求时在构造期间不要泄露 this 指针，即：</p><ul><li>不要在构造函数中注册任何回调函数</li><li>也不要在构造函数中把 this 对象传给跨线程对象</li><li>即便时在构造函数最后一句也不行</li></ul></blockquote><p>也就是说一个对象在未构造完成之际，是不能暴露给外部的。对于上面三条准则最后一条，先生也给了解释：如果该类被继承，那么其优先于子类构造，也会出现访问到不完整对象。</p><h2 id="对象销毁"><a href="#对象销毁" class="headerlink" title="对象销毁"></a>对象销毁</h2><p>相比对象创建，对象销毁则相对复杂。比如一个线程准备销毁对象，而另一个线程正在进行数据访问，那么致命错误便出现了。对于对象销毁，并没有比较好的方法。</p><h2 id="使用-shared-ptr、weak-ptr-管理对象生命周期"><a href="#使用-shared-ptr、weak-ptr-管理对象生命周期" class="headerlink" title="使用 shared_ptr、weak_ptr 管理对象生命周期"></a>使用 shared_ptr、weak_ptr 管理对象生命周期</h2><p>使用 shared_ptr 和 weak_ptr 对对象进行生命周期管理能解决对象销毁的问题。对象拥有者持有 shared_ptr，而对象使用者持有 weak_ptr。持有者在使用的时候，申请借用提升为 shared_ptr。这样，如果出项上述情况，那么拥有者便将对象托管给使用者，同时自己释放掉对象引用。等到使用者完成工作时，就会触发 shared_ptr 释放对象。</p><p>对于那些在引用之前便被释放的对象，weak_ptr 提升便会失败，也保证了不会悬垂指针的危险。</p><h2 id="shared-ptr-线程安全"><a href="#shared-ptr-线程安全" class="headerlink" title="shared_ptr 线程安全"></a>shared_ptr 线程安全</h2><p>至于 shared_ptr 本身，并非线程安全的，所以要使用被多个线程访问的 shared_ptr 对象，那么需要手动控制同步。</p><p>所以，在编写 C++ 程序的时候，应当尽量使用 shared_ptr 而非原始指针，这样自动化的管理资源，不仅解放大脑，还能避免潜在错误。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近翻阅了陈硕先生写的《Linux 多线程服务端编程》一书，收益颇丰。书指出了不少异步编程中陷阱，并提供了最佳实践。书中把问题抽丝剥茧、娓娓道来，是一本不可多得的好书。&lt;/p&gt;
    
    </summary>
    
      <category term="C++" scheme="http://www.hashcoding.net/categories/C/"/>
    
    
      <category term="C++" scheme="http://www.hashcoding.net/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>LL-Script implements</title>
    <link href="http://www.hashcoding.net/2016/11/28/LL-Script-implements/"/>
    <id>http://www.hashcoding.net/2016/11/28/LL-Script-implements/</id>
    <published>2016-11-28T10:54:01.000Z</published>
    <updated>2017-06-12T12:00:57.129Z</updated>
    
    <content type="html"><![CDATA[<p>LL-Script 是一个简单的脚本语言，最初写的时候是为了给游戏做脚本，后来还是使用lua替代。很久后又重新开始按照规范写了一次，这次整体流程走通了，但是设计杂乱无章。前些日子从新写了一次，采用了一些良好的设计，这就是先在这个版本。</p><p>脚本源码在github上，访问<a href="https://github.com/thinkermao/LL-Script" target="_blank" rel="noopener">这里</a>。</p><a id="more"></a> <h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>首先看整体流程：输入代码、输出opcode并执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Lexer(source code) =&gt; token stream</span><br><span class="line">Parser(token stream) =&gt; SSA (static single assginment form)</span><br><span class="line">CodeGen(SSA) =&gt; opcode</span><br><span class="line">VirtualMachine(opcode) =&gt; result</span><br></pre></td></tr></table></figure><p>这里直接从源码构造中间代码，省去了语法树部分。另外Parser后应该为优化阶段，其输出为优化后的 SSA IR。</p><h2 id="词法分析、语法分析"><a href="#词法分析、语法分析" class="headerlink" title="词法分析、语法分析"></a>词法分析、语法分析</h2><p>词法分析部分是简单的 ad-hoc 生成 token stream。Parser 按照 LL(1) 文法分析，并直接生成 SSA IR。</p><p>Script 只有最基本的作用域，没有块级作用域，整个函数中的变量在函数任意位置均可访问。<code>FunctionScope</code> 表示一个函数作用域，其原型如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">struct FunctionScope &#123;</span><br><span class="line">    typedef std::unordered_map&lt;std::string, unsigned&gt; Symbols;</span><br><span class="line"></span><br><span class="line">    // symbol type</span><br><span class="line">    enum &#123; None, Define, Let &#125;;</span><br><span class="line"></span><br><span class="line">    FunctionScope()</span><br><span class="line">        : cfg_(nullptr)</span><br><span class="line">        , block_(nullptr)</span><br><span class="line">    &#123;&#125;</span><br><span class="line"></span><br><span class="line">    CFG *cfg_;</span><br><span class="line">    Symbols symbolTable_;</span><br><span class="line">    BasicBlock *block_;</span><br><span class="line">    std::unordered_set&lt;std::string&gt; captures_;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>cfg</code> 表示函数对应 SSA 的控制流程图，主要用于提供源代码直接到IR的转换，<code>block_</code> 表示当前翻译过程中源代码对应IR所在的基本块。<code>Symbols</code> 使用 <code>unordered_map</code> 来表示符号容器，其中<code>first</code>表示符号名，<code>second</code>表示符号类别，由<code>enum { None, Define, Let };</code>决定。<code>symbolTable_</code> 就是主要的符号表，函数作用域中定义的符号均记录在此。<code>captures_</code>表示函数的捕获(c++名词)列表，记录在此，给翻译收尾工作提供必要的信息。</p><p>在翻译过程中，主要用到查找符号原型如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bool tryToCatchID(std::string &amp;name);</span><br><span class="line">bool tryToCatchID(scope_iterator iter, std::string &amp;name);</span><br></pre></td></tr></table></figure><p>首先通过原型1在当前作用域中查找，如果找到返回true，如果没有，则从里向外递归地遍历函数作用域栈。找到后，如果为外部符号，则加入捕获列表，否则返回false。</p><h2 id="SSA-形式中间代码生成"><a href="#SSA-形式中间代码生成" class="headerlink" title="SSA 形式中间代码生成"></a>SSA 形式中间代码生成</h2><p>从源代码直接生成 SSA 形式代码可以参考论文：</p><blockquote><p>Simple and Efficient Construction of Static Single Assignment Form<br>Matthias Braun1, Sebastian Buchwald1, Sebastian Hack2, Roland Leißa2, Christoph Mallon2, and Andreas Zwinkau1</p></blockquote><p>Script 中涉及到的代码主要在 Parser 分析过程中以及 CFG 中，CFG 部分内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">class CFG</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    // ....</span><br><span class="line">    // SSA form construction.</span><br><span class="line">    void sealOthersBlock();</span><br><span class="line">    void sealBlock(BasicBlock *block);</span><br><span class="line">    void saveVariableDef(std::string name, BasicBlock *block, Value *value);</span><br><span class="line">    Value *readVariableDef(std::string name, BasicBlock *block);</span><br><span class="line">protected:</span><br><span class="line">    // SSA</span><br><span class="line">    Value *readVariableRecurisive(std::string name, BasicBlock *block);</span><br><span class="line">    Value *addPhiOperands(std::string name, Phi *phi);</span><br><span class="line">    Value *tryRemoveTrivialPhi(const std::string &amp;name, Phi *phi);</span><br><span class="line">    // ....</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这部分代码详细使用请看论文或<a href="http://www.hashcoding.net/2016/08/18/Simple-and-Direction-SSA-Constriruction-Algorithm/">博客</a>。</p><h3 id="SSA-IR"><a href="#SSA-IR" class="headerlink" title="SSA IR"></a>SSA IR</h3><p>SSA IR 的 use-def chain 主要参考 LLVM 2.0 源码。SSA IR 中基础数据结构有 <code>Use</code>、<code>Value</code>、<code>User</code>，每一条 <code>Instruction</code> 既是 <code>Value</code> 又是 <code>User</code>，<code>User</code> 和 <code>Value</code> 通过 <code>Use</code> 关联起来。一些列指令组成 <code>BasicBlock</code>，一些列 <code>BasicBlock</code> 组成 <code>CFG</code>。<code>IRContext</code>包装了<code>Instruction</code>创建的工作。每一个函数由一个 <code>CFG</code> 组成，所有函数一起组成 <code>IRModule</code>。也就是说 Parser 输出为 <code>IRModule</code>。 </p><h3 id="函数处理"><a href="#函数处理" class="headerlink" title="函数处理"></a>函数处理</h3><p>生成 SSA IR 部分内容并不复杂，除了有关函数、Lambda部分。Script中无论函数定义可以看作如下替换(步骤1)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function bar() &#123;&#125;</span><br><span class="line">=&gt;</span><br><span class="line">function $lambda_1_bar() &#123;&#125;</span><br><span class="line">define bar = $lambda_1_bar;</span><br></pre></td></tr></table></figure><p>因为闭包对于普通变量通过拷贝、对于复合变量通过引用(实际实现为指针)实现。所以可以通过类似于C++<code>std::bind</code>的机制实现 closure(步骤2)。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">let a = 10;</span><br><span class="line">define call = lambda(x) &#123;</span><br><span class="line">    return x + a;</span><br><span class="line">&#125;</span><br><span class="line">=&gt;</span><br><span class="line">let call_tmp = lambda(a, x) ....</span><br><span class="line"> define call = call_tmp(a);</span><br></pre></td></tr></table></figure><p>不过这样处理就会涉及到函数中访问其自己名字的问题，或者说叫访问lambda函数自己。这个问题可以通过 Y combinator 解决。Script 中使用的办法比较简单(步骤3)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">let fib = lambda(n) &#123;</span><br><span class="line">    if (n &lt; 2)return 0;</span><br><span class="line">    return fib(n-1) + fib(n-2);</span><br><span class="line">&#125;</span><br><span class="line">=&gt;</span><br><span class="line">let tmp = lambda(fib, n) &#123;</span><br><span class="line">    fib = fib(fib);</span><br><span class="line">    if (n &lt; 2) return 0;</span><br><span class="line">    return fib(n-1) + fib(n-2);</span><br><span class="line">&#125;</span><br><span class="line">let fib = tmp(fib);</span><br></pre></td></tr></table></figure><p>有了上述基础，就可以看相关代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Value *Parser::parseFunctionCommon(const std::string &amp;name)</span><br><span class="line">&#123;</span><br><span class="line">    // create function and generate parallel invoke.</span><br><span class="line">    // for module require, need insert file name</span><br><span class="line">    IRFunction *function = module_.createFunction(</span><br><span class="line">        Combinator(lexer_.filename(), name));</span><br><span class="line">    pushFunctionScopeAndInit(function);</span><br><span class="line"></span><br><span class="line">    Strings params;</span><br><span class="line">    getFunctionParamsAndBody(params, function);</span><br><span class="line"></span><br><span class="line">    // save current captures.</span><br><span class="line">    std::vector&lt;std::string&gt; prototype;</span><br><span class="line">    getFunctionPrototype(name, prototype, params);</span><br><span class="line">    function-&gt;setParams(std::move(prototype));</span><br><span class="line"></span><br><span class="line">    std::unordered_set&lt;std::string&gt; captures;</span><br><span class="line">    std::swap(captures, scope-&gt;captures_);</span><br><span class="line">    if (captures.find(name) != captures.end())</span><br><span class="line">        dealRecursiveDecl(name);</span><br><span class="line">    popFunctionScope(function);</span><br><span class="line"></span><br><span class="line">    // create closure for function.</span><br><span class="line">    return createClosureForFunction(name, captures);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>parseFunctionCommon</code> 首先分析函数参数和函数体，然后获取函数原型(步骤2)，根据函数是否递归调用自身，调用<code>dealRecursiveDecl</code>(步骤3)，最后为函数创建闭包(步骤1)。</p><p>在函数原型部分，Script 将自身的名字放到 capture 列表的最后部分位置，这样使得处理递归调用变得简单。</p><h2 id="目标代码生成"><a href="#目标代码生成" class="headerlink" title="目标代码生成"></a>目标代码生成</h2><p>代码生成流程如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">void CodeGen::runOnFunction(IRFunction *func)</span><br><span class="line">&#123;</span><br><span class="line">    std::list&lt;LiveInterval&gt; intervals;</span><br><span class="line">    &#123;</span><br><span class="line">        LiveIntervalAnalysis analysis;</span><br><span class="line">        analysis.runOnFunction(func);</span><br><span class="line">        analysis.swapIntervals(intervals);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    SimpleRegisterAllocation RA(255, intervals);</span><br><span class="line">    RA.runOnFunction(func);</span><br><span class="line">    PhiElimination PE;</span><br><span class="line">    PE.runOnFunction(func);</span><br><span class="line"></span><br><span class="line">    numOfRegister = RA.totalRegister();</span><br><span class="line">    genFunction(func);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先是分析变量活性区间，然后通过活性区间进行寄存器分配，最后消除 Phi 结点，此时 IR 退出 SSA 形式。然后在这个基础上以函数为单位进行代码生成。</p><p>CodeGen 目标为opcode，而opcode相关操作包装在OPBuilder中。具体逻辑比较简单，请直接看源码。</p><h3 id="活性区间计算与寄存器分配"><a href="#活性区间计算与寄存器分配" class="headerlink" title="活性区间计算与寄存器分配"></a>活性区间计算与寄存器分配</h3><p>活性区间及寄存器分配以:</p><blockquote><p>Linear Scan Register Allocation for the Java HotSpot™ Client Compiler - Christian Wimmer</p></blockquote><p>论文为基础，详细逻辑可以参考该论文。</p><p>活性区间计算涉及到函数如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">void buildIntervals(IRFunction *func);</span><br><span class="line">void computeLocalLiveSet(IRFunction *func);</span><br><span class="line">void computeGlobalLiveSet(IRFunction *func);</span><br></pre></td></tr></table></figure><p>按照论文，首先计算 <code>BasicBlock</code> 顺序并编号，然后依次计算本地活性集和全局活性集，最后才建立活性区间。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">void LiveIntervalAnalysis::runOnFunction(IRFunction *func)</span><br><span class="line">&#123;</span><br><span class="line">    func-&gt;computeBlockOrder();</span><br><span class="line">    computeLocalLiveSet(func);</span><br><span class="line">    computeGlobalLiveSet(func);</span><br><span class="line">    buildIntervals(func);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>寄存器分配部分，原先的想法是使用线性扫描寄存器分配方法，在实现过程中，部分细节不知道怎么处理，所以就使用了比较简单的分配方式，将所有变量放到栈上，所有临时变量才分配寄存器，由 VM 约定最多255个寄存器。在 <code>SimpleRegisterAllocation</code> 中具体操作如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">void initAndSortIntervals();</span><br><span class="line">void assignRegister(IRFunction *func);</span><br><span class="line">void allocateNewRegister(LiveInterval &amp;interval);</span><br><span class="line">void expiredOldIntervals(unsigned current, ActiveSet &amp;active, ActiveSet &amp;inactive);</span><br><span class="line">bool tryToAllocateRegister(LiveInterval &amp;interval, ActiveSet &amp;active, ActiveSet &amp;inactive);</span><br></pre></td></tr></table></figure><p>具体实现过程，参考<a href="http://www.hashcoding.net/2016/09/06/Linear-Scan-Register-Allocation/">博客</a>;</p><h2 id="Runtime"><a href="#Runtime" class="headerlink" title="Runtime"></a>Runtime</h2><p>虚拟机的数据对象采用 Tagging 标记方式，整个 Runtime 以 C 语言为主实现，封装后供 C++ 使用。对象基本结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">enum Tag &#123;</span><br><span class="line">    TagNot = 0,</span><br><span class="line">    TagFixnum = 1,</span><br><span class="line">    TagReal = 2,</span><br><span class="line">    TagSpec = 3,</span><br><span class="line"></span><br><span class="line">    TagNil = 7,</span><br><span class="line"></span><br><span class="line">    TagShift = 2,</span><br><span class="line">    TagMask = 3,</span><br><span class="line"></span><br><span class="line">    TagSpecalMask = 0xf,</span><br><span class="line">    TagSpecalShift = 4,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 8bits</span><br><span class="line">enum Type &#123;</span><br><span class="line">    TypeString = 0,</span><br><span class="line">    TypeArray = TypeString + 1,</span><br><span class="line">    TypeClosure = TypeString + 2,</span><br><span class="line">    TypeUserFunc = TypeString + 3,</span><br><span class="line">    TypeHashNode = TypeString + 4,</span><br><span class="line">    TypeUserData = TypeString + 5,</span><br><span class="line">    TypeHashTable = TypeString + 6,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// common property of heap object</span><br><span class="line">// obType_ is the type of object</span><br><span class="line">#define HEAP_OBJECT_HEAD   \</span><br><span class="line">    int8_t obType;         \</span><br><span class="line">    int8_t resv1;          \</span><br><span class="line">    int8_t resv2;          \</span><br><span class="line">    int8_t resv3</span><br><span class="line"></span><br><span class="line">typedef struct &#123;</span><br><span class="line">    HEAP_OBJECT_HEAD;</span><br><span class="line">&#125; CommonObject;</span><br></pre></td></tr></table></figure><p><code>Tag</code> 用于标记简单对象类型，复合对象继承自 <code>CommonObject</code>，使用 <code>obType</code> 表示具体对象类型即 <code>Type</code> 中对应的类型。</p><p>以String为例 ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">typedef struct</span><br><span class="line">&#123;</span><br><span class="line">    HEAP_OBJECT_HEAD;</span><br><span class="line">    size_t length;</span><br><span class="line">    char str[];</span><br><span class="line">&#125; String;</span><br></pre></td></tr></table></figure><p>任何一个 String 对象长度为 <code>sizeof(String) + String.length</code>。所有数据结构中，最为复杂的是 Hash 表的设计。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">typedef struct HashNodeList</span><br><span class="line">&#123;</span><br><span class="line">    HEAP_OBJECT_HEAD;</span><br><span class="line">    size_t capacity;</span><br><span class="line">    HashNode content[0];</span><br><span class="line">&#125; HashNodeList;</span><br><span class="line"></span><br><span class="line">typedef struct Hash</span><br><span class="line">&#123;</span><br><span class="line">    HEAP_OBJECT_HEAD;</span><br><span class="line">    size_t capacity;</span><br><span class="line">    size_t size;</span><br><span class="line">    size_t max_idx;</span><br><span class="line">    HashNodeList *content;</span><br><span class="line">&#125; Hash;</span><br></pre></td></tr></table></figure><p>Hash 是 Hash 表的数据结构，其中数据存放在 HashNodeList 部分，这样设计是用于后面的 Expand 以及 Shrink 操作。这里说明 hash 表 set 操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">static void HashSet(Object self, uintptr_t key, Object value)</span><br><span class="line">&#123;</span><br><span class="line">    assert(IsFixnum(value));</span><br><span class="line"></span><br><span class="line">    Hash *hash = (Hash*)self;</span><br><span class="line">    uintptr_t index = key % hash-&gt;capacity;</span><br><span class="line">    uintptr_t slot = hash-&gt;capacity;</span><br><span class="line"></span><br><span class="line">    if (IsNil(value)) &#123;</span><br><span class="line">        value = CreateUndef();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    HashNodeList *list = hash-&gt;content;</span><br><span class="line">    while (list-&gt;content[index].key != key</span><br><span class="line">        &amp;&amp; !IsNil(list-&gt;content[index].value)) &#123;</span><br><span class="line">        if (slot == hash-&gt;capacity</span><br><span class="line">            &amp;&amp; IsUndef(list-&gt;content[index].value)) &#123;</span><br><span class="line">            slot = index;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">        index = HashNextIndex(index, hash-&gt;capacity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (list-&gt;content[index].key == key)</span><br><span class="line">        slot = index;</span><br><span class="line">    if (slot == hash-&gt;capacity)</span><br><span class="line">        slot = index;</span><br><span class="line"></span><br><span class="line">    if (!IsUndef(value) &amp;&amp; (IsNil(list-&gt;content[slot].value)</span><br><span class="line">        || IsUndef(list-&gt;content[slot].value))) &#123;</span><br><span class="line">        assert(hash-&gt;size != hash-&gt;capacity);</span><br><span class="line">        if (key == HashKey(CreateFixnum(hash-&gt;max_idx)))</span><br><span class="line">            hash-&gt;max_idx++;</span><br><span class="line">        hash-&gt;size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (IsUndef(value) &amp;&amp; !IsUndef(list-&gt;content[slot].value)</span><br><span class="line">        &amp;&amp; !IsNil(list-&gt;content[slot].value)) &#123;</span><br><span class="line">        assert(hash-&gt;size);</span><br><span class="line">        if (key == HashKey(CreateFixnum(hash-&gt;max_idx - 1)))</span><br><span class="line">            hash-&gt;max_idx--;</span><br><span class="line">        hash-&gt;size--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    list-&gt;content[slot].value = value;</span><br><span class="line">    list-&gt;content[slot].key = key;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先计算hash对象所在 HashNodeList 中的 slot，如果当前位置已经被占用，则计算下一个 slot 所在位置。找到位置后，根据是否 nil 判断是否删除结点。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Object HashFind(Object self, Object key)</span><br><span class="line">&#123;</span><br><span class="line">    assert(IsHash(self));</span><br><span class="line">    Hash *hash = (Hash*)self; </span><br><span class="line">    uint32_t hash_key = HashKey(key);</span><br><span class="line">    uintptr_t index = hash_key % hash-&gt;capacity;</span><br><span class="line"></span><br><span class="line">    HashNodeList *list = hash-&gt;content;</span><br><span class="line">    while (list-&gt;content[index].key != hash_key</span><br><span class="line">        &amp;&amp; !IsNil(list-&gt;content[index].value)) &#123;</span><br><span class="line">        if (IsUndef(list-&gt;content[index].value))</span><br><span class="line">            break;</span><br><span class="line">        index = HashNextIndex(index, list-&gt;capacity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (IsNil(list-&gt;content[index].value))</span><br><span class="line">        return CreateUndef();</span><br><span class="line">    else</span><br><span class="line">        return list-&gt;content[index].value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>find 操作查找部分与 set 类似，最后直接返回对象值。实际上对外暴露的接口是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">void HashSetAndUpdate(Object self, Object key, Object value)</span><br><span class="line">&#123;</span><br><span class="line">    assert(IsHash(self));</span><br><span class="line"></span><br><span class="line">    if (key == CreateFixnum(-1))</span><br><span class="line">        key = CreateFixnum(((Hash*)self)-&gt;max_idx);</span><br><span class="line">    uint32_t hash_key = HashKey(key);</span><br><span class="line">    HashSet(self, hash_key, value);</span><br><span class="line">    if (HashNeedExpand(self)) </span><br><span class="line">        HashExpand(self);</span><br><span class="line">    else if (HashNeedShrink(self)) </span><br><span class="line">        HashShrink(self);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里对 set 后的表进行判断，并根据结果伸展或者收缩表。伸展表时，目标容积为原容积的 3/2，收缩时，目标容积为原容积的 2/3。</p><p>需要注意的是 Runtime 中申请内存也必须在 Runtime 中，保证 GC 能够访问到该内存。所以 Runtime 设计中出现的内存分配必须使用 GC 提供的接口。另外，如果分配过程中发生了 GC，也需要保证所有指针均指向正确的位置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// </span><br><span class="line">// just expand content.</span><br><span class="line">static void HashExpand(Object self)</span><br><span class="line">&#123;</span><br><span class="line">    assert(IsHash(self));</span><br><span class="line">    Hash *hash = (Hash*)self;</span><br><span class="line">    size_t future_capacity = HashExpandSize(hash-&gt;capacity);</span><br><span class="line"></span><br><span class="line">    // before gc, save it as global object</span><br><span class="line">    GlobalObjectBuffer = &amp;self;</span><br><span class="line">    HashNodeList *cap = (HashNodeList*)HashNewNodeList(future_capacity);</span><br><span class="line">    GlobalObjectBuffer = NULL;</span><br><span class="line"></span><br><span class="line">    HashRehash(self, cap);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因此，在 Runtime 中提供了一个特殊的对象 <code>GlobalObjectBuffer</code>来保证内存指针始终指向正确的位置。</p><h2 id="Virtual-Machine-amp-GC"><a href="#Virtual-Machine-amp-GC" class="headerlink" title="Virtual Machine &amp; GC"></a>Virtual Machine &amp; GC</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">typedef int8_t Byte;</span><br><span class="line"></span><br><span class="line">enum Opcode &#123;</span><br><span class="line">    OK_Goto = 0,    // goto lable@_addr</span><br><span class="line"></span><br><span class="line">    // operator</span><br><span class="line">    // single </span><br><span class="line">    OK_Not,         // temp = !temp</span><br><span class="line">    // binary </span><br><span class="line">    OK_Add,         // temp = temp + temp</span><br><span class="line">    OK_Sub,         // temp = temp - temp</span><br><span class="line">    OK_Mul,         // temp = temp * temp</span><br><span class="line">    OK_Div,         // temp = temp / temp</span><br><span class="line">    // relop</span><br><span class="line">    OK_Great,       // temp = temp &gt; temp</span><br><span class="line">    OK_GreatThan,   // temp = temp &gt;= temp</span><br><span class="line">    OK_Less,        // temp = temp &lt; temp</span><br><span class="line">    OK_LessThan,    // temp = temp &lt;= temp</span><br><span class="line">    OK_Equal,       // temp = temp == temp</span><br><span class="line">    OK_NotEqual,    // temp = temp != temp</span><br><span class="line"></span><br><span class="line">    // move</span><br><span class="line">    OK_MoveS,       // temp = string index</span><br><span class="line">    OK_MoveI,       // temp = constant</span><br><span class="line">    OK_MoveF,// temp = float</span><br><span class="line">    OK_MoveN,// temp = null</span><br><span class="line">    OK_Move,        // temp = temp</span><br><span class="line"></span><br><span class="line">    // memory</span><br><span class="line">    OK_Load,        // load id to temp</span><br><span class="line">    OK_Index,       // load id [ temp ] to temp</span><br><span class="line">    OK_Store,       // store id from temp</span><br><span class="line">    OK_SetIndex,      // store id [ temp ] from temp</span><br><span class="line"></span><br><span class="line">    // condition jmp</span><br><span class="line">    OK_If,          // if temp goto label</span><br><span class="line"></span><br><span class="line">    // call </span><br><span class="line">    OK_Param,       // push temp</span><br><span class="line">    OK_Call,        // temp = call Label in num params</span><br><span class="line">    OK_TailCall,</span><br><span class="line">    OK_Return,      // return temp</span><br><span class="line">    OK_NewHash,// tmp = new hash</span><br><span class="line">    OK_NewClosure,// tmp = new string(idx)</span><br><span class="line">    OK_UserClosure, // tmp = new user closure</span><br><span class="line">    OK_Halt,        // stop</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>opcode 设计如上，VM 对其加以解释执行。</p><p>VM 中有三个重要的数据结构，VMFrame、VMScene、VMState，VMFrame 是运行时的一个调用栈帧，保存了当前所在位置的运行时数据。VMScene是一个运行场景，每一个程序一个运行场景，当前场景运行不会影响到后续场景的运行。VMState是opcode解释器，绑定VMScene运行。在同一时刻，只能有一个VMState运行，因为需要涉及到Runtime中的设计。当然这中设计导致了这种缺陷，但是目前是最简单的实现方式。</p><p>GC 采用了semi-space swap算法，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">struct Semispace</span><br><span class="line">&#123;</span><br><span class="line">    Object allocateMemory(size_t size);</span><br><span class="line">    bool contains(Object obj);</span><br><span class="line">    void reset();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class GarbageCollector</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    Object allocate(size_t size);</span><br><span class="line"></span><br><span class="line">    void bindReference(std::function&lt;VariableReference&gt; call);</span><br><span class="line">    void bindGlobals(std::function&lt;GloablVariable&gt; call);</span><br><span class="line">    void processReference(Object *slot);</span><br><span class="line"></span><br><span class="line">private:</span><br><span class="line">    void garbageCollect();</span><br><span class="line"></span><br><span class="line">    void swapSpace();</span><br><span class="line">    void cleanSpace(Semispace *space);</span><br><span class="line"></span><br><span class="line">    bool isForwarded(Object obj);</span><br><span class="line">    void forwardTo(Object obj, Object new_addr);</span><br><span class="line">    Object forwardee(Object obj);</span><br><span class="line"></span><br><span class="line">    Object swap(Object obj, size_t size);</span><br><span class="line"></span><br><span class="line">    Semispace *from_space_;</span><br><span class="line">    Semispace *to_space_;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>主要数据结构如上。其中有两个回掉函数，其中<code>GloablVariable</code>用于与VM沟通，获取根结点数据;<code>VariableReference</code>用于与Runtime沟通，处理变量引用，这样将GC与VM和Runtime解耦，以后修改GC更为方便。GC详细介绍可以看<a href="http://hllvm.group.iteye.com/group/topic/39376" target="_blank" rel="noopener">文章</a>。</p><p>在 buildin.cpp 中提供了 Runtime 涉及到的操作和 GC 耦合部分内容:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">void ProcessGlobals(void *scene)</span><br><span class="line">&#123;</span><br><span class="line">    using script::VMFrame;</span><br><span class="line">    using script::VMScene;</span><br><span class="line">    using script::GarbageCollector;</span><br><span class="line"></span><br><span class="line">    VMScene *vmscene = static_cast&lt;VMScene*&gt;(scene);</span><br><span class="line">    GarbageCollector *GC = &amp;vmscene-&gt;GC;</span><br><span class="line">    for (auto &amp;frame : vmscene-&gt;frames) &#123;</span><br><span class="line">        GC-&gt;processReference(&amp;frame.params);</span><br><span class="line">        GC-&gt;processReference(&amp;frame.registers);</span><br><span class="line">    &#125;</span><br><span class="line">    for (auto &amp;object : vmscene-&gt;paramsStack) &#123;</span><br><span class="line">        GC-&gt;processReference(&amp;object);</span><br><span class="line">    &#125;</span><br><span class="line">    if (GlobalObjectBuffer != NULL)</span><br><span class="line">        GC-&gt;processReference(GlobalObjectBuffer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void ProcessVariableReference(void *scene, Object *object)</span><br><span class="line">&#123;</span><br><span class="line">    using script::VMScene;</span><br><span class="line">    using script::GarbageCollector;</span><br><span class="line"></span><br><span class="line">    VMScene *vmscene = static_cast&lt;VMScene*&gt;(scene);</span><br><span class="line">    GarbageCollector *GC = &amp;vmscene-&gt;GC;</span><br><span class="line">    if (IsClosure(*object)) &#123;</span><br><span class="line">        size_t hold = ClosureHold(*object);</span><br><span class="line">        Object *params = ClosureParams(*object);</span><br><span class="line">        for (size_t idx = 0; idx &lt; hold; ++idx) &#123;</span><br><span class="line">            GC-&gt;processReference(&amp;(params[idx]));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    else if (IsArray(*object)) &#123;</span><br><span class="line">        size_t length = ArraySize(*object);</span><br><span class="line">        Object *array = ArrayPointer(*object);</span><br><span class="line">        for (size_t idx = 0; idx &lt; length; ++idx) &#123;</span><br><span class="line">            GC-&gt;processReference(&amp;array[idx]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    else if (IsHash(*object)) &#123;</span><br><span class="line">        GC-&gt;processReference(HashNodeListGet(*object));</span><br><span class="line">    &#125;</span><br><span class="line">    else if (IsHashNodeList(*object)) &#123;</span><br><span class="line">        size_t size = NodeListElementCapacity(*object);</span><br><span class="line">        HashNode *nodes = HashNodeListElement(*object);</span><br><span class="line">        for (size_t idx = 0; idx &lt; size; ++idx) &#123;</span><br><span class="line">            GC-&gt;processReference(&amp;nodes[idx].value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码就是用于处理 GC 的回掉工作。</p><p>在 VM 当中提供了 tailCall 指令用于尾调用(并不局限与尾递归)优化，对于那些在返回语句中调用了其他函数的调用语句均可以优化。具体VM中则是重复利用当前 VMFrame ，达到尾调用的目的。</p><p>仍然需要注意的是使用 GC 出现的具有迷惑性的问题，如果某条指令执行过程中，创建了对象，就要保证创建前后指针值的位置正确。</p><h2 id="FFI-支持"><a href="#FFI-支持" class="headerlink" title="FFI 支持"></a>FFI 支持</h2><p>在Runtime和VM中提供了FFI支持：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">///</span><br><span class="line">/// user func object</span><br><span class="line">///</span><br><span class="line">typedef struct</span><br><span class="line">&#123;</span><br><span class="line">    HEAP_OBJECT_HEAD;</span><br><span class="line">    void *content;</span><br><span class="line">&#125; UserClosure;</span><br></pre></td></tr></table></figure><p>该结构用于包装用户函数，然后 VM 中可以使用 callUserClosure 与用户定义函数进行交互。</p><p>这些用户定义函数需要在编译器中先进行注册后才能被编译器识别：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">Object lib_require(VMState *state, size_t paramsNums)</span><br><span class="line">&#123;</span><br><span class="line">    assert(globalReguireCallback);</span><br><span class="line">    if (paramsNums != 1) &#123;</span><br><span class="line">        state-&gt;runtimeError(&quot;require only takes one parameter&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Object res = state-&gt;getScene()-&gt;paramsStack.back();</span><br><span class="line">    if (IsString(res)) &#123;</span><br><span class="line">        // save it.</span><br><span class="line">        std::string filename = StringGet(res); </span><br><span class="line">        VMScene *scene = state-&gt;getScene();</span><br><span class="line">        unsigned resReg = static_cast&lt;unsigned&gt;(scene-&gt;lastValue);</span><br><span class="line">        globalReguireCallback(filename.c_str(), resReg);</span><br><span class="line">    &#125;</span><br><span class="line">    return CreateUndef();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static Lib libs[] = &#123;</span><br><span class="line">    &#123; &quot;require&quot;, lib_require &#125;,</span><br><span class="line">    &#123; nullptr, nullptr &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">void RegisterLibrary(LibRegister lib_register)</span><br><span class="line">&#123;</span><br><span class="line">    Lib *lib = libs;</span><br><span class="line">    while (lib-&gt;name) &#123;</span><br><span class="line">        lib_register(lib-&gt;name, lib-&gt;closure);</span><br><span class="line">        lib++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void RegisterRequire(RequireCallback require)</span><br><span class="line">&#123;</span><br><span class="line">    globalReguireCallback = require;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里是对脚本提供了模块加载功能，首先用用户提供自定义函数(原型与lib_require一致)，然后保存在<code>libs[]</code>中，编译器初始化时，会将具体的注册函数传递给RegisterLibrary并一一注册。</p><p>对于一个C函数的定义，在注册过程中需要向Parser和opcode中注册，方便符号查找。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;LL-Script 是一个简单的脚本语言，最初写的时候是为了给游戏做脚本，后来还是使用lua替代。很久后又重新开始按照规范写了一次，这次整体流程走通了，但是设计杂乱无章。前些日子从新写了一次，采用了一些良好的设计，这就是先在这个版本。&lt;/p&gt;
&lt;p&gt;脚本源码在github上，访问&lt;a href=&quot;https://github.com/thinkermao/LL-Script&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;这里&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="编译器实现" scheme="http://www.hashcoding.net/categories/%E7%BC%96%E8%AF%91%E5%99%A8%E5%AE%9E%E7%8E%B0/"/>
    
    
      <category term="Compile" scheme="http://www.hashcoding.net/tags/Compile/"/>
    
  </entry>
  
  <entry>
    <title>OpenGL traceball</title>
    <link href="http://www.hashcoding.net/2016/11/21/OpenGL-traceball/"/>
    <id>http://www.hashcoding.net/2016/11/21/OpenGL-traceball/</id>
    <published>2016-11-21T12:48:43.000Z</published>
    <updated>2016-11-21T14:01:49.600Z</updated>
    
    <content type="html"><![CDATA[<p>这是图形学的一个作业，记录在此。</p><p>这次作业要求实现一个 traceball，需求如下：</p><ol><li>鼠标按住滑动，物体跟随鼠标转动</li><li>滑动后释放鼠标，则物体保持最后旋转方向继续转动</li><li>直接点击则可以停止旋转</li></ol><p>现在需要把三个要求转换为程序实现，这里使用 freeglut 库开发。</p><a id="more"></a><h2 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h2><p>设计时需要考虑到的问题主要有下面两点。</p><h3 id="物体旋转"><a href="#物体旋转" class="headerlink" title="物体旋转"></a>物体旋转</h3><p>OpenGL 中旋转通过 <code>glRotate*()</code> 函数实现，该函数需要提供两种含义的参数：1、旋转角度；2、旋转轴矢量。即用户改变旋转状态时，只需找出旋转角度与旋转轴矢量。除此之外，具体实现时我们还需要记录旋转前的状态，即每次绘制图像时先旋转到先前位置，然后进行下一步旋转。因此，多个旋转组合，理论上左乘顺序，依次给出旋转的矩阵。然而CTM实现是右乘属性。这里用栈操作实现不了顺序，只能靠自己编程设置矩阵保存上次旋转后的组合矩阵，再CTM右乘它。公式为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">初始：CTM(0)=I, M(0)=I</span><br><span class="line"></span><br><span class="line">CTM(i)=I*R(i)*M(i-1); </span><br><span class="line">M(i)=CTM(i）;</span><br></pre></td></tr></table></figure><h3 id="鼠标跟随"><a href="#鼠标跟随" class="headerlink" title="鼠标跟随"></a>鼠标跟随</h3><p>这里假设我们的视点放在 Z 轴上，方向朝向远点，正方向为上。因此我们可以把屏幕上任意一点看成(x, y, 0)，方便后续计算。OpenGL 提供了鼠标相关回掉设置，可以监听鼠标移动和点击事件。对于鼠标移动，可以每次记录当前位置和前一刻位置，算出鼠标移动矢量 a。算出与矢量 a 垂直的平面，可以算出 xoy 平面和该平面的交线即为旋转轴。旋转角度则可以通过旋转方向矢量长度计算。</p><p>现在可以监听鼠标按键信息，按下表示开始旋转，弹起表示监控旋转结束；如果按下和弹起位置一样，那么停止旋转，否则继续保持旋转。</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><p>下面直接给出源码，其中有部分完成作业中其他需求部分也保留了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;math.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;GL/glut.h&gt;</span><br><span class="line"></span><br><span class="line">#define PI 3.1415926</span><br><span class="line"></span><br><span class="line">#define ORITHOGRAPHIC 1</span><br><span class="line">#define PERSPECTIVE   2</span><br><span class="line"></span><br><span class="line">typedef GLfloat Point3f[3];</span><br><span class="line"></span><br><span class="line">void Idle(void);</span><br><span class="line">void Gasket(void);</span><br><span class="line">void Render(void);</span><br><span class="line">void Initialize(void);</span><br><span class="line">void Reshape(int w, int h);</span><br><span class="line">void Perspective(int w, int h);</span><br><span class="line">void MouseMotion(int x, int y);</span><br><span class="line">void Orthographic(int w, int h);</span><br><span class="line">void Keyboard(unsigned char key, int x, int y);</span><br><span class="line">void MouseEvent(int button, int state, int x, int y);</span><br><span class="line"></span><br><span class="line">int gProjectStyle;</span><br><span class="line">int gWindowWidth, gWindowHeight;</span><br><span class="line">int gCurrentX, gCurrentY;</span><br><span class="line">int gStartX, gStartY;</span><br><span class="line">int gGasketLevel;</span><br><span class="line"></span><br><span class="line">// lookAt 相关</span><br><span class="line">GLfloat gZNear = 3.f, gZFar = 10.f;</span><br><span class="line">GLfloat gZeye = 5.f;</span><br><span class="line"></span><br><span class="line">// trackball 相关</span><br><span class="line">GLfloat gLastPosition[3] = &#123; 0.f, 0.f, 0.f &#125;;</span><br><span class="line">GLfloat gAxis[3] = &#123; 0.f, 0.f, 0.1f &#125;;</span><br><span class="line">GLfloat gAngle = 0.f;</span><br><span class="line">bool gIsRedrawContinue = false;</span><br><span class="line"></span><br><span class="line">// 保存矩阵</span><br><span class="line">GLfloat CompositeTransMatrix[4][4];</span><br><span class="line"></span><br><span class="line">int main(int argc, char **argv)</span><br><span class="line">&#123;</span><br><span class="line">    gWindowWidth = gWindowHeight = 600;</span><br><span class="line"></span><br><span class="line">    glutInit(&amp;argc, argv);</span><br><span class="line">    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB | GLUT_DEPTH);</span><br><span class="line">    glutInitWindowSize(gWindowWidth, gWindowHeight);</span><br><span class="line">    glutCreateWindow(&quot;trackball Color Gasket&quot;);</span><br><span class="line"></span><br><span class="line">    Initialize();</span><br><span class="line"></span><br><span class="line">    glutMainLoop();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void Identity(GLfloat matrix[4][4])</span><br><span class="line">&#123;</span><br><span class="line">    for (int i = 0; i &lt; 4; ++i) &#123;</span><br><span class="line">        for (int j = 0; j &lt; 4; ++j) &#123;</span><br><span class="line">            matrix[i][j] = i == j ? 1.f : 0.f;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void MenuSelect(int item)</span><br><span class="line">&#123;</span><br><span class="line">    if (item == ORITHOGRAPHIC) &#123;</span><br><span class="line">        Orthographic(gWindowWidth, gWindowHeight);</span><br><span class="line">        gProjectStyle = ORITHOGRAPHIC;</span><br><span class="line">        glutPostRedisplay();</span><br><span class="line">    &#125;</span><br><span class="line">    else if (item == PERSPECTIVE) &#123;</span><br><span class="line">        Perspective(gWindowWidth, gWindowHeight);</span><br><span class="line">        gProjectStyle = PERSPECTIVE;</span><br><span class="line">        glutPostRedisplay();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void InitMenu(void)</span><br><span class="line">&#123;</span><br><span class="line">    glutCreateMenu(MenuSelect);</span><br><span class="line">    glutAddMenuEntry(&quot;Orthographic&quot;, ORITHOGRAPHIC);</span><br><span class="line">    glutAddMenuEntry(&quot;Perspective&quot;, PERSPECTIVE);</span><br><span class="line">    glutAttachMenu(GLUT_RIGHT_BUTTON);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void InitCallback(void)</span><br><span class="line">&#123;</span><br><span class="line">    glutReshapeFunc(Reshape);</span><br><span class="line">    glutDisplayFunc(Render);</span><br><span class="line">    glutIdleFunc(Idle);</span><br><span class="line">    glutMouseFunc(MouseEvent);</span><br><span class="line">    glutMotionFunc(MouseMotion);</span><br><span class="line">    glutKeyboardFunc(Keyboard);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void Initialize(void)</span><br><span class="line">&#123;</span><br><span class="line">    InitCallback();</span><br><span class="line">    InitMenu();</span><br><span class="line"></span><br><span class="line">    gGasketLevel = 3;</span><br><span class="line">    Identity(CompositeTransMatrix);</span><br><span class="line"></span><br><span class="line">    glEnable(GL_DEPTH_TEST);</span><br><span class="line">    glShadeModel(GL_FLAT);</span><br><span class="line">    glClearColor(1.0, 1.0, 1.0, 1.0);</span><br><span class="line"></span><br><span class="line">    gProjectStyle = ORITHOGRAPHIC;</span><br><span class="line">    Orthographic(gWindowWidth, gWindowHeight);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void Reshape(int w, int h)</span><br><span class="line">&#123;</span><br><span class="line">    if (gProjectStyle == ORITHOGRAPHIC)</span><br><span class="line">        Orthographic(w, h);</span><br><span class="line">    else</span><br><span class="line">        Perspective(w, h);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void Idle(void)</span><br><span class="line">&#123;</span><br><span class="line">    if (gIsRedrawContinue == true) &#123;</span><br><span class="line">        gAngle = 0.01f;</span><br><span class="line">        glutPostRedisplay();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// </span><br><span class="line">// 计算透视窗口</span><br><span class="line">// </span><br><span class="line">void CalView(int w, int h, GLfloat *left, GLfloat *right, GLfloat *bottom, GLfloat *top)</span><br><span class="line">&#123;</span><br><span class="line">    if (w &lt;= h) &#123;</span><br><span class="line">        *left = -2.0f;</span><br><span class="line">        *right = 2.0f;</span><br><span class="line">        *bottom = -2.0f * h / w;</span><br><span class="line">        *top = 2.0f * h / w;</span><br><span class="line">    &#125; </span><br><span class="line">    else &#123;</span><br><span class="line">        *left = -2.0f * w / h;</span><br><span class="line">        *right = 2.0f * w / h;</span><br><span class="line">        *bottom = -2.0f;</span><br><span class="line">        *top = 2.0f;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void Perspective(int w, int h)</span><br><span class="line">&#123;</span><br><span class="line">    GLfloat left, right, bottom, top;</span><br><span class="line">    CalView(w, h, &amp;left, &amp;right, &amp;bottom, &amp;top);</span><br><span class="line"></span><br><span class="line">    glViewport(0, 0, w, h);</span><br><span class="line">    glMatrixMode(GL_PROJECTION);</span><br><span class="line">    glLoadIdentity();</span><br><span class="line">    glFrustum(left, right, bottom, top, gZNear, gZFar);</span><br><span class="line">    glutPostRedisplay();</span><br><span class="line"></span><br><span class="line">    gWindowWidth = w;</span><br><span class="line">    gWindowHeight = h;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void Orthographic(int w, int h)</span><br><span class="line">&#123;</span><br><span class="line">    GLfloat left, right, bottom, top;</span><br><span class="line">    CalView(w, h, &amp;left, &amp;right, &amp;bottom, &amp;top);</span><br><span class="line"></span><br><span class="line">    glViewport(0, 0, w, h);</span><br><span class="line">    glMatrixMode(GL_PROJECTION);</span><br><span class="line">    glLoadIdentity();</span><br><span class="line">    glOrtho(left, right, bottom, top, gZNear, gZFar);</span><br><span class="line">    glMatrixMode(GL_MODELVIEW);</span><br><span class="line">    glutPostRedisplay();</span><br><span class="line"></span><br><span class="line">    gWindowWidth = w;</span><br><span class="line">    gWindowHeight = h;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// </span><br><span class="line">// 将屏幕坐标转换到 vector3f</span><br><span class="line">// </span><br><span class="line">void TrackballPToV(int x, int y, int w, int h, GLfloat v[3])</span><br><span class="line">&#123;</span><br><span class="line">    v[0] = (2.0f*x - w) / w;</span><br><span class="line">    v[1] = (h - 2.0f*y) / h;</span><br><span class="line">    float d = sqrtf(v[0] * v[0] + v[1] * v[1]);</span><br><span class="line">    v[2] = cosf((PI / 2.0f) * ((d &lt; 1.0f) ? d : 1.0f));</span><br><span class="line">    float a = 1.0f / sqrtf(v[0] * v[0] + v[1] * v[1] + v[2] * v[2]);</span><br><span class="line">    v[0] *= a;</span><br><span class="line">    v[1] *= a;</span><br><span class="line">    v[2] *= a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void MouseMotion(int x, int y)</span><br><span class="line">&#123;</span><br><span class="line">    float curPos[3], dx, dy, dz;</span><br><span class="line">    TrackballPToV(x, y, gWindowWidth, gWindowHeight, curPos);</span><br><span class="line"></span><br><span class="line">    dx = curPos[0] - gLastPosition[0];</span><br><span class="line">    dy = curPos[1] - gLastPosition[1];</span><br><span class="line">    dz = curPos[2] - gLastPosition[2];</span><br><span class="line"></span><br><span class="line">    if (dx || dy || dz) &#123;</span><br><span class="line">        gAngle = 90.0F * sqrtf(dx*dx + dy*dy + dz*dz);</span><br><span class="line"></span><br><span class="line">        gAxis[0] = gLastPosition[1] * curPos[2] - gLastPosition[2] * curPos[1];</span><br><span class="line">        gAxis[1] = gLastPosition[2] * curPos[0] - gLastPosition[0] * curPos[2];</span><br><span class="line">        gAxis[2] = gLastPosition[0] * curPos[1] - gLastPosition[1] * curPos[0];</span><br><span class="line"></span><br><span class="line">        gLastPosition[0] = curPos[0];</span><br><span class="line">        gLastPosition[1] = curPos[1];</span><br><span class="line">        gLastPosition[2] = curPos[2];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    glutPostRedisplay();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void StartMotion(int x, int y)</span><br><span class="line">&#123;</span><br><span class="line">    gIsRedrawContinue = false;</span><br><span class="line">    gStartX = x; </span><br><span class="line">    gStartY = y;</span><br><span class="line">    gCurrentX = x;</span><br><span class="line">    gCurrentY = y;</span><br><span class="line">    TrackballPToV(x, y, gWindowWidth, gWindowHeight, gLastPosition);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void StopMotion(int x, int y)</span><br><span class="line">&#123;</span><br><span class="line">    if (gStartX != x &amp;&amp; gStartY != y) &#123;</span><br><span class="line">        gIsRedrawContinue = true;</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        gAngle = 0.0f;</span><br><span class="line">        gIsRedrawContinue = false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void MouseEvent(int Botton, int State, int MouseX, int MouseY)</span><br><span class="line">&#123;</span><br><span class="line">    if (Botton == GLUT_LEFT_BUTTON) &#123;</span><br><span class="line">        switch (State)</span><br><span class="line">        &#123;</span><br><span class="line">        case GLUT_DOWN:</span><br><span class="line">            StartMotion(MouseX, MouseY);</span><br><span class="line">            break;</span><br><span class="line">        case GLUT_UP:</span><br><span class="line">            StopMotion(MouseX, MouseY);</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void Render(void)</span><br><span class="line">&#123;</span><br><span class="line">    GLfloat *pCompositeTransMatrix = *CompositeTransMatrix;</span><br><span class="line"></span><br><span class="line">    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);</span><br><span class="line"></span><br><span class="line">    /* 多个旋转组合 */</span><br><span class="line">    glMatrixMode(GL_MODELVIEW);</span><br><span class="line">    glLoadIdentity();</span><br><span class="line">    glRotatef(gAngle, gAxis[0], gAxis[1], gAxis[2]);</span><br><span class="line">    glMultMatrixf(pCompositeTransMatrix);</span><br><span class="line">    glGetFloatv(GL_MODELVIEW_MATRIX, pCompositeTransMatrix);</span><br><span class="line"></span><br><span class="line">    // 设置 lookAtMatrix 应该在最开始的位置</span><br><span class="line">    glLoadIdentity();</span><br><span class="line">    gluLookAt(0, 0, gZeye, 0, 0, 0, 0, 1, 0);</span><br><span class="line">    glMultMatrixf(pCompositeTransMatrix);</span><br><span class="line"></span><br><span class="line">    Gasket();</span><br><span class="line"></span><br><span class="line">    glutSwapBuffers();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void Keyboard(unsigned char key, int x, int y)</span><br><span class="line">&#123;</span><br><span class="line">    if (&apos;0&apos; &lt;= key &amp;&amp; key &lt;= &apos;3&apos;) &#123;</span><br><span class="line">        gGasketLevel = key - &apos;0&apos;;</span><br><span class="line">        glutPostRedisplay();</span><br><span class="line">    &#125;</span><br><span class="line">    else if (key == &apos;q&apos; || key == &apos;Q&apos;) &#123;</span><br><span class="line">        exit(0);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void Triangle(const Point3f p1, const Point3f p2, const Point3f p3, const Point3f color)</span><br><span class="line">&#123;</span><br><span class="line">    glBegin(GL_POLYGON);</span><br><span class="line">    &#123;</span><br><span class="line">        glColor3fv(color);</span><br><span class="line">        glVertex3fv(p1);</span><br><span class="line">        glVertex3fv(p2);</span><br><span class="line">        glVertex3fv(p3);</span><br><span class="line">    &#125;</span><br><span class="line">    glEnd();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void Tetrahedron(const Point3f p1, const Point3f p2, const Point3f p3, const Point3f p4)</span><br><span class="line">&#123;</span><br><span class="line">    const static Point3f Color[] = &#123;</span><br><span class="line">        &#123; 1.f, 0.f, 0.f &#125;,</span><br><span class="line">        &#123; 0.f, 1.f, 0.f &#125;,</span><br><span class="line">        &#123; 0.f, 0.f, 1.f &#125;,</span><br><span class="line">        &#123; 1.f, 1.f, 0.1f &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    Triangle(p1, p2, p3, Color[0]);</span><br><span class="line">    Triangle(p1, p2, p4, Color[1]);</span><br><span class="line">    Triangle(p1, p3, p4, Color[2]);</span><br><span class="line">    Triangle(p2, p4, p3, Color[3]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void DivideVertices(Point3f p1, Point3f p2, Point3f p3, Point3f p4, int level)</span><br><span class="line">&#123;</span><br><span class="line">    Point3f v0, v1, v2, v3, v4, v5;</span><br><span class="line">    if (level &gt; 0) &#123;</span><br><span class="line">        for (int j = 0; j&lt;3; j++) v0[j] = (p1[j] + p2[j]) / 2;</span><br><span class="line">        for (int j = 0; j&lt;3; j++) v1[j] = (p1[j] + p3[j]) / 2;</span><br><span class="line">        for (int j = 0; j&lt;3; j++) v2[j] = (p1[j] + p4[j]) / 2;</span><br><span class="line">        for (int j = 0; j&lt;3; j++) v3[j] = (p2[j] + p3[j]) / 2;</span><br><span class="line">        for (int j = 0; j&lt;3; j++) v4[j] = (p2[j] + p4[j]) / 2;</span><br><span class="line">        for (int j = 0; j&lt;3; j++) v5[j] = (p4[j] + p3[j]) / 2;</span><br><span class="line">        DivideVertices(p1, v0, v1, v2, level - 1);</span><br><span class="line">        DivideVertices(v0, p2, v3, v4, level - 1);</span><br><span class="line">        DivideVertices(v1, v3, p3, v5, level - 1);</span><br><span class="line">        DivideVertices(v2, v4, v5, p4, level - 1);</span><br><span class="line">    &#125; </span><br><span class="line">    else &#123;</span><br><span class="line">        Tetrahedron(p1, p2, p3, p4);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void Gasket(void)</span><br><span class="line">&#123;</span><br><span class="line">    static Point3f Vertices[] = &#123;</span><br><span class="line">        &#123; -1.f, -1.f, 0.5773f &#125;,</span><br><span class="line">        &#123; 0.f, -1.f, -1.15475 &#125;,</span><br><span class="line">        &#123; 1.0f, -1.0f, 0.5773f &#125;,</span><br><span class="line">        &#123; 0.0f, 1.0f, 0.0f &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">    DivideVertices(Vertices[0], Vertices[1], Vertices[2], Vertices[3], gGasketLevel);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是图形学的一个作业，记录在此。&lt;/p&gt;
&lt;p&gt;这次作业要求实现一个 traceball，需求如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;鼠标按住滑动，物体跟随鼠标转动&lt;/li&gt;
&lt;li&gt;滑动后释放鼠标，则物体保持最后旋转方向继续转动&lt;/li&gt;
&lt;li&gt;直接点击则可以停止旋转&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;现在需要把三个要求转换为程序实现，这里使用 freeglut 库开发。&lt;/p&gt;
    
    </summary>
    
    
      <category term="OpenGL" scheme="http://www.hashcoding.net/tags/OpenGL/"/>
    
  </entry>
  
  <entry>
    <title>市场失灵与政府的不可或缺</title>
    <link href="http://www.hashcoding.net/2016/11/09/%E5%B8%82%E5%9C%BA%E5%A4%B1%E7%81%B5%E4%B8%8E%E6%94%BF%E5%BA%9C%E7%9A%84%E4%B8%8D%E5%8F%AF%E6%88%96%E7%BC%BA/"/>
    <id>http://www.hashcoding.net/2016/11/09/市场失灵与政府的不可或缺/</id>
    <published>2016-11-09T13:39:10.000Z</published>
    <updated>2016-11-09T13:39:55.947Z</updated>
    
    <content type="html"><![CDATA[<h1 id="绪论"><a href="#绪论" class="headerlink" title="绪论"></a>绪论</h1><p>亚当·斯密认为：经济参与者受利己心所驱动，而市场上这只看不见的手指引这种利己心去促进总体的经济福利。市场并不是万能的，它也有失效的时候，这时候需要政府进行干预。而政府在经济生活中扮演了一个重要的角色，它对经济生活有着巨大的影响力。它可以促进经济福利增长，也会减少总体经济福利。</p><a id="more"></a><h1 id="政府与社会稳定"><a href="#政府与社会稳定" class="headerlink" title="政府与社会稳定"></a>政府与社会稳定</h1><p>动乱的时候，战火蔓延到的地方大都无法安稳的生产，贸易也会因为战火中断。另外如果普通家庭没有任何保障，那么生产服务也会停止。比如你生产的谷物可能会被全部征收，那么你可能就会放弃种庄稼。以上的问题除了要保证没有战乱外，还需要有强有力的政府维持社会治安，实施产权的制度，保障每个人控制稀缺资源的权利。只有政府实施规则并维持对市场经济至关重要的制度时，看不见的手才能展现其魔力。</p><h1 id="政府干预市场资源配置"><a href="#政府干预市场资源配置" class="headerlink" title="政府干预市场资源配置"></a>政府干预市场资源配置</h1><p>看不见的手再对稀缺资源分配时，未必完全符合政府预期，那么政府便会对市场进行干预。政府干预经济并改变资源配资的原因主要时两点：促进效率或促进平等。</p><h2 id="效率平等目标"><a href="#效率平等目标" class="headerlink" title="效率平等目标"></a>效率平等目标</h2><p>看不见的手仅仅带来了效率上的产出，但是它并不负责消除经济福利分配的不平等。比如演员的工资高于实业者，这时由市场选择的结果。对于经济福利分配上的不平等，政府主要把行动放在公共政策上，比如征收所得税、社会福利保障，保障普通人享有基本的福利。</p><h2 id="市场失灵的两种情况"><a href="#市场失灵的两种情况" class="headerlink" title="市场失灵的两种情况"></a>市场失灵的两种情况</h2><p>经济学家用市场失灵这个术语来指市场本身不能有效配置资源的情况。市场失灵主要有两个方面：外部性、市场势力。</p><h3 id="外部性"><a href="#外部性" class="headerlink" title="外部性"></a>外部性</h3><p>市场外部性是指一个人的行为对旁观者福利的影响。比较常见的是企业为了发展排放了污染，从而引起了周围居民的健康问题。出现这种问题的主要原因是企业利益和周围居民健康没有直接关系，那么企业在决策时，不会将排污带来的外部性考虑在内。对于外部性，政府可以通过政策将外部性转换成内部性，从而消除这些问题。比如可以通过收污染税，或者对环保措施进行补贴，这些政策将会使企业决策者在排放污染时权衡利益，从而减少污染排放或者升级技术减少排污。</p><h3 id="市场势力"><a href="#市场势力" class="headerlink" title="市场势力"></a>市场势力</h3><p>市场势力是指单个人或企业（团体）不适当的影响市场价格的能力。通常情况下，市场通过竞争来约束个人或企业的利己行为，而市场势力正是因为这部分人逃脱了竞争的约束。比如某个人拥有了某种稀缺资源的完全控制权，而市场上没有任何可以替代的资源，那么这个人则不会受到残酷竞争的约束，且可以利用这来达到利己的目的。同样的，政府也是使用政策来解决这个问题。另外也从一个方面说明了重要资源应当由政府负责管理。</p><p>对于市场失灵的问题，其实个人也是能够解决的。科斯定理里说：私人经济主体可以解决他们之间的外部性问题，无论最初的权利如何分配，有关各方面总可以达成一种协议，在这种协议种，每个人的状况都可以变得更好，而且结果是有效率的。但是实际操作种会受到交易成本的约束，比如个人于企业较量中，个人属于弱势一方，如果不能承受高额交易成本，那么他可能选择默默承受污染带来的健康问题。所以一个好的政府，应当合理设计公共政策，最大程度的保障每个人的基本利益。这正是因为权利分配决定了经济福利的分配。</p><h1 id="公共物品和公共资源"><a href="#公共物品和公共资源" class="headerlink" title="公共物品和公共资源"></a>公共物品和公共资源</h1><p>这里需要先引入两个概念，排他性和竞争性。排他性指可以阻止人们使用这些物品。竞争性是指一个人使用某些物品会减少其他人对该物品的使用。通过这两个概念，可以将物品分为四类：私人物品、公共物品、公共资源、俱乐部物品。</p><h2 id="公共物品"><a href="#公共物品" class="headerlink" title="公共物品"></a>公共物品</h2><p>既无排他性，也无竞争性的物品称为公共物品。这时一个非常好理解的概念，比如空气就属于公共物品，每个人都可以呼吸空气，没有人可以限制其他人呼吸的权利。按照市场原则，没有人可以从公共物品中获取利益（这里指的是除了使用物品需要支付的利益），所以没有人会主动提供公共物品。比如某地有危险，但是发现者没有任何利益驱动他去警告他人。而政府可以潜在的解决这个问题。如果政府确信一种公共物品的总利益大于成本，它就可以提供该公共物品，并用税收收入对其进行支付，从而可以使每个人的状况变好。如国防、基础研究就属于重要的抽象的公共物品。</p><h2 id="公共资源"><a href="#公共资源" class="headerlink" title="公共资源"></a>公共资源</h2><p>公共物品是指具有竞争性但是没有排他性的物品。因为一个人使用公共资源就会减少其他人对它的享用，所以市场会驱使人们过度的消耗公共资源。此时政府就需要通过管制或者税收来减少公共资源的消耗问题。比如高速路有收费站进行收费，否则高速路会变得非常拥堵。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>上面分为多个部分内容，但是它们都有一个共同的主题，即市场没有有效的配置资源。总之，市场并不是万能的，市场的最终目标是实现效率的最大化。我们所生活的世界是人组成的社会，除了效率的追求外，还有更多的于人相关的追求。这要求政府通过政策来约束市场，使之按照我们预期，向对人利益最大化的地方发展。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;绪论&quot;&gt;&lt;a href=&quot;#绪论&quot; class=&quot;headerlink&quot; title=&quot;绪论&quot;&gt;&lt;/a&gt;绪论&lt;/h1&gt;&lt;p&gt;亚当·斯密认为：经济参与者受利己心所驱动，而市场上这只看不见的手指引这种利己心去促进总体的经济福利。市场并不是万能的，它也有失效的时候，这时候需要政府进行干预。而政府在经济生活中扮演了一个重要的角色，它对经济生活有着巨大的影响力。它可以促进经济福利增长，也会减少总体经济福利。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Economic" scheme="http://www.hashcoding.net/tags/Economic/"/>
    
  </entry>
  
  <entry>
    <title>直方图均衡化</title>
    <link href="http://www.hashcoding.net/2016/11/09/%E7%9B%B4%E6%96%B9%E5%9B%BE%E5%9D%87%E8%A1%A1%E5%8C%96/"/>
    <id>http://www.hashcoding.net/2016/11/09/直方图均衡化/</id>
    <published>2016-11-09T02:40:21.000Z</published>
    <updated>2017-05-07T05:14:25.306Z</updated>
    
    <content type="html"><![CDATA[<h2 id="直方图均衡化"><a href="#直方图均衡化" class="headerlink" title="直方图均衡化"></a>直方图均衡化</h2><p><strong>直方图均衡化</strong>是图像处理领域中利用图像直方图进行对比度调整的方法。通过这种方法亮度可以更好的在直方图上分布。</p><a id="more"></a><p><strong>灰度直方图</strong>是灰度级的函数，表示图像中具有某种灰度级的像素的个数，反映了图像中某种灰度出现的频率。</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>假设原始图像灰度级范围为[0,L-1],$r_k$为第k级灰度，图像中该像素出现的个数为$n_k$。则图像概率密度为：</p><p>\begin{equation}P_{origin}(r_k)=\frac{n_k}{n},k \in \left[0,1,\ldots,L-1 \right]\end{equation}</p><p>其中n表示图像像素个数。</p><p>现在用t表示变换后的图像灰度，那么就是要求出函数$t=T(r)$使得$P_{target}(s_k)=c$，其中c为常数。首先变换函数T必须要满足下面条件：</p><ol><li>在$ 0 \leq r \leq 1 $范围内为单调递增函数，保证图像的灰度级从黑到白的次序不变；</li><li>在$ 0 \leq r \leq 1 $内，有$ 0 \leq T(r) \leq 1 $，保证变换后的像素灰度在允许范围内；</li><li>T的反函数$ T^-1 $同样应该满足上面两个条件；</li></ol><p>通过概率统计的知识，我们容易得到关于$ P_{origin} $和$ P_{target} $之间的关系：</p><p>\begin{equation} P_{target}(s) = P_{origin}(r) \left| \frac{dr}{ds} \right| \end{equation}</p><p>这里给出一个变换函数形式如下：</p><p>\begin{equation} s=T(r)=(L-1) \int_{0}^{r}P_{origin}(\chi)d\chi \end{equation}</p><p>因为概率密度函数始终为正，且积分单调递增。当$r=L-1$的时候，$s=L-1$保证了灰度范围。满足上面的条件。下面把上诉函数代入密度函数关系式：</p><p>\begin{equation}\frac{ds}{dr}=\frac{dT(r)}{dr}=(L-1) \left| \int_{0}^{r}P_{origin}(\chi)d\chi \right| = (L-1)P_{origin}(r)\end{equation}</p><p>\begin{equation} P_{target}(s) = P_{origin}(r) \left| \frac{1}{(L-1)P_{origin}(r)} \right| = \frac{1}{L-1} \end{equation}</p><p>所以，函数T是我们预期的函数值，通过这个函数就可以对直方图进行均衡化。因为图像灰度为离散值，在实际处理前需要将将函数中积分形式等价替换为求和形式。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;直方图均衡化&quot;&gt;&lt;a href=&quot;#直方图均衡化&quot; class=&quot;headerlink&quot; title=&quot;直方图均衡化&quot;&gt;&lt;/a&gt;直方图均衡化&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;直方图均衡化&lt;/strong&gt;是图像处理领域中利用图像直方图进行对比度调整的方法。通过这种方法亮度可以更好的在直方图上分布。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Digital Image Processing" scheme="http://www.hashcoding.net/tags/Digital-Image-Processing/"/>
    
  </entry>
  
  <entry>
    <title>对比度线性展宽和动态范围调整</title>
    <link href="http://www.hashcoding.net/2016/11/08/%E5%AF%B9%E6%AF%94%E5%BA%A6%E7%BA%BF%E6%80%A7%E5%B1%95%E5%AE%BD%E5%92%8C%E5%8A%A8%E6%80%81%E8%8C%83%E5%9B%B4%E8%B0%83%E6%95%B4/"/>
    <id>http://www.hashcoding.net/2016/11/08/对比度线性展宽和动态范围调整/</id>
    <published>2016-11-08T02:40:21.000Z</published>
    <updated>2017-05-07T05:31:36.645Z</updated>
    
    <content type="html"><![CDATA[<h2 id="图像增强"><a href="#图像增强" class="headerlink" title="图像增强"></a>图像增强</h2><p><strong>图像增强</strong>是指对图像的某些特征进行强调或尖锐化，以便于显示、观察或进一步分析与处理。</p><a id="more"></a><h2 id="对比度"><a href="#对比度" class="headerlink" title="对比度"></a>对比度</h2><p><strong>对比度</strong>是指一幅图像中明暗区域最亮的白和最暗的黑之间不同亮度层级的测量，即一幅图像中灰度反差的大小。<strong>对比度</strong>越大，渐变层级就越多，灰度表现力就越丰富，图像越醒目；否则，图像清晰度越低，层次感就差。</p><p><strong>对比度调整</strong>通过调整图像对比度，达到改善图像质量的目的。<strong>对比度调整</strong>也属于<strong>图像增强</strong>的一种。</p><h3 id="对比度线性展宽"><a href="#对比度线性展宽" class="headerlink" title="对比度线性展宽"></a>对比度线性展宽</h3><p><strong>对比度展宽</strong>实质上就是降低图像中不重要的信息的对比度，从而留出多余的空间，对重要的信息进行展宽。<strong>对比度线性展宽</strong>则是对<strong>对比度</strong>进行线性操作。</p><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><p>假设处理前后的图像都是 8 位图，即灰度范围的 [0, 255]。现在我们希望对图像中灰度级位 [a, b] 的范围进行展宽，使其变成 [a’, b’] {a’ &lt; a &amp;&amp; b’ &gt; b}。现在我们希望对图像中灰度级位进行展宽。</p><p>这里定义图片灰度函数：</p><p>\begin{equation}gray=f\left(x, y\right)\end{equation}</p><p>其中 x, y 为像素位置，下面给出像素映射斜率：</p><p>\begin{equation}K_1=\frac{a’}{a}\end{equation}</p><p>及</p><p>\begin{equation}K_2=\frac{b’-a’}{b-a}\end{equation}</p><p>及</p><p>\begin{equation}K_3=\frac{255-b’}{255-b}\end{equation}</p><p>通过上述公式来计算目标灰度函数 <code>f&#39;</code> :</p><p>\begin{equation}f’ (x, y)=<br>\begin{cases}<br>    &amp; K_1 \times  f(x,y), \text{ if } 0 \leq f(x,y) &lt; a \\<br>    &amp; K_2 \times  (f(x,y)-a) + a’, \text{ if } a \leq f(x,y) &lt; b \\<br>    &amp; K_3 \times  (f(x,y)-b) + b’, \text{ if } b \leq f(x,y) &lt; 255<br>\end{cases}\end{equation}</p><p>上面就是目标灰度函数，通过这个可以求出目标图像。</p><h3 id="动态范围调整"><a href="#动态范围调整" class="headerlink" title="动态范围调整"></a>动态范围调整</h3><p><strong>动态范围调整</strong>就是利用人眼的视觉特性，将动态范围进行压缩，将感兴趣的区域变化范围变大，从而达到改善图像质量的目的。因此，经过处理后的图形灰度分布与人眼视觉特性相匹配，能够获得较好的视觉质量。</p><h4 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h4><p><strong>动态范围调整</strong> 可以直接给出公式：</p><p>\begin{equation}f’(x,y)=c \times \lg (1 + f(x,y))\end{equation}</p><p>其中 <code>c</code> 为增益系数。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;图像增强&quot;&gt;&lt;a href=&quot;#图像增强&quot; class=&quot;headerlink&quot; title=&quot;图像增强&quot;&gt;&lt;/a&gt;图像增强&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;图像增强&lt;/strong&gt;是指对图像的某些特征进行强调或尖锐化，以便于显示、观察或进一步分析与处理。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Digital Image Processing" scheme="http://www.hashcoding.net/tags/Digital-Image-Processing/"/>
    
  </entry>
  
  <entry>
    <title>Android asynchronized programming summary</title>
    <link href="http://www.hashcoding.net/2016/10/16/Android-asynchronized-programming-summary/"/>
    <id>http://www.hashcoding.net/2016/10/16/Android-asynchronized-programming-summary/</id>
    <published>2016-10-16T13:47:48.000Z</published>
    <updated>2017-06-12T11:58:17.273Z</updated>
    
    <content type="html"><![CDATA[<p>开发过程中涉及到异步操作非常多，更确切的说不涉及的非常少。这里说一说我遇到的一些问题。</p><a id="more"></a><h1 id="MessageQueue、Looper、Handler-与-Thread"><a href="#MessageQueue、Looper、Handler-与-Thread" class="headerlink" title="MessageQueue、Looper、Handler 与 Thread"></a>MessageQueue、Looper、Handler 与 Thread</h1><p>Thread 是最基本的调度单位，也是异步操作的基础。Thread 内有一个 MessageQueue，用与处理外部发送的 Message。Looper 则被 Thread 用于处理 MessageQueue, 并把 Message 发送给对应的 Handler。Handler 正是用来处理各种 Message，同时也是 Message 的发送者。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 简单结构描述代码</span><br><span class="line">class thread &#123;</span><br><span class="line">    void run &#123;</span><br><span class="line">        mLooper.loop(mQueue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 Thread 内部，由 Looper 处理消息队列，而 Looper 中不断取出消息并发送。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">class Looper &#123;</span><br><span class="line">    void loop(MessageQueue queue) &#123;</span><br><span class="line">        while (true) &#123;</span><br><span class="line">            Message message = queue.pop();</span><br><span class="line">            if (message == null)</span><br><span class="line">                return;</span><br><span class="line">            message.handler.detachMessage();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Handler 同时是消息真正处理者，也是消息发送者。除了给当前 Thread 发送消息外，也能给其他 Thread 发送，这就奠定了多线程协作的基础。比如， Android 为我们提供了几种在 UI 线程中运行 Runable 对象的方法：</p><ol><li>Activity.runOnUiThread(Runnable)</li><li>View.post(Runnable)</li><li>View.postDelayed(Runnable, long)</li><li>Handler</li></ol><h1 id="Blocking-Request-amp-AsyncTask"><a href="#Blocking-Request-amp-AsyncTask" class="headerlink" title="Blocking Request &amp; AsyncTask"></a>Blocking Request &amp; AsyncTask</h1><p>Android 无时无刻不进行了大量异步操作，当我们打开一个 App 时，后台正在请求网络数据，数据库操作和图片处理等。如果这些费时的工作全部像工厂里流水线一样执行，那么阻塞在某一个异步操作上都会导致其余部分无法进展任何工作即用户眼中的程序无响应。且等到上一个步骤完成后才能进行下一步操作，这一定不是一个好的用户体验。</p><p>现在假设某个 App 需要请求网络图片资源，那么应该这么写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">new Thread(new Runable() &#123;</span><br><span class="line">    final Bitmap bitmap = getBitmapFromNet(url);</span><br><span class="line">    runOnUiThread(new Runable() &#123;</span><br><span class="line">        renderImageView(bitmap);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;).run();</span><br></pre></td></tr></table></figure><p>这样写能够正确的工作，在下载期间，用户还可以与程序进行沟通。</p><p>不过，这一定不是最佳实践，实际生产环境中建议不要这么写（应该使用我们后面将会介绍的 AsyncTask 替代），下面会详细说明为什么。首先，Thread 的准备工作其实是非常耗时的。这里只展示了加载一涨图片，而实际应用中，可能由几十甚至上百张图片同时加载，而频繁的 new Thread 不仅会耗尽系统内存和计算资源，而且会增加上下文切换时间占用比。更好的方法是使用线程池。其次，异步嵌套逻辑不宜过长，更好的实践是将它封装起来。简单的例子就是”Callback Hell”。</p><p>因为上面的问题，Android 为我们提供了 AsyncTask 专门处理这种逻辑。所以在实际 Android 开发中，上面的代码应该写成下面的形式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">new AsyncTask() &#123;</span><br><span class="line">    protected Bitmap doInBackground(String... urls) &#123;</span><br><span class="line">        return getBitmapFromNet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected void onPostExecute(Bitmap bitmap) &#123;</span><br><span class="line">        renderImageView(bitmap);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然，这里的代码只是演示作用，关于 AsyncTask 详细使用说明请看 SDK。</p><h1 id="RxJava-和-异步流水线操作"><a href="#RxJava-和-异步流水线操作" class="headerlink" title="RxJava 和 异步流水线操作"></a>RxJava 和 异步流水线操作</h1><blockquote><p>RxJava 在 GitHub 主页上的自我介绍是 “a library for composing asynchronous and event-based programs using observable sequences for the Java VM”（一个在 Java VM 上使用可观测的序列来组成异步的、基于事件的程序的库）。RxJava 的本质可以压缩为异步这一个词。说到根上，它就是一个实现异步操作的库，而别的定语都是基于这之上的。</p></blockquote><p>RxJava 的魅力在于能够在完成复杂的逻辑工作，并极大地保持代码整洁度。关于 RxJava 的学习请看<a href="https://github.com/lzyzsd/Awesome-RxJava" target="_blank" rel="noopener">这里</a>。</p><p>异步流水线操作 - 其实我也不知道该怎么说明这种情况，所以就给它取了这么个名字。这个名词主要用来描述一些逻辑上是流水线执行，但是实现上涉及到异步操作比如文件操作、数据库操作还有就是网络请求。</p><p>假设你 Boss 让你每天登录网页写当天总结，几天后你再也无法忍受每天干些重复性的工作，所以你想写个程序来帮你做：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 你希望敲下面几个键就能完成工作</span><br><span class="line">fuck_work summary.txt</span><br></pre></td></tr></table></figure><p>现在你要来实现这个程序。假设写总结的流程如下：登录 -&gt; 编辑 -&gt; 保存<br>所以你写成了下面的代码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">new AsyncTask() &#123;</span><br><span class="line">    Object doInBackground() &#123;</span><br><span class="line">        // Login</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void onPostExecute() &#123;</span><br><span class="line">        new AsyncTask() &#123;</span><br><span class="line">            Object doInBackground() &#123;</span><br><span class="line">                // edit</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            void onPostExecute() &#123;</span><br><span class="line">                new AsyncTask() &#123;</span><br><span class="line">                    Object doInBackground() &#123;</span><br><span class="line">                        // save</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;.run();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;.run();</span><br></pre></td></tr></table></figure><p>上面的代码惨不忍睹，为了实现这种流水线操作你不得不忍受这种 “Callback Hell”。这里 RxJava 就可以大展身手了，你可以把代码写成下面的样子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Observable.create()</span><br><span class="line">    .flatMap(Task::login)</span><br><span class="line">    .flatMap(Task::edit)</span><br><span class="line">    .flatMap(Task::save)</span><br><span class="line">    .subscribe();</span><br></pre></td></tr></table></figure><p>上述代码只是简单演示，不完整。可以看到 RxJava 可以非常简单明了的表达这种逻辑，这也是我非常喜欢它的原因。</p><h1 id="Be-cautious"><a href="#Be-cautious" class="headerlink" title="Be cautious"></a>Be cautious</h1><p>异步操作不像同步操作，它并不按照人逻辑思维来进行，所以在使用的时候应该多注意避免任何可能出现的逻辑顺序假设。</p><p>比如你正在写一个网络图片浏览页面，你准备使用 ListView 来做，所以你把代码写成了下面的样子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">View getView(int pos, View c, ViewGroup parent) &#123;</span><br><span class="line">    // ...</span><br><span class="line">    imageView = ...</span><br><span class="line">    new AsyncTask() &#123;</span><br><span class="line">        Bitmap doInBackground() &#123;</span><br><span class="line">            return getBitmapFromNet()</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        onPostExecute(bitmap Bitmap) &#123;</span><br><span class="line">            imageView.setBitmap(bitmap);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;.run();</span><br><span class="line">    // ...</span><br><span class="line">    return c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际上上面包含了一种假想的逻辑顺序，即当图片加载完成时，ImageView 没有被挪作他用。然而用户在实际使用中，可能出现任何未知行为，其中某些行为比如稍稍滑动了一下界面，就可能导致图片显示到错误的位置上。</p><p>Last but not least, 实际生产中，如果有可用的三方库，还是不要自己造轮子吧。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;开发过程中涉及到异步操作非常多，更确切的说不涉及的非常少。这里说一说我遇到的一些问题。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://www.hashcoding.net/categories/Android/"/>
    
    
      <category term="Android" scheme="http://www.hashcoding.net/tags/Android/"/>
    
      <category term="Java" scheme="http://www.hashcoding.net/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Linear Scan Register Allocation</title>
    <link href="http://www.hashcoding.net/2016/09/06/Linear-Scan-Register-Allocation/"/>
    <id>http://www.hashcoding.net/2016/09/06/Linear-Scan-Register-Allocation/</id>
    <published>2016-09-06T15:32:12.000Z</published>
    <updated>2016-10-05T02:13:03.303Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>图着色和线性扫描算法是常见的寄存器分配算法。其中图着色分配效果最好，但是分配效率不高，而线性扫描算法虽然非最优解，但生成结果并不比图着色差多少，且效率远远高于图着色寄存器分配方法。</p><a id="more"></a><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>线性扫描寄存器分配方法是对变量(VR)的活跃期间(Live Interval)为单位分配的。</p><h1 id="原始分配方法"><a href="#原始分配方法" class="headerlink" title="原始分配方法"></a>原始分配方法</h1><p>原始的Poletto等人的论文中给出了线性扫描寄存器分配方法的最基本方式：</p><p>1、使用数据流分析方法计算出每个变量(VR)的活跃期间[start, end]</p><p>2、遍历整个区间序列进行寄存器分配，这里需要引入两个辅助集合，<strong>Active</strong> 和 <strong>Unhandled List</strong>，<strong>Unhandled List</strong> 表示还未进行分配的区间，以 start 递增的顺序组成链式序列。<strong>**Active</strong> 表示包含当前点且已经分配了寄存器的区间，其中的区间都按照 end 递增的方式排序。</p><p>3、当每次扫描到一个区间的时候，首先将 <strong>Active</strong> 集合中不再包含当前点的区间移除，并把其占用寄存器设置为未使用；判断还有没有空闲寄存器，如果有，则分配一个寄存器，并将该区间移入 <strong>Active</strong> 集合，否则将区间溢出(Spill)到栈上。溢出是指从 <strong>active</strong> 列表的最后一个区间和当前区间中选择一个，将其溢出到栈槽(stack slot)中，选择的方法就是看谁的结束位置更迟，该场景下也就是谁的结束位置更大。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">LinearScanRegisterAllocation </span><br><span class="line">active ←&#123;&#125; </span><br><span class="line">foreach live interval i, in order of increasing start point </span><br><span class="line">    ExpireOldIntervals(i) </span><br><span class="line">    if length(active)=R then </span><br><span class="line">        SpillAtInterval(i) </span><br><span class="line">    else </span><br><span class="line">        register[i] ←a register </span><br><span class="line">        removed from pool of free registers </span><br><span class="line">        add i to active, sorted by increasing end point</span><br><span class="line"></span><br><span class="line">ExpireOldIntervals(i) </span><br><span class="line">foreach interval j in active, in order of increasing end point </span><br><span class="line">    if endpoint[j] ≥ startpoint[i] then </span><br><span class="line">        return </span><br><span class="line">    remove j from active </span><br><span class="line">    add register[j] to pool of free registers</span><br><span class="line"></span><br><span class="line">SpillAtInterval(i) </span><br><span class="line">spill ← last interval in active </span><br><span class="line">if endpoint[spill] &gt; endpoint[i] then </span><br><span class="line">    register[i] ← register[spill] </span><br><span class="line">    location[spill] ← new stack location </span><br><span class="line">    remove spill from active </span><br><span class="line">    add i to active, sorted by increasing end point </span><br><span class="line">else </span><br><span class="line">    location[i] ← new stack location</span><br></pre></td></tr></table></figure><p>其中需要注意的是 Spill 操作，其本质表示直接把该 VR 映射到 Stack Slot 中，并不为其分配寄存器，需要使用的时候才加载到寄存器。这中间可能有许多迷惑性的细节，具体可以参考<a href="http://stackoverflow.com/questions/1960888/register-allocation-and-spilling-the-easy-way" target="_blank" rel="noopener">Register allocation and spilling, the easy way?</a>和<a href="http://stackoverflow.com/questions/30512879/register-allocation-in-compilers" target="_blank" rel="noopener">Register Allocation in Compilers</a></p><p>这里以一个例子来讲解线性扫描方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = 1           live &#123;a&#125;</span><br><span class="line">b = 1           live &#123;a b&#125;</span><br><span class="line">c = a + b       live &#123;a b c&#125;</span><br><span class="line">d = 1           live &#123;b d a&#125;</span><br><span class="line">c = b + d + a   live &#123;c&#125;</span><br></pre></td></tr></table></figure><p>根据上面代码可以得到区间如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a[1, 4], b[2, 3], c[3, 5], d[4, 4]</span><br></pre></td></tr></table></figure><p>排序后得到序列 <code>a b c d</code> 以此分配寄存器，这里假设只有三个可用寄存器，a b c 各自占用一个寄存器，当开始分配 d 的时候，需要在 a 和 d 中选择一个溢出，此时溢出 d。</p><h1 id="利用活跃区间间隙改进"><a href="#利用活跃区间间隙改进" class="headerlink" title="利用活跃区间间隙改进"></a>利用活跃区间间隙改进</h1><p>上面我们发现其实 c 的区间可以分为 [3, 3] 和 [5, 5] 两个小区间，如果可以利用这中间的空隙 (lifetime hole)，那么可以减少栈溢出次数。</p><p>下面就以论文2中使用的改进方法来理解，这种方法是在 CFG 形式下做的寄存器分配，所以会和上面的有点差别。</p><p>该方法同样需要计算活性区间，计算方法如下：</p><ol><li>首先将 CFG 线性化，这里就涉及到为基本块(Basic Block)排序操作</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">COMPUTE_BLOCK_ORDER  </span><br><span class="line">append first block of method to work_list  </span><br><span class="line">while work_list is not empty do   </span><br><span class="line">    BlockBegin b = pick and remove first block from work_list   </span><br><span class="line">    append b to blocks   </span><br><span class="line">    for each successor sux of b do    </span><br><span class="line">        decrement sux.incoming_forward_branches    </span><br><span class="line">        if sux.incoming_forward_branches = 0 then     </span><br><span class="line">            sort sux into work_list    </span><br><span class="line">        end if  </span><br><span class="line">    end for  </span><br><span class="line">end while</span><br></pre></td></tr></table></figure><ol><li>为排好序的基本块中代码设置好操作数编号，这里每个操作数都加上了2，方便以后在两个操作数之间插入其他操着数</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">NUMBER_OPERATIONS  </span><br><span class="line">int next_id = 0  </span><br><span class="line">for each block b in blocks do   </span><br><span class="line">    for each operation op in b.operations do    </span><br><span class="line">        op.id = next_id    </span><br><span class="line">        next_id = next_id + 2   </span><br><span class="line">    end for  </span><br><span class="line">end for</span><br></pre></td></tr></table></figure><ol><li>计算 Local live set</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">COMPUTE_LOCAL_LIVE_SETS  </span><br><span class="line">LIR_OpVisitState visitor // used for collecting all operands of an operation  </span><br><span class="line">for each block b in blocks do   </span><br><span class="line">    b.live_gen = &#123; &#125;   </span><br><span class="line">    b.live_kill = &#123; &#125;   </span><br><span class="line">    for each operation op in b.operations do    </span><br><span class="line">        visitor.visit(op)    </span><br><span class="line">        for each virtual register opr in visitor.input_oprs do     </span><br><span class="line">            if opr ∉ block.live_kill then </span><br><span class="line">                b.live_gen = b.live_gen ∪ &#123; opr &#125;    </span><br><span class="line">        end for    </span><br><span class="line">        for each virtual register opr in visitor.temp_oprs do     </span><br><span class="line">            b.live_kill = b.live_kill ∪ &#123; opr &#125;    </span><br><span class="line">        end for    </span><br><span class="line">        for each virtual register opr in visitor.output_oprs do     </span><br><span class="line">            b.live_kill = b.live_kill ∪ &#123; opr &#125;    </span><br><span class="line">        end for   </span><br><span class="line">    end for  </span><br><span class="line">end for</span><br></pre></td></tr></table></figure><ol><li>计算 Global live set</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">COMPUTE_GLOBAL_LIVE_SETS  </span><br><span class="line">do   </span><br><span class="line">    for each block b in blocks in reverse order do    </span><br><span class="line">        b.live_out = &#123; &#125;</span><br><span class="line">        for each successor sux of b do</span><br><span class="line">            b.live_out = b.live_out ∪ sux.live_in    </span><br><span class="line">        end for    </span><br><span class="line">        b.live_in = (b.live_out – b.live_kill) ∪ b.live_gen   </span><br><span class="line">    end for  </span><br><span class="line">while change occurred in any live set</span><br></pre></td></tr></table></figure><ol><li>根据上面计算的集合建立活性区间</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">BUILD_INTERVALS  </span><br><span class="line">LIR_OpVisitState visitor; // visitor used for collecting all operands of an operation  </span><br><span class="line">for each block b in blocks in reverse order do   </span><br><span class="line">    int block_from = b.first_op.id   </span><br><span class="line">    int block_to = b.last_op.id + 2   </span><br><span class="line">    for each operand opr in b.live_out do     </span><br><span class="line">        intervals[opr].add_range(block_from, block_to)   </span><br><span class="line">    end for   </span><br><span class="line">    for each operation op in b.operations in reverse order do    </span><br><span class="line">        visitor.visit(op)    </span><br><span class="line">        if visitor.has_call then     </span><br><span class="line">            for each physical register reg do      </span><br><span class="line">                intervals[reg].add_range(op.id, op.id + 1)     </span><br><span class="line">            end for    </span><br><span class="line">        end if    </span><br><span class="line">        for each virtual or physical register opr in visitor.output_oprs do     </span><br><span class="line">            intervals[opr].first_range.from = op.id     </span><br><span class="line">            intervals[opr].add_use_pos(op.id, use_kind_for(op, opr))    </span><br><span class="line">        end for    </span><br><span class="line">        for each virtual or physical register opr in visitor.temp_oprs do     </span><br><span class="line">            intervals[opr].add_range(op.id, op.id + 1)     </span><br><span class="line">            intervals[opr].add_use_pos(op.id, use_kind_for(op, opr))    </span><br><span class="line">        end for    </span><br><span class="line">        for each virtual or physical register opr in visitor.input_oprs do     </span><br><span class="line">            intervals[opr].add_range(block_from, op.id)     </span><br><span class="line">            intervals[opr].add_use_pos(op.id, use_kind_for(op, opr))    </span><br><span class="line">        end for   </span><br><span class="line">    end for  </span><br><span class="line">end for</span><br></pre></td></tr></table></figure><p>这样，建立的区间就包含 lifetime hole 信息，然后可以开始寄存器分配了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">WALK_INTERVALS  </span><br><span class="line">unhandled = list of intervals sorted by increasing start point  </span><br><span class="line">active = &#123; &#125;  </span><br><span class="line">inactive = &#123; &#125;  // note: new intervals may be sorted into the unhandled list during </span><br><span class="line"></span><br><span class="line">// allocation when intervals are split  </span><br><span class="line">while unhandled ≠ &#123; &#125; do   </span><br><span class="line">    current = pick and remove first interval from unhandled   </span><br><span class="line">    position = current.first_range.from </span><br><span class="line"></span><br><span class="line">    // check for intervals in active that are expired or inactive   </span><br><span class="line">    for each interval it in active do    </span><br><span class="line">        if it.last_range.to &lt; position then     </span><br><span class="line">            move it from active to handled    </span><br><span class="line">        else if not it.covers(position) then     </span><br><span class="line">            move it from active to inactive    </span><br><span class="line">        end if   </span><br><span class="line">    end for   </span><br><span class="line"></span><br><span class="line">    // check for intervals in inactive that are expired or active   </span><br><span class="line">    for each interval it in inactive do    </span><br><span class="line">        if it.last_range.to &lt; position then     </span><br><span class="line">            move it from inactive to handled    </span><br><span class="line">        else if it.covers(position) then     </span><br><span class="line">            move it from inactive to active    </span><br><span class="line">        end if   </span><br><span class="line">    end for   </span><br><span class="line">    </span><br><span class="line">    // find a register for current   </span><br><span class="line">    TRY_ALLOCATE_FREE_REG   </span><br><span class="line">    if allocation failed then    </span><br><span class="line">        ALLOCATE_BLOCKED_REG   </span><br><span class="line">    end if   </span><br><span class="line">    </span><br><span class="line">    if current has a register assigned then    </span><br><span class="line">        add current to active   </span><br><span class="line">    end if  </span><br><span class="line">end while</span><br></pre></td></tr></table></figure><p>这里引入了一个新的集合 <strong>inactive</strong> 用来表示当前点落入了该 interval 的 lifetime hole 中。另外在算法中增加了 <strong>active</strong> 与 <strong>inactive</strong> 相互移动及移除部分代码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">TRY_ALLOCATE_FREE_REG  </span><br><span class="line">set free_pos of all physical registers to max_int  </span><br><span class="line">for each interval it in active do    </span><br><span class="line">    set_free_pos(it, 0)  </span><br><span class="line">end for  </span><br><span class="line">for each interval it in inactive intersecting with current do   </span><br><span class="line">    set_free_pos(it, next intersection of it with current)  </span><br><span class="line">end for  </span><br><span class="line">reg = register with highest free_pos  </span><br><span class="line">if free_pos[reg] = 0 then   </span><br><span class="line">    // allocation failed, no register available without spilling   </span><br><span class="line">    return false   </span><br><span class="line">else if free_pos[reg] &gt; current.last_range.to then   </span><br><span class="line">    // register available for whole current   </span><br><span class="line">    assign register reg to interval current  </span><br><span class="line">else   </span><br><span class="line">    // register available for first part of current   </span><br><span class="line">    assign register reg to interval current   </span><br><span class="line">    split current at optimal position before free_pos[reg]  </span><br><span class="line">end if</span><br></pre></td></tr></table></figure><p>在检查有没有空闲寄存器的时候也不能简单的判断，需要按照上面的条件，找出最合适的寄存器，如果没有找到，则要选择一个区间 Spill。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">ALLOCATE_BLOCKED_REG  </span><br><span class="line">set use_pos and block_pos of all physical </span><br><span class="line">registers to max_int  </span><br><span class="line">for each non-fixed interval it in active do   </span><br><span class="line">    set_use_pos(it, next usage of it after current.first_range.from)  </span><br><span class="line">end for  </span><br><span class="line">for each non-fixed interval it in inactive intersecting with current do   </span><br><span class="line">    set_use_pos(it, next usage of it after current.first_range.from)  </span><br><span class="line">end for  </span><br><span class="line">for each fixed interval it in active do   </span><br><span class="line">    set_block_pos(it, 0)  </span><br><span class="line">end for  </span><br><span class="line">for each fixed interval it in inactive intersecting with current do   </span><br><span class="line">    set_block_pos(it, next intersection of it with current)  </span><br><span class="line">end for  </span><br><span class="line">reg = register with highest use_pos  </span><br><span class="line">if use_pos[reg] &lt; first usage of current then   </span><br><span class="line">    // all active and inactive intervals are used before current, so it is best to spill current itself   </span><br><span class="line">    assign spill slot to current   </span><br><span class="line">    split current at optimal position before first use position that requires a register  </span><br><span class="line">else if block_pos[reg] &gt; current.last_range.to then   </span><br><span class="line">    // spilling made a register free for whole current   </span><br><span class="line">    assign register reg to interval current   </span><br><span class="line">    split and spill intersecting active and inactive intervals for reg  </span><br><span class="line">else   </span><br><span class="line">    // spilling made a register free for first part of current   </span><br><span class="line">    assign register reg to interval current   </span><br><span class="line">    split current at optimal position before block_pos[reg]   </span><br><span class="line">    split and spill intersecting active and inactive intervals for reg  </span><br><span class="line">end if</span><br></pre></td></tr></table></figure><p>按照上面的方法选择一个寄存器并溢出，至此，基本方法都差不多了。这里还需要补充一下，当我们将 CFG 线性化的时候，有一些细节仍然需要处理：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">B1:</span><br><span class="line">a = ...;</span><br><span class="line">if (...) </span><br><span class="line">    THEN:</span><br><span class="line">    a = ...;</span><br><span class="line">else </span><br><span class="line">    ELSE:</span><br><span class="line">    a = ...;</span><br><span class="line">ENDIF:</span><br><span class="line">use a</span><br></pre></td></tr></table></figure><p>这里以一个简单例子说明为什么需要一步特殊的操作，假设 b1 中为 a 分配了一个寄存器，在 else 中，a 被 spill 到 stack slot 上，而 then 中仍然处于寄存器中，那么在 endif 中就出现了矛盾，a 在寄存器上还是在栈上？下面的算法用来解决这个问题。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">RESOLVE_DATA_FLOW  </span><br><span class="line">MoveResolver resolver // used for ordering and inserting moves into the LIR  </span><br><span class="line">for each block from in blocks do   </span><br><span class="line">    for each successor to of from do    </span><br><span class="line">        // collect all resolving moves necessary between the blocks from and to    </span><br><span class="line">        for each operand opr in to.live_in do     </span><br><span class="line">            Interval parent_interval = intervals[opr]     </span><br><span class="line">            Interval from_interval = parent_interval.child_at(from.last_op.id)     </span><br><span class="line">            Interval to_interval = parent_interval.child_at(to.first_op.id)     </span><br><span class="line">            if from_interval ≠ to_interval then      </span><br><span class="line">                // interval was split at the edge between the blocks from and to      </span><br><span class="line">                resolver.add_mapping(from_interval, to_interval)    </span><br><span class="line">            end if    </span><br><span class="line">        end for    </span><br><span class="line">        // the moves are inserted either at the end of block from or at the beginning of block to,    </span><br><span class="line">        // depending on the control flow    </span><br><span class="line">        resolver.find_insert_position(from, to)    </span><br><span class="line">        // insert all moves in correct order (without overwriting registers that are used later)    </span><br><span class="line">        resolver.resolve_mappings()   </span><br><span class="line">    end for  </span><br><span class="line">end for</span><br></pre></td></tr></table></figure><h1 id="SSA-form-线性扫描寄存器分配"><a href="#SSA-form-线性扫描寄存器分配" class="headerlink" title="SSA form 线性扫描寄存器分配"></a>SSA form 线性扫描寄存器分配</h1><p>SSA 形式的线性扫描的主体与上述类似， SSA 带来的优点就是能有效的降低单个 interval 的长度，这在 CISC 指令集计算机中会非常有效。同时，充分利用 SSA 形式的 IR 的稀疏特性，避免迭代式的 liveness analysis，有效的降低时间复杂度。</p><p>下面介绍基于上面算法改进的 SSA form 的寄存器分配算法：</p><ol><li>该方法使用 SSA 上活性区间分析方法建立活性区间</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">BUILDINTERVALS </span><br><span class="line">for each block b in reverse order do </span><br><span class="line">    live = union of successor.liveIn for each successor of b</span><br><span class="line">for each phi function phi of successors of b do </span><br><span class="line">    live.add(phi.inputOf(b))</span><br><span class="line">for each opd in live do </span><br><span class="line">    intervals[opd].addRange(b.from, b.to)</span><br><span class="line">for each operation op of b in reverse order do </span><br><span class="line">    for each output operand opd of op do </span><br><span class="line">        intervals[opd].setFrom(op.id) </span><br><span class="line">        live.remove(opd) </span><br><span class="line">    for each input operand opd of op do </span><br><span class="line">        intervals[opd].addRange(b.from, op.id) </span><br><span class="line">        live.add(opd)</span><br><span class="line">for each phi function phi of b do </span><br><span class="line">    live.remove(phi.output)</span><br><span class="line">if b is loop header then </span><br><span class="line">    loopEnd = last block of the loop starting at b </span><br><span class="line">    for each opd in live do </span><br><span class="line">        intervals[opd].addRange(b.from, loopEnd.to)</span><br><span class="line">b.liveIn = live</span><br></pre></td></tr></table></figure><ol><li><p>按照第二种分配方法分配寄存器</p></li><li><p>改进 Resolve</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">RESOLVE </span><br><span class="line">for each control flow edge from predecessor to successor do </span><br><span class="line">    for each interval it live at begin of successor do </span><br><span class="line">        if it starts at begin of successor then </span><br><span class="line">            phi = phi function defining it </span><br><span class="line">            opd = phi.inputOf(predecessor) </span><br><span class="line">            if opd is a constant then </span><br><span class="line">                moveFrom = opd </span><br><span class="line">            else </span><br><span class="line">                moveFrom = location of intervals[opd] at end of predecessor </span><br><span class="line">        else </span><br><span class="line">            moveFrom = location of it at end of predecessor </span><br><span class="line">        moveTo = location of it at begin of successor </span><br><span class="line">        if moveFrom ≠ moveTo then </span><br><span class="line">            mapping.add(moveFrom, moveTo)</span><br><span class="line">    mapping.orderAndInsertMoves()</span><br></pre></td></tr></table></figure><p>本质思想一样，不过针对了 SSA form 做了特有优化。</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul><li>Linear Scan Register Allocation - MASSIMILIANO POLETTO Laboratory for Computer Science, MIT and VIVEK SARKAR IBM Thomas J. Watson Research Center</li><li>Linear Scan Register Allocation for the Java HotSpot™ Client Compiler - Christian Wimmer</li><li>Linear Scan Register Allocation on SSA Form - Christian Wimmer Michael Franz</li><li><a href="https://www.zhihu.com/question/29355187" target="_blank" rel="noopener">寄存器分配问题？- 知乎</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;图着色和线性扫描算法是常见的寄存器分配算法。其中图着色分配效果最好，但是分配效率不高，而线性扫描算法虽然非最优解，但生成结果并不比图着色差多少，且效率远远高于图着色寄存器分配方法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Compile" scheme="http://www.hashcoding.net/tags/Compile/"/>
    
  </entry>
  
  <entry>
    <title>Simple and Direction SSA Constriruction Algorithm</title>
    <link href="http://www.hashcoding.net/2016/08/18/Simple-and-Direction-SSA-Constriruction-Algorithm/"/>
    <id>http://www.hashcoding.net/2016/08/18/Simple-and-Direction-SSA-Constriruction-Algorithm/</id>
    <published>2016-08-18T00:04:58.000Z</published>
    <updated>2017-06-12T12:01:08.416Z</updated>
    
    <content type="html"><![CDATA[<p>前面讲到了传统的 SSA 构造方式，直接从线性 IR 构造 SSA。而本文将介绍另外的方法允许从 AST、Bytecode 甚至源代码直接构造 SSA 形式。</p><a id="more"></a><h2 id="LLVM-中的方法"><a href="#LLVM-中的方法" class="headerlink" title="LLVM 中的方法"></a>LLVM 中的方法</h2><p>LLVM ir 为 SSA 形式，如果用户手工翻译 AST，那么只有在翻译的时候直接生成 SSA 形式中间代码。不过 LLVM 给用户留下了一个后门，可以将变量全部表达成为 Memory 形式，通过指针操作。然后通过 Mem2Reg pass 转换成 SSA 形式。</p><p>这里不介绍翻译时候的方式，仅仅介绍一下 Mem2Reg pass。下面的代码抄自 LLVM 中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">// 遍历指令序列找到 alloca</span><br><span class="line">for (Instruction instr : instructions)</span><br><span class="line">&#123;</span><br><span class="line">    if (isa&lt;Alloca&gt;(instr))</span><br><span class="line">        allocas.push_back(instr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 一个一个的提升 alloca 指令</span><br><span class="line">for (Alloca alloca : allocas)</span><br><span class="line">&#123;</span><br><span class="line">    // 判断是否可以提升</span><br><span class="line">    if (!alloca.isAllocaPromoteable())</span><br><span class="line">        continue;</span><br><span class="line">    </span><br><span class="line">    // 跳过无使用者的alloca指令</span><br><span class="line">    if (alloca.user_begin() == alloca.user_end())</span><br><span class="line">        continue;</span><br><span class="line">        </span><br><span class="line">    // 收集alloca指令的使用，定义信息</span><br><span class="line">    info.analyzeAlloca(alloca);</span><br><span class="line">         </span><br><span class="line">    // 下面的函数，对只有一次定义（即只有一条 store 指令）的 alloca 进行优化</span><br><span class="line">    // 把所有的 load 指令全部用定义时保存的 value 替换</span><br><span class="line">    if (info.definingBlocks.size() == 1)</span><br><span class="line">        rewriteSingleStoreAlloca(alloca, info);</span><br><span class="line">    </span><br><span class="line">    // 下面的代码仅仅对只在一个基本块中使用和定义的alloca指令进行优化</span><br><span class="line">    if (info.onlyUsedOneBlock)</span><br><span class="line">        promoteSingleBlockAlloca(alloca, info);</span><br><span class="line"></span><br><span class="line">    // 插入无参数的Phi函数，使用标准的基于支配边界的算法，其中使用DJ图的方式进行了优化</span><br><span class="line">    determineInsertionPoint(alloca, allocaNum, info);</span><br><span class="line"></span><br><span class="line">    // 使用 IDF 和标准 ssa 构造算法提升 alloca ，决定那些需要插入 Phi 函数</span><br><span class="line">    DefBlocks.insert(Info.DefiningBlocks.begin(), Info.DefiningBlocks.end());</span><br><span class="line">    ComputeLiveInBlocks(AI, Info, DefBlocks, LiveInBlocks);</span><br><span class="line">    IDF.setLiveInBlocks(LiveInBlocks);</span><br><span class="line">    IDF.setDefiningBlocks(DefBlocks);</span><br><span class="line">    IDF.calculate(PHIBlocks);</span><br><span class="line"></span><br><span class="line">    // 执行 SSA 重命名算法，并插入 Phi 节点</span><br><span class="line">    RenamePassWorkList.emplace_back(&amp;F.front(), nullptr, std::move(Values));</span><br><span class="line">    do &#123;</span><br><span class="line">        // RenamePass may add new worklist entries.</span><br><span class="line">        RenamePass(RPD.BB, RPD.Pred, RPD.Values, RenamePassWorkList);</span><br><span class="line">    &#125; while (!RenamePassWorkList.empty());</span><br><span class="line"></span><br><span class="line">    // 移除 allocas</span><br><span class="line">    for (unsigned i = 0, e = Allocas.size(); i != e; ++i) </span><br><span class="line">    &#123;</span><br><span class="line">        Instruction *A = Allocas[i];</span><br><span class="line">        A-&gt;replaceAllUsesWith(UndefValue::get(A-&gt;getType()));</span><br><span class="line">        A-&gt;eraseFromParent();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  // 最后执行一趟消除平凡Phi函数的操作，</span><br><span class="line">    while (eliminatedAPHI)</span><br><span class="line">    &#123;</span><br><span class="line">        // if the phi merges one value and/or undefs, get the value</span><br><span class="line">        if ((V = simplifyInstruction(phi, DT)) != null)</span><br><span class="line">        &#123;</span><br><span class="line">            phi.replaceAllUsesWith(V);</span><br><span class="line">            phi.eraseFromBasicBlock();</span><br><span class="line">            newPhiNodes.remove(entity);</span><br><span class="line">            eliminatedAPHI = true;</span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="直接构造"><a href="#直接构造" class="headerlink" title="直接构造"></a>直接构造</h2><p>这种方法来源于论文：</p><blockquote><p>Simple and Eﬃcient Construction of Static Single Assignment Form<br>Matthias Braun1, Sebastian Buchwald1, Sebastian Hack2, Roland Leißa2, Christoph Mallon2, and Andreas Zwinkau1</p></blockquote><p>下面介绍该构造方法。</p><h3 id="Local-Value-Numbering"><a href="#Local-Value-Numbering" class="headerlink" title="Local Value Numbering"></a>Local Value Numbering</h3><p>这部分操作以基本块为单位，所以生成的 IR 必须为 CFG 形式。CFG 形式能够非常容易的从源代码构造，这里略过。</p><p>该方法按照程序执行的顺序处理所有的表达式，并且在变量和其定义表达式之间建立映射。也就是说当遇到对变量赋值时，把赋值符号右边的表达式最为当前变量的定义。当一个变量被访问的时候，我们就查找其定义。上述的过程就叫做 <strong>local value numbering</strong>。</p><p>如果一个基本块中完成了 <strong>local value numbering</strong>，这个基本块就被称为 <strong>filled</strong>。 只有一个基本块完成了 <strong>local value numbering</strong> 后，才能够添加后继基本块。这个属性会在处理 <strong>incomplete CFGs</strong> 的时候使用。</p><p>Algorithm 1: Implementation of local value numbering</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">writeVariable(variable, block, value): </span><br><span class="line">    currentDef[variable][block] ← value </span><br><span class="line">    </span><br><span class="line">readVariable(variable, block): </span><br><span class="line">    if currentDef[variable] contains block: </span><br><span class="line">        # local value numbering</span><br><span class="line">        return currentDef[variable][block] </span><br><span class="line">    # global value numbering </span><br><span class="line">    return readVariableRecursive(variable, block)</span><br></pre></td></tr></table></figure><h3 id="Global-Value-Numbering"><a href="#Global-Value-Numbering" class="headerlink" title="Global Value Numbering"></a>Global Value Numbering</h3><p>正如上面算法展示，当读取变量定义的时候，如果当前基本块没有变量的定义，那么只能递归地查找其前驱基本块。递归地查找算法如下：</p><p>如果基本块只有一个前驱，仅仅在其前驱中查找定义，否则，构造一个 φ 函数，将其所有前驱中定义加入该 φ 函数，并将该 φ 函数作为该基本块的定义。</p><p>需要注意的是该查找方式可能导致循环查找，比如在循环体中查找定义。为了避免程序死循环，在查找前先为该基本块建立一个没有任何操作数的 φ 函数作为其定义。</p><p>Algorithm 2: Implementation of global value numbering</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">readVariableRecursive(variable, block): </span><br><span class="line">    if block not in sealedBlocks: </span><br><span class="line">        # Incomplete CFG </span><br><span class="line">        val ← new Phi(block) </span><br><span class="line">        incompletePhis[block][variable] ← val</span><br><span class="line">    else if |block.preds| = 1:</span><br><span class="line">        # Optimize the common case of one predecessor: No phi needed </span><br><span class="line">        val ← readVariable(variable, block.preds[0])</span><br><span class="line">    else : </span><br><span class="line">        # Break potential cycles with operandless phi </span><br><span class="line">        val ← new Phi(block) </span><br><span class="line">        writeVariable(variable, block, val) </span><br><span class="line">        val ← addPhiOperands(variable, val) </span><br><span class="line">    writeVariable(variable, block, val) </span><br><span class="line">    return val</span><br><span class="line"></span><br><span class="line">addPhiOperands(variable, phi): </span><br><span class="line">    # Determine operands from predecessors </span><br><span class="line">    for pred in phi.block.preds: </span><br><span class="line">        phi.appendOperand(readVariable(variable, pred)) </span><br><span class="line">    return tryRemoveTrivialPhi(phi)</span><br></pre></td></tr></table></figure><p>这种查找方式可能导致多余的 φ 函数，称为 <strong>trivial</strong> 。如果一个 φ 函数引用了自身和另一个定义，那么就叫做 <strong>trivial</strong> φ 函数。比如有 <code>a.1 = φ&lt;a.1, a.0&gt;</code>。这个 φ 函数完全可以被另一个定义给替换。还有一种特殊的情况，φ 函数仅仅引用了自身，这种情况仅仅发生在不可达或者开始基本块，这时用一个 <code>Undef</code> 值代替。</p><p>需要注意的是如果我们替换了 <code>trivial</code> φ 函数，可能导致引用该 φ 函数的值也变成 <code>trivial</code> φ 函数，所以还需要递归地进行替换操作。</p><p>Algorithm 3: Detect and recursively remove a trivial φ function </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">tryRemoveTrivialPhi(phi): </span><br><span class="line">    same ← None for op in phi.operands: </span><br><span class="line">        if op = same || op = phi: </span><br><span class="line">            # Unique value or self−reference</span><br><span class="line">            continue </span><br><span class="line">        if same = None: </span><br><span class="line">            # The phi merges at least two values: not trivial </span><br><span class="line">            return phi </span><br><span class="line">        same ← op</span><br><span class="line">        if same = None: </span><br><span class="line">            # The phi is unreachable or in the start block</span><br><span class="line">            same ← new Undef() </span><br><span class="line"></span><br><span class="line">        # Remember all users except the phi itself</span><br><span class="line">        users ← phi.users.remove(phi) </span><br><span class="line">        # Reroute all uses of phi to same and remove phi</span><br><span class="line">        phi .replaceBy(same)</span><br><span class="line"></span><br><span class="line">        # Try to recursively remove all phi users, </span><br><span class="line">        # which might have become trivial </span><br><span class="line">        for use in users: </span><br><span class="line">            if use is a Phi: </span><br><span class="line">                tryRemoveTrivialPhi(use) </span><br><span class="line">        return same</span><br></pre></td></tr></table></figure><p>上述操作目前还无法处理未完成的循环，比方说如果循环体未处理完，那么循环头部分仍然有可能加入新的前驱，这就是前面引用到的 <code>Incomplete CFGs</code>。</p><h3 id="Handling-Incomplete-CFGs"><a href="#Handling-Incomplete-CFGs" class="headerlink" title="Handling Incomplete CFGs"></a>Handling Incomplete CFGs</h3><p>如果一个基本块不会再加入任何前驱结点，那么就可以称为 <code>sealed</code> 基本块。因为只有 <code>filled</code> 基本块拥有后继，所以前驱基本块必须是 <code>filled</code>。</p><p><code>filled</code> 基本块可以为其后继提供变量定义，而 <code>sealed</code> 基本块可能会从其前驱中查找变量定义。</p><p>Algorithm 4: Handling incomplete CFGs</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sealBlock(block): </span><br><span class="line">    for variable in incompletePhis[block]: </span><br><span class="line">        addPhiOperands(variable, incompletePhis[block][variable]) </span><br><span class="line">        sealedBlocks.add(block)</span><br></pre></td></tr></table></figure><p>如果在一个属于 <code>filled</code> 且非 <code>sealed</code> 基本块中查找变量定义呢？如前面算法2提到的，对于非 <code>sealed</code> 基本块，建立一个 函数并保存在 <code>incompletePhis</code> 中为其后继提供定义。当该非 <code>sealed</code> 基本块不会有新的前驱加入时，对其进行 <code>seal</code> 操作。</p><p><code>seal</code> 操作会对该基本块的所有 <code>incompletePhis</code> 进行处理，完成处理后将该基本块加入 <code>sealed</code> 集合。</p><h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3><p>通过上述四个算法，能够完成 SSA 形式构造，当然，还有进一步的优化这里就不讲了，有兴趣可以直接看论文。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前面讲到了传统的 SSA 构造方式，直接从线性 IR 构造 SSA。而本文将介绍另外的方法允许从 AST、Bytecode 甚至源代码直接构造 SSA 形式。&lt;/p&gt;
    
    </summary>
    
      <category term="编译器实现" scheme="http://www.hashcoding.net/categories/%E7%BC%96%E8%AF%91%E5%99%A8%E5%AE%9E%E7%8E%B0/"/>
    
    
      <category term="Compile" scheme="http://www.hashcoding.net/tags/Compile/"/>
    
  </entry>
  
  <entry>
    <title>Traditional SSA Construction Algorithm</title>
    <link href="http://www.hashcoding.net/2016/08/17/Traditional-SSA-Construction-Algorithm/"/>
    <id>http://www.hashcoding.net/2016/08/17/Traditional-SSA-Construction-Algorithm/</id>
    <published>2016-08-17T00:21:38.000Z</published>
    <updated>2017-06-12T12:01:12.530Z</updated>
    
    <content type="html"><![CDATA[<p>由于 SSA (static single assignment form) 能够使得程序分析变得更方便快捷，已经被许多编译器用于 IR (intermediate representations)。</p><a id="more"></a><h2 id="SSA是什么？"><a href="#SSA是什么？" class="headerlink" title="SSA是什么？"></a>SSA是什么？</h2><p>SSA 即静态单赋值，之所以称之为单赋值，是因为每个名字在SSA中仅被赋值一次。</p><h2 id="传统编译器流程"><a href="#传统编译器流程" class="headerlink" title="传统编译器流程"></a>传统编译器流程</h2><p>在传统的编译器中，parse 过后通常生成 AST，并将 AST 转换为线性 IR, 并在这个基础上构造 SSA，然后进行寄存器分配生成目标代码等。</p><h2 id="线性-IR-到-SSA-构造具体步骤"><a href="#线性-IR-到-SSA-构造具体步骤" class="headerlink" title="线性 IR 到 SSA 构造具体步骤"></a>线性 IR 到 SSA 构造具体步骤</h2><p>这里介绍本文剩下部分的内容–构造 SSA from。</p><ol><li>遍历 IR 构造 CFG</li><li>计算支配边界</li><li>确定 Phi 函数位置</li><li>变量重命名</li></ol><h2 id="遍历-IR-构造-CFG"><a href="#遍历-IR-构造-CFG" class="headerlink" title="遍历 IR 构造 CFG"></a>遍历 IR 构造 CFG</h2><p>CFG 由基本块组成，所以首先确定基本块：</p><blockquote><p>基本块算法：<br>a) 找基本块入口源代码的首行或者转移代码（有条件和无条件）或者转移代码的下一行<br>b) 基本块构造：通过入口点开始，将其组成各自的基本块。基本块语句序列的特征：从不包含它本身的进入点到其他进入点或者到某条转移语句或者到某条停止语句<br>c) 如果有语句不在任一基本块中，那么它为 ”死代码“，删除</p></blockquote><p>当确定基本块后，紧接着构造 CFG:</p><blockquote><p>控制流图构造如果在一个有序代码中，基本块 B2 跟在 B1 后，那么产生一个由 B1 到 B2 的有向边。<br>a) 有跳转点。这个点从 B1 的结束点跳到 B2 的开始点<br>b) 无跳转点（有序代码中），B2 跟在 B1 后，且 B1 的结束点不是无条件跳转语句 </p></blockquote><h2 id="计算支配边界"><a href="#计算支配边界" class="headerlink" title="计算支配边界"></a>计算支配边界</h2><p>放置 Phi 函数的关键在于了解在每个汇合点处究竟哪个变量需要 Phi 函数。在进一步讲解之前，需要引入支配的概念。</p><h3 id="支配集合"><a href="#支配集合" class="headerlink" title="支配集合"></a>支配集合</h3><p>假设对于任意 CFG 图，Bi 表示第 i 个基本块，那么对于任意的 Dom(Bi) 表示从 CFG 入口开始遍历，到达 Bi 基本块中每条路径都包含的公共基本块。计算算法如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Dom(0) = &#123; 0 &#125;</span><br><span class="line">for i in range(1, n):</span><br><span class="line">    Dom(i) = N</span><br><span class="line"></span><br><span class="line">changed = true</span><br><span class="line">while changed:</span><br><span class="line">    changed = false</span><br><span class="line">    for i in range(1, n):</span><br><span class="line">        for preds j in i:</span><br><span class="line">            temp = temp ∩ Dom(j)</span><br><span class="line">        temp = &#123; i &#125; ∪ temp</span><br><span class="line"></span><br><span class="line">        if temp != Dom(i):</span><br><span class="line">            Dom(i) = temp</span><br><span class="line">            changed = true</span><br></pre></td></tr></table></figure><h3 id="支配者树"><a href="#支配者树" class="headerlink" title="支配者树"></a>支配者树</h3><p>而对于基本块 Bi 中的定义，当值到达某个节点 m 时，仅在满足下述两个条件的汇合点才需要插入对应的 Phi 函数：</p><ol><li>Bi 支配 Bm 的一个前驱</li><li>Bi 并不严格支配 Bm </li></ol><p>这里把相对于 Bi 具有这种性质的结点 Bm 的集合称为 Bi 的支配边界，记作 DF(n)。</p><p>而 Bi 严格支配的结点 Dom(Bi)-Bi , 则该集合中与 Bi 最接近的结点称为 Bi 的直接支配结点，记作 IDom(Bi)。</p><h3 id="支配边界"><a href="#支配边界" class="headerlink" title="支配边界"></a>支配边界</h3><p>下面的算法用于计算流图支配边界：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">for block in CFG:</span><br><span class="line">    DF(n) = &#123;&#125;</span><br><span class="line">for block in CFG:</span><br><span class="line">    if block.predecessors.size() &gt; 1:</span><br><span class="line">        for p in block.predecessors:</span><br><span class="line">            runner = p</span><br><span class="line">            while runner != IDom(block):</span><br><span class="line">                DF(runner) = DF(runner) ∪ &#123; n &#125;</span><br><span class="line">                runner = IDom(runner)</span><br></pre></td></tr></table></figure><h2 id="确定-Phi-函数位置"><a href="#确定-Phi-函数位置" class="headerlink" title="确定 Phi 函数位置"></a>确定 Phi 函数位置</h2><p>有了支配边界之后，编译器就可以更精确地判断何处可能需要 Phi 函数。其基本思想很简单，在基本块 Bi 中对 x 定义，则要求在 DF(b) 集合包含的每个结点起始处都放置一个对应的 Phi 函数。只在单个基本块中活动的变量，绝对不会出现与之相应的活动 Phi 函数。所以可以计算跨多个程序块的活动变量名的集合，该集合被称为全局名字结合。它可以对该集合中的名字插入 Phi 函数，而忽略不在该集合中的名字。下面的算法用于计算全局名字集合：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Globals = &#123;&#125;</span><br><span class="line">Initialize all the blocks sets to &#123;&#125;</span><br><span class="line"></span><br><span class="line">for each block b in CFG:</span><br><span class="line">    VarKill = &#123;&#125;</span><br><span class="line">    for each operation i in b in order</span><br><span class="line">        assume that opi is &quot;x = y op z&quot;</span><br><span class="line">        if y not belong VarKill:</span><br><span class="line">            Globals = Globals ∪ &#123; y &#125;</span><br><span class="line">        if z not belong VarKill:</span><br><span class="line">            Globals = Globals ∪ &#123; z &#125;</span><br><span class="line">        VarKill = VarKill ∪ &#123; x &#125;</span><br><span class="line">        blocks(x) = blocks(x) ∪ &#123; b &#125;</span><br></pre></td></tr></table></figure><p>下面的算法用于重写代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">for each name x in Globals:</span><br><span class="line">    WorkList = blocks(x)</span><br><span class="line">    for each block b in WorkList:</span><br><span class="line">        if d has no phi-function for x:</span><br><span class="line">            insert a phi-function for x in d </span><br><span class="line">            WorkList = WorkList ∪ &#123; d &#125;</span><br></pre></td></tr></table></figure><h2 id="变量重命名"><a href="#变量重命名" class="headerlink" title="变量重命名"></a>变量重命名</h2><p>在最终的静态单赋值形式中，每个全局名字都变为一个基本名，而对该基本名的各个定义则通过添加数字下标来区分，该算法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">for each global name i:</span><br><span class="line">    counter[i] = 0</span><br><span class="line">    stack[i] = 0</span><br><span class="line">Rename(block0)</span><br><span class="line"></span><br><span class="line">NewName(n):</span><br><span class="line">    i = counter[n]</span><br><span class="line">    counter[n] = counter[n] + 1</span><br><span class="line">    push i onto stack[n]</span><br><span class="line">    return &quot;ni&quot;</span><br><span class="line"></span><br><span class="line">Rename(b):</span><br><span class="line">    for each phi-function in b &quot;x = phi(...)&quot;:</span><br><span class="line">        rewrite x as NewName(x)</span><br><span class="line">    </span><br><span class="line">    for each operation &quot;x = y op z&quot; in b:</span><br><span class="line">        rewrite y with subscript top(stack[y])</span><br><span class="line">        rewrite z with subscript top(stack[z])</span><br><span class="line">        rewrite x as NewName(x)</span><br><span class="line">    </span><br><span class="line">    for each successor of b in the CFG:</span><br><span class="line">        fill in phi-function parameters</span><br><span class="line"></span><br><span class="line">    for each successor s of b in the dominator tree:</span><br><span class="line">        Rename(s)</span><br><span class="line"></span><br><span class="line">    for each operation &quot;x = y op z&quot; in b </span><br><span class="line">        and each phi-function &quot;x = phi(...)&quot;:</span><br><span class="line">        pop(stack[x])</span><br></pre></td></tr></table></figure><h2 id="Phi-function-Elimination"><a href="#Phi-function-Elimination" class="headerlink" title="Phi function Elimination"></a>Phi function Elimination</h2><p>消除 Phi 函数主要有两步操作。首先编译器可以保持 SSA 名字空间原样不动，将每个 Phi 函数替换为一组复制操作并放入前驱中。比如对于 x = phi(i, j), 编译器应该在传入 i 的基本块末尾加上 x = i, 在传入 j 的基本块末尾加上 x = j：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">B1:</span><br><span class="line">    x.1 = a</span><br><span class="line">    goto B3:</span><br><span class="line">B2:</span><br><span class="line">    x.2 = b</span><br><span class="line">    goto B3:</span><br><span class="line">B3:</span><br><span class="line">    x.3 = phi(x.1, x.2)</span><br><span class="line">    c = x.3</span><br><span class="line">转换后</span><br><span class="line"></span><br><span class="line">B1:</span><br><span class="line">    x.1 = a</span><br><span class="line">    x.3 = x.1</span><br><span class="line">    goto B3</span><br><span class="line">B2:</span><br><span class="line">    x.2 = b</span><br><span class="line">    x.3 = x.2</span><br><span class="line">B3:</span><br><span class="line">    c = x.3</span><br></pre></td></tr></table></figure><p>当当前基本块 B1 某一个前驱结点 B2 有多个后继结点时 (B2, B1)，无法应用上述方法，因为添加的复制操作不仅会流入当前基本块，也会流入其他后继结点。为了弥补这种问题，编译器可以拆分 (B2, B1) 在中间插入一个新的基本块，将所有复制操作放入新的基本块中。这里 (B2, B1) 这样的边称为关键边。</p><p>在转换过程中出现的大部分问题都可以通过这种变换解决，但还有两个更为微妙的问题：1、丢失复制，是因为激进的程序变换与不可拆分的关键边共同引起的；2、交换，是因为某些激进的程序变换与静态单赋值形式的详细定义之间的交互所致。这里不做介绍，有兴趣可以参考 reference。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] Efficiently Computing Static Single Assignment Form and the Control Dependence Graph RON CYTRON, JEANNE FERRANTE, BARRY K. ROSEN, and MARK N. WEGMAN IBM Research Division and F. KENNETH ZADECK Brown University</p><p>[2] Engineering a Compiler, Second</p><p>[3] <a href="https://www.zhihu.com/question/49642237#" target="_blank" rel="noopener">llvm的reg2mem pass做了哪些事情？</a></p><p>[4] <a href="https://www.zhihu.com/question/24992774" target="_blank" rel="noopener">Phi node 是如何实现它的功能的？</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于 SSA (static single assignment form) 能够使得程序分析变得更方便快捷，已经被许多编译器用于 IR (intermediate representations)。&lt;/p&gt;
    
    </summary>
    
      <category term="编译器实现" scheme="http://www.hashcoding.net/categories/%E7%BC%96%E8%AF%91%E5%99%A8%E5%AE%9E%E7%8E%B0/"/>
    
    
      <category term="Compile" scheme="http://www.hashcoding.net/tags/Compile/"/>
    
  </entry>
  
  <entry>
    <title>Clang Source Code Analysis (3)</title>
    <link href="http://www.hashcoding.net/2016/07/09/Clang-Source-Code-Analysis-3/"/>
    <id>http://www.hashcoding.net/2016/07/09/Clang-Source-Code-Analysis-3/</id>
    <published>2016-07-09T05:29:02.000Z</published>
    <updated>2017-06-12T12:00:05.460Z</updated>
    
    <content type="html"><![CDATA[<p>在 <code>ParseAST</code> 中，前面通过 <code>P.ParseTopLevelDecl(ADecl)</code> 对源代码进行了分析，紧接着就是调用 <code>HandleTopLevelDecl(ADecl.get())</code> 进行处理。</p><a id="more"></a><p>代码生成的部分由 <code>HandleTopLevelDecl</code> 负责，而 <code>ASTConsumer</code> 是一个虚基类，所以需要从其他地方入手。这里以 <code>ASTConsumer</code> 为切入点，找到创建位置。</p><p>假设我们使用的是 –emit-llvm 模式，而 <code>EmitLLVMAction</code> 继承自 <code>CodeGenAction</code>。在 <code>CodeGenAction</code> 中找到创建 <code>ASTConsumer</code> 的 <code>CreateASTConsumer</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">std::unique_ptr&lt;ASTConsumer&gt;</span><br><span class="line">CodeGenAction::CreateASTConsumer(CompilerInstance &amp;CI, StringRef InFile) &#123;</span><br><span class="line">  // ...</span><br><span class="line">  std::unique_ptr&lt;BackendConsumer&gt; Result(new BackendConsumer(</span><br><span class="line">      BA, CI.getDiagnostics(), CI.getHeaderSearchOpts(),</span><br><span class="line">      CI.getPreprocessorOpts(), CI.getCodeGenOpts(), CI.getTargetOpts(),</span><br><span class="line">      CI.getLangOpts(), CI.getFrontendOpts().ShowTimers, InFile, LinkModules,</span><br><span class="line">      OS, *VMContext, CoverageInfo));</span><br><span class="line">  BEConsumer = Result.get();</span><br><span class="line">  return std::move(Result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际上是一个 <code>BackendConsumer</code> 实例。另外观察 <code>CodeGenAction::ExecuteAction</code> :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">void CodeGenAction::ExecuteAction() &#123;</span><br><span class="line">  // If this is an IR file, we have to treat it specially.</span><br><span class="line">  if (getCurrentFileKind() == IK_LLVM_IR) &#123;</span><br><span class="line">    // ...</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // Otherwise follow the normal AST path.</span><br><span class="line">  this-&gt;ASTFrontendAction::ExecuteAction();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现其实际上是执行的 <code>ASTFrontendAction::ExecuteAction</code>，所以原来分析的部分仍然可以使用。现在，找到 <code>BackendConsumer::HandleTopLevelDecl</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bool HandleTopLevelDecl(DeclGroupRef D) override &#123;</span><br><span class="line">    Gen-&gt;HandleTopLevelDecl(D);</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里进一步调用 <code>CodeGenerator::HandleTopLevelDecl</code>，而 <code>Gen</code> 由 <code>CreateLLVMCodeGen</code> 得到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CodeGenerator *clang::CreateLLVMCodeGen(</span><br><span class="line">    DiagnosticsEngine &amp;Diags, const std::string &amp;ModuleName,</span><br><span class="line">    const HeaderSearchOptions &amp;HeaderSearchOpts,</span><br><span class="line">    const PreprocessorOptions &amp;PreprocessorOpts, const CodeGenOptions &amp;CGO,</span><br><span class="line">    llvm::LLVMContext &amp;C, CoverageSourceInfo *CoverageInfo) &#123;</span><br><span class="line">  return new CodeGeneratorImpl(Diags, ModuleName, HeaderSearchOpts,</span><br><span class="line">                               PreprocessorOpts, CGO, C, CoverageInfo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以，<code>Gen</code> 实际上是一个 <code>CodeGeneratorImpl</code> 实例。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">bool HandleTopLevelDecl(DeclGroupRef DG) override &#123;</span><br><span class="line">    if (Diags.hasErrorOccurred())</span><br><span class="line">    return true;</span><br><span class="line"></span><br><span class="line">    HandlingTopLevelDeclRAII HandlingDecl(*this);</span><br><span class="line"></span><br><span class="line">    // Make sure to emit all elements of a Decl.</span><br><span class="line">    for (DeclGroupRef::iterator I = DG.begin(), E = DG.end(); I != E; ++I)</span><br><span class="line">        Builder-&gt;EmitTopLevelDecl(*I);</span><br><span class="line"></span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面是 <code>CodeGeneratorImpl::HandleTopLevelDecl</code> 部分，这里对每个声明部分调用 <code>EmitTopLevelDecl</code> 处理。<code>Builder</code> 是 <code>CodeGenModule</code> 类对象。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">void CodeGenModule::EmitTopLevelDecl(Decl *D) &#123;</span><br><span class="line">  // Ignore dependent declarations.</span><br><span class="line">  if (D-&gt;getDeclContext() &amp;&amp; D-&gt;getDeclContext()-&gt;isDependentContext())</span><br><span class="line">    return;</span><br><span class="line"></span><br><span class="line">  switch (D-&gt;getKind()) &#123;</span><br><span class="line">  case Decl::CXXConversion:</span><br><span class="line">  case Decl::CXXMethod:</span><br><span class="line">  case Decl::Function:</span><br><span class="line">    // Skip function templates</span><br><span class="line">    if (cast&lt;FunctionDecl&gt;(D)-&gt;getDescribedFunctionTemplate() ||</span><br><span class="line">        cast&lt;FunctionDecl&gt;(D)-&gt;isLateTemplateParsed())</span><br><span class="line">      return;</span><br><span class="line"></span><br><span class="line">    EmitGlobal(cast&lt;FunctionDecl&gt;(D));</span><br><span class="line">    // Always provide some coverage mapping</span><br><span class="line">    // even for the functions that aren&apos;t emitted.</span><br><span class="line">    AddDeferredUnusedCoverageMapping(D);</span><br><span class="line">    break;</span><br><span class="line"></span><br><span class="line">  case Decl::Var:</span><br><span class="line">    // Skip variable templates</span><br><span class="line">    if (cast&lt;VarDecl&gt;(D)-&gt;getDescribedVarTemplate())</span><br><span class="line">      return;</span><br><span class="line">  case Decl::VarTemplateSpecialization:</span><br><span class="line">    EmitGlobal(cast&lt;VarDecl&gt;(D));</span><br><span class="line">    break;</span><br><span class="line"></span><br><span class="line">  // Indirect fields from global anonymous structs and unions can be</span><br><span class="line">  // ignored; only the actual variable requires IR gen support.</span><br><span class="line">  case Decl::IndirectField:</span><br><span class="line">    break;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>CodeGenModule::EmitTopLevelDecl</code> 中，可以发现对函数和变量等而言，调用的其实是 <code>EmitGlobal</code>。跟进 <code>EmitGlobal</code>，发现最终的调用实际上是 <code>EmitGlobalDefinition</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">void CodeGenModule::EmitGlobalDefinition(GlobalDecl GD, llvm::GlobalValue *GV) &#123;</span><br><span class="line">  const auto *D = cast&lt;ValueDecl&gt;(GD.getDecl());</span><br><span class="line"></span><br><span class="line">  if (isa&lt;FunctionDecl&gt;(D)) &#123;</span><br><span class="line">    return EmitGlobalFunctionDefinition(GD, GV);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  if (const auto *VD = dyn_cast&lt;VarDecl&gt;(D))</span><br><span class="line">    return EmitGlobalVarDefinition(VD, !VD-&gt;hasDefinition());</span><br><span class="line">  </span><br><span class="line">  llvm_unreachable(&quot;Invalid argument to EmitGlobalDefinition()&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以发现最终的调用分别为 <code>EmitGlobalFunctionDefinition</code> 和 <code>EmitGlobalVarDefinition</code>。这两个函数调用很明显，一个是函数定义，一个是变量定义。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">void CodeGenModule::EmitGlobalFunctionDefinition(GlobalDecl GD,</span><br><span class="line">                                                 llvm::GlobalValue *GV) &#123;</span><br><span class="line">  const auto *D = cast&lt;FunctionDecl&gt;(GD.getDecl());</span><br><span class="line"></span><br><span class="line">  // Compute the function info and LLVM type.</span><br><span class="line">  const CGFunctionInfo &amp;FI = getTypes().arrangeGlobalDeclaration(GD);</span><br><span class="line">  llvm::FunctionType *Ty = getTypes().GetFunctionType(FI);</span><br><span class="line"></span><br><span class="line">  // Get or create the prototype for the function.</span><br><span class="line">  if (!GV || (GV-&gt;getType()-&gt;getElementType() != Ty))</span><br><span class="line">    GV = cast&lt;llvm::GlobalValue&gt;(GetAddrOfFunction(GD, Ty, /*ForVTable=*/false,</span><br><span class="line">                                                   /*DontDefer=*/true,</span><br><span class="line">                                                   /*IsForDefinition=*/true));</span><br><span class="line"></span><br><span class="line">  // Already emitted.</span><br><span class="line">  if (!GV-&gt;isDeclaration())</span><br><span class="line">    return;</span><br><span class="line"></span><br><span class="line">  // We need to set linkage and visibility on the function before</span><br><span class="line">  // generating code for it because various parts of IR generation</span><br><span class="line">  // want to propagate this information down (e.g. to local static</span><br><span class="line">  // declarations).</span><br><span class="line">  auto *Fn = cast&lt;llvm::Function&gt;(GV);</span><br><span class="line">  setFunctionLinkage(GD, Fn);</span><br><span class="line">  setFunctionDLLStorageClass(GD, Fn);</span><br><span class="line"></span><br><span class="line">  // FIXME: this is redundant with part of setFunctionDefinitionAttributes</span><br><span class="line">  setGlobalVisibility(Fn, D);</span><br><span class="line">  // ...</span><br><span class="line">  CodeGenFunction(*this).GenerateCode(D, Fn, FI);</span><br><span class="line">  // ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里先产生函数签名，最后调用 <code>CodeGenFunction::GenerateCode</code> 生成代码。</p><p>具体的内容就不继续分析下去了，到这里为止，已经梳理了一边 Clang 执行流程，整理出一个具体框架。还有很多深入的等待继续挖掘。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 &lt;code&gt;ParseAST&lt;/code&gt; 中，前面通过 &lt;code&gt;P.ParseTopLevelDecl(ADecl)&lt;/code&gt; 对源代码进行了分析，紧接着就是调用 &lt;code&gt;HandleTopLevelDecl(ADecl.get())&lt;/code&gt; 进行处理。&lt;/p&gt;
    
    </summary>
    
      <category term="Clang 源码分析" scheme="http://www.hashcoding.net/categories/Clang-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    
      <category term="Compile" scheme="http://www.hashcoding.net/tags/Compile/"/>
    
  </entry>
  
  <entry>
    <title>Clang Source Code Analysis (2)</title>
    <link href="http://www.hashcoding.net/2016/07/01/Clang-Source-Code-Analysis-2/"/>
    <id>http://www.hashcoding.net/2016/07/01/Clang-Source-Code-Analysis-2/</id>
    <published>2016-07-01T07:05:21.000Z</published>
    <updated>2017-12-07T12:05:38.385Z</updated>
    
    <content type="html"><![CDATA[<p>前面部分分析了初始化流程，紧接着分析的是 Parse 部分。</p><p>所有 <code>Action</code> 的基类是 <code>FrontendAction</code>，在 <code>FrontendAction</code> 的 <code>Execute</code> 中发现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">bool FrontendAction::Execute() &#123;</span><br><span class="line">  CompilerInstance &amp;CI = getCompilerInstance();</span><br><span class="line"></span><br><span class="line">  if (CI.hasFrontendTimer()) &#123;</span><br><span class="line">    llvm::TimeRegion Timer(CI.getFrontendTimer());</span><br><span class="line">    ExecuteAction();</span><br><span class="line">  &#125;</span><br><span class="line">  else ExecuteAction();</span><br><span class="line"></span><br><span class="line">  // ....</span><br><span class="line"></span><br><span class="line">  return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>流程转入了 <code>ExecuteAction</code> 中，目前的 <code>Act</code> 是 <code>EmitLLVMAction</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">class EmitLLVMAction : public CodeGenAction &#123;</span><br><span class="line">  virtual void anchor();</span><br><span class="line">public:</span><br><span class="line">  EmitLLVMAction(llvm::LLVMContext *_VMContext = nullptr);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>实际上 <code>EmitLLVMAction</code> 只是 <code>CodeGenAction</code> 的一个子类。所以应该在 <code>CodeGenAction</code> 中找 <code>Execute</code> 的逻辑。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">void CodeGenAction::ExecuteAction() &#123;</span><br><span class="line">  // If this is an IR file, we have to treat it specially.</span><br><span class="line">  if (getCurrentFileKind() == IK_LLVM_IR) &#123;</span><br><span class="line">    // other codes.</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // Otherwise follow the normal AST path.</span><br><span class="line">  this-&gt;ASTFrontendAction::ExecuteAction();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以在 <code>CodeGenAction::ExecuteAction</code> 中，直接使用了 <code>ASTFrontendAction::ExecuteAction</code> 的实现。找到 <code>ASTFrontendAction</code> 对应的 <code>ExecuteAction</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">void ASTFrontendAction::ExecuteAction() &#123;</span><br><span class="line">  ParseAST(CI.getSema(), CI.getFrontendOpts().ShowStats,</span><br><span class="line">           CI.getFrontendOpts().SkipFunctionBodies);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里截取了重要的部分代码。跟踪 <code>ParseAST</code>，截取代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">void clang::ParseAST(Sema &amp;S, bool PrintStats, bool SkipFunctionBodies) &#123;</span><br><span class="line">  ASTConsumer *Consumer = &amp;S.getASTConsumer();</span><br><span class="line"></span><br><span class="line">  std::unique_ptr&lt;Parser&gt; ParseOP(</span><br><span class="line">      new Parser(S.getPreprocessor(), S, SkipFunctionBodies));</span><br><span class="line">  Parser &amp;P = *ParseOP.get();</span><br><span class="line"></span><br><span class="line">  S.getPreprocessor().EnterMainSourceFile();</span><br><span class="line">  P.Initialize();</span><br><span class="line"></span><br><span class="line">  if (P.ParseTopLevelDecl(ADecl)) &#123;</span><br><span class="line">    if (!External &amp;&amp; !S.getLangOpts().CPlusPlus)</span><br><span class="line">      P.Diag(diag::ext_empty_translation_unit);</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    do &#123;</span><br><span class="line">      // If we got a null return and something *was* parsed, ignore it.  This</span><br><span class="line">      // is due to a top-level semicolon, an action override, or a parse error</span><br><span class="line">      // skipping something.</span><br><span class="line">      if (ADecl &amp;&amp; !Consumer-&gt;HandleTopLevelDecl(ADecl.get()))</span><br><span class="line">        return;</span><br><span class="line">    &#125; while (!P.ParseTopLevelDecl(ADecl));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // Process any TopLevelDecls generated by #pragma weak.</span><br><span class="line">  for (Decl *D : S.WeakTopLevelDecls())</span><br><span class="line">    Consumer-&gt;HandleTopLevelDecl(DeclGroupRef(D));</span><br><span class="line">  </span><br><span class="line">  Consumer-&gt;HandleTranslationUnit(S.getASTContext());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Parse</code> 通过 <code>ParseTopLevelDecl</code> 得到 Decl ，然后通过 <code>ASTConsumer</code> 的 <code>HandleTopLevelDecl</code> 处理。忽略其他现在并不关心的部分，在 <code>ParseTopLevelDecl</code> 内部调用 <code>ParseExternalDeclaration</code> 开始。而 <code>ParseExternalDeclaration</code> 内部，我们只关心下面一行代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">return ParseDeclarationOrFunctionDefinition(attrs, DS);</span><br></pre></td></tr></table></figure><p>这里处理声明或者函数定义，内部有一个 Internal 包含。这其中分为两部分，一部分是 <code>ParseDeclarationSpecifiers</code>；另一部分是最后的 <code>ParseDeclGroup</code>。 第一部分用于获取类型说明符，第二部分则是具体声明部分，这里重点看第二部分：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">Parser::DeclGroupPtrTy Parser::ParseDeclGroup(ParsingDeclSpec &amp;DS,</span><br><span class="line">                                              unsigned Context,</span><br><span class="line">                                              SourceLocation *DeclEnd,</span><br><span class="line">                                              ForRangeInit *FRI) &#123;</span><br><span class="line">  // Parse the first declarator.</span><br><span class="line">  ParsingDeclarator D(*this, DS, static_cast&lt;Declarator::TheContext&gt;(Context));</span><br><span class="line">  ParseDeclarator(D);</span><br><span class="line"></span><br><span class="line">  // Check to see if we have a function *definition* which must have a body.</span><br><span class="line">  if (D.isFunctionDeclarator() &amp;&amp; !isDeclarationAfterDeclarator()) &#123;</span><br><span class="line">      Decl *TheDecl =</span><br><span class="line">          ParseFunctionDefinition(D, ParsedTemplateInfo(), &amp;LateParsedAttrs);</span><br><span class="line">        return Actions.ConvertDeclToDeclGroup(TheDecl);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  SmallVector&lt;Decl *, 8&gt; DeclsInGroup;</span><br><span class="line">  Decl *FirstDecl = ParseDeclarationAfterDeclaratorAndAttributes(</span><br><span class="line">      D, ParsedTemplateInfo(), FRI);</span><br><span class="line"></span><br><span class="line">  // If we don&apos;t have a comma, it is either the end of the list (a &apos;;&apos;) or an</span><br><span class="line">  // error, bail out.</span><br><span class="line">  SourceLocation CommaLoc;</span><br><span class="line">  while (TryConsumeToken(tok::comma, CommaLoc)) &#123;</span><br><span class="line">    ParseDeclarator(D);</span><br><span class="line">    if (!D.isInvalidType()) &#123;</span><br><span class="line">      Decl *ThisDecl = ParseDeclarationAfterDeclarator(D);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>ParseDeclGroup</code> 的结构大致如上，首先使用 <code>ParseDeclarator</code> 获取一个声明，比如 <code>int i;</code> 这里得到的就是 <code>i</code>，然后判断是否紧接 <code>()</code>，如果是，则调用 <code>ParseFunctionDefinition</code> 分析函数定义，否则循环调用 <code>ParseDeclarator</code> 获取所有声明的变量。</p><p>对于声明而言，需要调用 <code>ParseDeclarationAfterDeclarator</code> 将类型与 <code>declarator</code> 结合，形成一个完整的声明。<code>ParseDeclarationAfterDeclarator</code> 中调用了 <code>ParseDeclarationAfterDeclaratorAndAttributes</code>, 而 <code>ParseDeclarationAfterDeclaratorAndAttributes</code> 中实际调用了 <code>Actions.ActOnDeclarator</code>，<code>ActOnDeclarator</code> 实际调用了 <code>HandleDeclarator</code>。</p><p>在 <code>HandleDeclarator</code> 中，实际的工作有三个，首先调用 <code>GetTypeForDeclarator</code>; 得到类型信息，因为各个类型实际上只有一个实例，所以这里需要映射过程。其次调用以下几个中的某一个:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ActOnTypedefDeclarator</span><br><span class="line">ActOnFunctionDeclarator</span><br><span class="line">ActOnVariableDeclarator</span><br></pre></td></tr></table></figure><p>最后，调用 <code>PushOnScopeChains</code> 将声明存起来。保存起来的 <code>declarator</code> 的信息可以用于处理下一次遇到 <code>declarator</code> 判断是否符合语法。</p><p>现在回头看 <code>ParseFunctionDefinition</code> 部分。节选代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Decl *Parser::ParseFunctionDefinition(ParsingDeclarator &amp;D,</span><br><span class="line">                                      const ParsedTemplateInfo &amp;TemplateInfo,</span><br><span class="line">                                      LateParsedAttrList *LateParsedAttrs) &#123;</span><br><span class="line">  // Enter a scope for the function body.</span><br><span class="line">  ParseScope BodyScope(this, Scope::FnScope|Scope::DeclScope);</span><br><span class="line"></span><br><span class="line">  // Tell the actions module that we have entered a function definition with the</span><br><span class="line">  // specified Declarator for the function.</span><br><span class="line">  Decl *Res = Actions.ActOnStartOfFunctionDef(getCurScope(), D,</span><br><span class="line">                                              TemplateInfo.TemplateParams</span><br><span class="line">                                                  ? *TemplateInfo.TemplateParams</span><br><span class="line">                                                  : MultiTemplateParamsArg(),</span><br><span class="line">                                              &amp;SkipBody);</span><br><span class="line"></span><br><span class="line">  return ParseFunctionStatementBody(Res, BodyScope);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先进入函数作用域，执行相应的 <code>Action</code>，最后调用 <code>ParseFunctionStatementBody</code> 开始解析函数部分。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Decl *Parser::ParseFunctionStatementBody(Decl *Decl, ParseScope &amp;BodyScope) &#123;</span><br><span class="line">  // Do not enter a scope for the brace, as the arguments are in the same scope</span><br><span class="line">  // (the function body) as the body itself.  Instead, just read the statement</span><br><span class="line">  // list and put it into a CompoundStmt for safe keeping.</span><br><span class="line">  StmtResult FnBody(ParseCompoundStatementBody());</span><br><span class="line"></span><br><span class="line">  BodyScope.Exit();</span><br><span class="line">  return Actions.ActOnFinishFunctionBody(Decl, FnBody.get());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>ParseFunctionStatementBody</code> 中最重要的一句是:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">StmtResult FnBody(ParseCompoundStatementBody());</span><br></pre></td></tr></table></figure><p>然后就是退出作用域，执行相应的 <code>Action</code>。继续跟进 <code>ParseCompoundStatementBody</code>。</p><p>在 <code>ParseCompoundStatementBody</code> 中，暂时忽略 <code>kw__extension__</code> 的情况，于是，实际的调用为 <code>ParseStatementOrDeclaration</code>，其中又调用了 <code>ParseStatementOrDeclarationAfterAttributes</code>，这个函数就是正式进行分析的代码部分：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line">StmtResult</span><br><span class="line">Parser::ParseStatementOrDeclarationAfterAttributes(StmtVector &amp;Stmts,</span><br><span class="line">          AllowedContsructsKind Allowed, SourceLocation *TrailingElseLoc,</span><br><span class="line">          ParsedAttributesWithRange &amp;Attrs) &#123;</span><br><span class="line">  switch (Kind) &#123;</span><br><span class="line">  case tok::identifier: &#123;</span><br><span class="line">    Token Next = NextToken();</span><br><span class="line">    if (Next.is(tok::colon)) &#123; // C99 6.8.1: labeled-statement</span><br><span class="line">      // identifier &apos;:&apos; statement</span><br><span class="line">      return ParseLabeledStatement(Attrs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Look up the identifier, and typo-correct it to a keyword if it&apos;s not</span><br><span class="line">    // found.</span><br><span class="line">    if (Next.isNot(tok::coloncolon)) &#123;</span><br><span class="line">      // Try to limit which sets of keywords should be included in typo</span><br><span class="line">      // correction based on what the next token is.</span><br><span class="line">      if (TryAnnotateName(/*IsAddressOfOperand*/ false,</span><br><span class="line">                          llvm::make_unique&lt;StatementFilterCCC&gt;(Next)) ==</span><br><span class="line">          ANK_Error) &#123;</span><br><span class="line">        // Handle errors here by skipping up to the next semicolon or &apos;&#125;&apos;, and</span><br><span class="line">        // eat the semicolon if that&apos;s what stopped us.</span><br><span class="line">        SkipUntil(tok::r_brace, StopAtSemi | StopBeforeMatch);</span><br><span class="line">        if (Tok.is(tok::semi))</span><br><span class="line">          ConsumeToken();</span><br><span class="line">        return StmtError();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      // If the identifier was typo-corrected, try again.</span><br><span class="line">      if (Tok.isNot(tok::identifier))</span><br><span class="line">        goto Retry;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Fall through</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  default: &#123;</span><br><span class="line">    if ((getLangOpts().CPlusPlus || Allowed == ACK_Any) &amp;&amp;</span><br><span class="line">        isDeclarationStatement()) &#123;</span><br><span class="line">      SourceLocation DeclStart = Tok.getLocation(), DeclEnd;</span><br><span class="line">      DeclGroupPtrTy Decl = ParseDeclaration(Declarator::BlockContext,</span><br><span class="line">                                             DeclEnd, Attrs);</span><br><span class="line">      return Actions.ActOnDeclStmt(Decl, DeclStart, DeclEnd);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (Tok.is(tok::r_brace)) &#123;</span><br><span class="line">      Diag(Tok, diag::err_expected_statement);</span><br><span class="line">      return StmtError();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return ParseExprStatement();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  case tok::kw_case:                // C99 6.8.1: labeled-statement</span><br><span class="line">    return ParseCaseStatement();</span><br><span class="line">  case tok::kw_default:             // C99 6.8.1: labeled-statement</span><br><span class="line">    return ParseDefaultStatement();</span><br><span class="line"></span><br><span class="line">  case tok::l_brace:                // C99 6.8.2: compound-statement</span><br><span class="line">    return ParseCompoundStatement();</span><br><span class="line">  case tok::semi: &#123;                 // C99 6.8.3p3: expression[opt] &apos;;&apos;</span><br><span class="line">    bool HasLeadingEmptyMacro = Tok.hasLeadingEmptyMacro();</span><br><span class="line">    return Actions.ActOnNullStmt(ConsumeToken(), HasLeadingEmptyMacro);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  case tok::kw_if:                  // C99 6.8.4.1: if-statement</span><br><span class="line">    return ParseIfStatement(TrailingElseLoc);</span><br><span class="line">  case tok::kw_switch:              // C99 6.8.4.2: switch-statement</span><br><span class="line">    return ParseSwitchStatement(TrailingElseLoc);</span><br><span class="line"></span><br><span class="line">  case tok::kw_while:               // C99 6.8.5.1: while-statement</span><br><span class="line">    return ParseWhileStatement(TrailingElseLoc);</span><br><span class="line">  case tok::kw_do:                  // C99 6.8.5.2: do-statement</span><br><span class="line">    Res = ParseDoStatement();</span><br><span class="line">    SemiError = &quot;do/while&quot;;</span><br><span class="line">    break;</span><br><span class="line">  case tok::kw_for:                 // C99 6.8.5.3: for-statement</span><br><span class="line">    return ParseForStatement(TrailingElseLoc);</span><br><span class="line"></span><br><span class="line">  case tok::kw_goto:                // C99 6.8.6.1: goto-statement</span><br><span class="line">    Res = ParseGotoStatement();</span><br><span class="line">    SemiError = &quot;goto&quot;;</span><br><span class="line">    break;</span><br><span class="line">  case tok::kw_continue:            // C99 6.8.6.2: continue-statement</span><br><span class="line">    Res = ParseContinueStatement();</span><br><span class="line">    SemiError = &quot;continue&quot;;</span><br><span class="line">    break;</span><br><span class="line">  case tok::kw_break:               // C99 6.8.6.3: break-statement</span><br><span class="line">    Res = ParseBreakStatement();</span><br><span class="line">    SemiError = &quot;break&quot;;</span><br><span class="line">    break;</span><br><span class="line">  case tok::kw_return:              // C99 6.8.6.4: return-statement</span><br><span class="line">    Res = ParseReturnStatement();</span><br><span class="line">    SemiError = &quot;return&quot;;</span><br><span class="line">    break;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return Res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关键代码如上，可以看到针对对应的关键字，调用对应的 <code>Parse</code>。这里就不继续跟踪了，有兴趣可以深入了解。</p><p>可以发现的是，<code>Action</code> 穿插在代码中，<code>Parse</code> 到指定位置，则调用相应的语义动作进行检查，这样就不需要在 <code>Parse</code> 完成后，遍历一次语法树，且代码简介易于编写。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前面部分分析了初始化流程，紧接着分析的是 Parse 部分。&lt;/p&gt;
&lt;p&gt;所有 &lt;code&gt;Action&lt;/code&gt; 的基类是 &lt;code&gt;FrontendAction&lt;/code&gt;，在 &lt;code&gt;FrontendAction&lt;/code&gt; 的 &lt;code&gt;Execu
      
    
    </summary>
    
      <category term="Clang 源码分析" scheme="http://www.hashcoding.net/categories/Clang-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    
      <category term="Compile" scheme="http://www.hashcoding.net/tags/Compile/"/>
    
  </entry>
  
  <entry>
    <title>Clang - Source Code Analysis (1)</title>
    <link href="http://www.hashcoding.net/2016/05/13/Clang-Source-Code-Analysis-1/"/>
    <id>http://www.hashcoding.net/2016/05/13/Clang-Source-Code-Analysis-1/</id>
    <published>2016-05-13T12:21:38.000Z</published>
    <updated>2017-06-12T11:59:56.490Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>读 Clang 源代码是最近一直想做的事情，无奈种种原因一直拖到现在。正好这几天获得了几天喘息时间，便开始了 Clang 源码阅读之旅。</p><a id="more"></a><p>Clang 的源代码可以从 github 上的 <a href="https://github.com/llvm-mirror/clang" target="_blank" rel="noopener">Clang</a> 得到。这里我使用的是 Clang 3.9 版本的源代码，如果你使用相近版本，我想问题不会太大。我主要的时间是在 Windows 上工作，所以源代码阅读工作也放到了 Windows 下，毕竟 VS 大法好。具体在 Windows 下如何编译 Clang 请参考 <a href="http://www.hashcoding.net/2015/12/23/Clang-for-windows/">Clang for windows</a>。</p><p>想要研究 Clang 源代码，官方文档便是最好的学习资料，除此之外，你还可以订阅 Clang 邮件组(cfe-dev,cfe-commit)。这里首先建议看一看 <a href="http://clang.llvm.org/docs/InternalsManual.html" target="_blank" rel="noopener">Clang internals Manual</a> 对基础结构有所把握。</p><p>我的着手点是来自知乎上的一篇回答 <a href="https://www.zhihu.com/question/31425289" target="_blank" rel="noopener">Clang 真正的前端是什么？</a>。</p><h1 id="总体结构"><a href="#总体结构" class="headerlink" title="总体结构"></a>总体结构</h1><p>Clang 只是一个编译器前端，它获取用户输入，生成语法树，在语义检查和各种诊断后产生 llvm IR。剩下的工作则交给 llvm 完成，而这一切通过 Drive 组织起来。</p><p>Clang 默认只进行一遍 parse，你需要通过 Action 来指定完成 parse 后应该干些什么。值得注意的是 Clang 的 Action 穿插在各种 parse 结构中，比如 parse 过程总便对函数声明进行检查。</p><p>所以，Clang 的运行流程如下：</p><ol><li>解析命令参数，分别为 Analyzer, Migrator, DependencyOutput, Diagnostic, Comment, FileSystem, Frontend, CodeGen, HeaderSearch, LangOpt 等多种类型参数;</li><li>根据解析的命令执行相应 Act，进而执行 ParseAST;</li><li>ParseAST 分为三个部分，前两个部分分别是 ParseTopLevelDecl和 HandleTopLevelDecl;</li><li>最后 HandleTranslationUnit 进行检查优化并生成对应的 llvm IR；</li></ol><p>下面，我们将通过实际调试来跟踪 Clang 执行流程，首先，写上测试代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">int function(int x, int y) &#123;</span><br><span class="line">    return x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    int a = 0;</span><br><span class="line">    a = function(a, a);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>保存为 test.cc 然后我们通过如下命令进行编译并调试 Clang : </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clang -cc1 -S -emit-llvm test.cc</span><br></pre></td></tr></table></figure><p>然后我们进入调试模式。</p><p>首先进入的是位于 driver.cpp 中的 main 函数:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int main(int argc_, const char **argv_) &#123;</span><br><span class="line">  llvm::sys::PrintStackTraceOnErrorSignal();</span><br><span class="line">  llvm::PrettyStackTraceProgram X(argc_, argv_);</span><br></pre></td></tr></table></figure><p>然后进一步跟踪，看到下面部分代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// Handle -cc1 integrated tools, even if -cc1 was expanded from a response</span><br><span class="line">// file.</span><br><span class="line">auto FirstArg = std::find_if(argv.begin() + 1, argv.end(),</span><br><span class="line">                             [](const char *A) &#123; return A != nullptr; &#125;);</span><br><span class="line">if (FirstArg != argv.end() &amp;&amp; StringRef(*FirstArg).startswith(&quot;-cc1&quot;)) &#123;</span><br><span class="line">  // If -cc1 came from a response file, remove the EOL sentinels.</span><br><span class="line">  if (MarkEOLs) &#123;</span><br><span class="line">    auto newEnd = std::remove(argv.begin(), argv.end(), nullptr);</span><br><span class="line">    argv.resize(newEnd - argv.begin());</span><br><span class="line">  &#125;</span><br><span class="line">  return ExecuteCC1Tool(argv, argv[1] + 4);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里通过判断第一个 argument 是否为以 <code>-cc1</code> 为前缀，是则调用 <code>ExecuteCC1Tool</code>，而我们命令中第一个参数正好为 <code>-cc1</code>，然后跟进 <code>ExecuteCC1Tool</code> 会进入到 <code>cc1_main</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int cc1_main(ArrayRef&lt;const char *&gt; Argv, const char *Argv0, void *MainAddr) &#123;</span><br><span class="line">  std::unique_ptr&lt;CompilerInstance&gt; Clang(new CompilerInstance());</span><br><span class="line">  IntrusiveRefCntPtr&lt;DiagnosticIDs&gt; DiagID(new DiagnosticIDs());</span><br></pre></td></tr></table></figure><p>这个函数第一行代码便生成了一个 <code>CompilerInstance</code> 对象 <code>Clang</code>，继续跟进会发现下面代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bool Success = CompilerInvocation::CreateFromArgs(</span><br><span class="line">    Clang-&gt;getInvocation(), Argv.begin(), Argv.end(), Diags);</span><br></pre></td></tr></table></figure><p>这里是根据 argument 为 <code>CompilerInstance</code> 创建一个 <code>CompilerInvocation</code> 实例，想来处理 argument 的代码就在里面。所以进入 <code>CreateFromArgs</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">Success &amp;= ParseAnalyzerArgs(*Res.getAnalyzerOpts(), Args, Diags);</span><br><span class="line">Success &amp;= ParseMigratorArgs(Res.getMigratorOpts(), Args);</span><br><span class="line">ParseDependencyOutputArgs(Res.getDependencyOutputOpts(), Args);</span><br><span class="line">Success &amp;= ParseDiagnosticArgs(Res.getDiagnosticOpts(), Args, &amp;Diags);</span><br><span class="line">ParseCommentArgs(LangOpts.CommentOpts, Args);</span><br><span class="line">ParseFileSystemArgs(Res.getFileSystemOpts(), Args);</span><br><span class="line">// FIXME: We shouldn&apos;t have to pass the DashX option around here</span><br><span class="line">InputKind DashX = ParseFrontendArgs(Res.getFrontendOpts(), Args, Diags);</span><br><span class="line">ParseTargetArgs(Res.getTargetOpts(), Args, Diags);</span><br><span class="line">Success &amp;= ParseCodeGenArgs(Res.getCodeGenOpts(), Args, DashX, Diags,</span><br><span class="line">                            Res.getTargetOpts());</span><br><span class="line">ParseHeaderSearchArgs(Res.getHeaderSearchOpts(), Args);</span><br><span class="line">if (DashX == IK_AST || DashX == IK_LLVM_IR) &#123;</span><br><span class="line">  // ObjCAAutoRefCount and Sanitize LangOpts are used to setup the</span><br><span class="line">  // PassManager in BackendUtil.cpp. They need to be initializd no matter</span><br><span class="line">  // what the input type is.</span><br><span class="line">  if (Args.hasArg(OPT_fobjc_arc))</span><br><span class="line">    LangOpts.ObjCAutoRefCount = 1;</span><br><span class="line">  // PIClevel and PIELevel are needed during code generation and this should be</span><br><span class="line">  // set regardless of the input type.</span><br><span class="line">  LangOpts.PICLevel = getLastArgIntValue(Args, OPT_pic_level, 0, Diags);</span><br><span class="line">  LangOpts.PIELevel = getLastArgIntValue(Args, OPT_pie_level, 0, Diags);</span><br><span class="line">  parseSanitizerKinds(&quot;-fsanitize=&quot;, Args.getAllArgValues(OPT_fsanitize_EQ),</span><br><span class="line">                      Diags, LangOpts.Sanitize);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">  // Other LangOpts are only initialzed when the input is not AST or LLVM IR.</span><br><span class="line">  ParseLangArgs(LangOpts, Args, DashX, Res.getTargetOpts(), Diags);</span><br><span class="line">  if (Res.getFrontendOpts().ProgramAction == frontend::RewriteObjC)</span><br><span class="line">    LangOpts.ObjCExceptions = 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过名称就可以猜出每行代码做了些什么功能，所以这里就不一一跟进，只看一下 <code>ParseFrontendArgs</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">static InputKind ParseFrontendArgs(FrontendOptions &amp;Opts, ArgList &amp;Args,</span><br><span class="line">                                   DiagnosticsEngine &amp;Diags) &#123;</span><br><span class="line">  using namespace options;</span><br><span class="line">  Opts.ProgramAction = frontend::ParseSyntaxOnly;</span><br><span class="line">  if (const Arg *A = Args.getLastArg(OPT_Action_Group)) &#123;</span><br><span class="line">    switch (A-&gt;getOption().getID()) &#123;</span><br><span class="line">    default:</span><br><span class="line">      llvm_unreachable(&quot;Invalid option in group!&quot;);</span><br><span class="line">    case OPT_ast_list:</span><br><span class="line">      Opts.ProgramAction = frontend::ASTDeclList; break;</span><br><span class="line">    case OPT_ast_dump:</span><br><span class="line">    case OPT_ast_dump_lookups:</span><br><span class="line">      Opts.ProgramAction = frontend::ASTDump; break;</span><br><span class="line">    case OPT_ast_print:</span><br><span class="line">      Opts.ProgramAction = frontend::ASTPrint; break;</span><br><span class="line">    case OPT_ast_view:</span><br><span class="line">      Opts.ProgramAction = frontend::ASTView; break;</span><br><span class="line">    case OPT_dump_raw_tokens:</span><br><span class="line">      Opts.ProgramAction = frontend::DumpRawTokens; break;</span><br><span class="line">    case OPT_dump_tokens:</span><br><span class="line">      Opts.ProgramAction = frontend::DumpTokens; break;</span><br><span class="line">    case OPT_S:</span><br><span class="line">      Opts.ProgramAction = frontend::EmitAssembly; break;</span><br><span class="line">    case OPT_emit_llvm_bc:</span><br><span class="line">      Opts.ProgramAction = frontend::EmitBC; break;</span><br><span class="line">    case OPT_emit_html:</span><br><span class="line">      Opts.ProgramAction = frontend::EmitHTML; break;</span><br><span class="line">    case OPT_emit_llvm:</span><br><span class="line">      Opts.ProgramAction = frontend::EmitLLVM; break;</span><br><span class="line">    case OPT_emit_llvm_only:</span><br><span class="line">      Opts.ProgramAction = frontend::EmitLLVMOnly; break;</span><br><span class="line">    case OPT_emit_codegen_only:</span><br><span class="line">      Opts.ProgramAction = frontend::EmitCodeGenOnly; break;</span><br><span class="line">    case OPT_emit_obj:</span><br><span class="line">      Opts.ProgramAction = frontend::EmitObj; break;</span><br><span class="line">    case OPT_fixit_EQ:</span><br><span class="line">      Opts.FixItSuffix = A-&gt;getValue();</span><br><span class="line">      // fall-through!</span><br><span class="line">    case OPT_fixit:</span><br><span class="line">      Opts.ProgramAction = frontend::FixIt; break;</span><br><span class="line">    case OPT_emit_module:</span><br><span class="line">      Opts.ProgramAction = frontend::GenerateModule; break;</span><br><span class="line">    case OPT_emit_pch:</span><br><span class="line">      Opts.ProgramAction = frontend::GeneratePCH; break;</span><br><span class="line">    case OPT_emit_pth:</span><br><span class="line">      Opts.ProgramAction = frontend::GeneratePTH; break;</span><br><span class="line">    case OPT_init_only:</span><br><span class="line">      Opts.ProgramAction = frontend::InitOnly; break;</span><br><span class="line">    case OPT_fsyntax_only:</span><br><span class="line">      Opts.ProgramAction = frontend::ParseSyntaxOnly; break;</span><br><span class="line">    case OPT_module_file_info:</span><br><span class="line">      Opts.ProgramAction = frontend::ModuleFileInfo; break;</span><br><span class="line">    case OPT_verify_pch:</span><br><span class="line">      Opts.ProgramAction = frontend::VerifyPCH; break;</span><br><span class="line">    case OPT_print_decl_contexts:</span><br><span class="line">      Opts.ProgramAction = frontend::PrintDeclContext; break;</span><br><span class="line">    case OPT_print_preamble:</span><br><span class="line">      Opts.ProgramAction = frontend::PrintPreamble; break;</span><br><span class="line">    case OPT_E:</span><br><span class="line">      Opts.ProgramAction = frontend::PrintPreprocessedInput; break;</span><br><span class="line">    case OPT_rewrite_macros:</span><br><span class="line">      Opts.ProgramAction = frontend::RewriteMacros; break;</span><br><span class="line">    case OPT_rewrite_objc:</span><br><span class="line">      Opts.ProgramAction = frontend::RewriteObjC; break;</span><br><span class="line">    case OPT_rewrite_test:</span><br><span class="line">      Opts.ProgramAction = frontend::RewriteTest; break;</span><br><span class="line">    case OPT_analyze:</span><br><span class="line">      Opts.ProgramAction = frontend::RunAnalysis; break;</span><br><span class="line">    case OPT_migrate:</span><br><span class="line">      Opts.ProgramAction = frontend::MigrateSource; break;</span><br><span class="line">    case OPT_Eonly:</span><br><span class="line">      Opts.ProgramAction = frontend::RunPreprocessorOnly; break;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>这里便是指定 Action 的地方，我们使用的 <code>-emit-llvm</code> ，则 <code>ProgramAction</code> 表示 <code>frontend::EmitLLVM</code>。</p><p>现在回到 <code>cc1_main</code>，紧急着便是执行 <code>frontend actions</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// Execute the frontend actions.</span><br><span class="line">Success = ExecuteCompilerInvocation(Clang.get());</span><br></pre></td></tr></table></figure><p>目前为止，初始化编译器部分工作已经完成，下面就是执行部分。跟进 <code>ExecuteCompilerInvocation</code>，注意到下面一段代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// Create and execute the frontend action.</span><br><span class="line">std::unique_ptr&lt;FrontendAction&gt; Act(CreateFrontendAction(*Clang));</span><br><span class="line">if (!Act)</span><br><span class="line">  return false;</span><br><span class="line">bool Success = Clang-&gt;ExecuteAction(*Act);</span><br></pre></td></tr></table></figure><p>这里就是根据 <code>ParseFrontendArgs</code> 中得到的 <code>ProgramAction</code> 来生成对应的 <code>Act</code>。紧接着，通过该  <code>Act</code> 调用 <code>ExecuteAction</code> 正式开始工作。</p><p><code>CreateFrontendAction</code> 通过进一步调用 <code>CreateFrontendBaseAction</code> 来生成 <code>Act</code>，<code>CreateFrontendBaseAction</code> 中对应部分代码为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">switch (CI.getFrontendOpts().ProgramAction) &#123;</span><br><span class="line">  case ASTDeclList:            return llvm::make_unique&lt;ASTDeclListAction&gt;();</span><br><span class="line">  case ASTDump:                return llvm::make_unique&lt;ASTDumpAction&gt;();</span><br><span class="line">  case ASTPrint:               return llvm::make_unique&lt;ASTPrintAction&gt;();</span><br><span class="line">  case ASTView:                return llvm::make_unique&lt;ASTViewAction&gt;();</span><br><span class="line">  case DumpRawTokens:          return llvm::make_unique&lt;DumpRawTokensAction&gt;();</span><br><span class="line">  case DumpTokens:             return llvm::make_unique&lt;DumpTokensAction&gt;();</span><br><span class="line">  case EmitAssembly:           return llvm::make_unique&lt;EmitAssemblyAction&gt;();</span><br><span class="line">  case EmitBC:                 return llvm::make_unique&lt;EmitBCAction&gt;();</span><br><span class="line">  case EmitHTML:               return llvm::make_unique&lt;HTMLPrintAction&gt;();</span><br><span class="line">  case EmitLLVM:               return llvm::make_unique&lt;EmitLLVMAction&gt;();</span><br><span class="line">  case EmitLLVMOnly:           return llvm::make_unique&lt;EmitLLVMOnlyAction&gt;();</span><br><span class="line">  case EmitCodeGenOnly:        return llvm::make_unique&lt;EmitCodeGenOnlyAction&gt;();</span><br><span class="line">  case EmitObj:                return llvm::make_unique&lt;EmitObjAction&gt;();</span><br><span class="line">  case FixIt:                  return llvm::make_unique&lt;FixItAction&gt;();</span><br><span class="line">  case GenerateModule:         return llvm::make_unique&lt;GenerateModuleAction&gt;();</span><br><span class="line">  case GeneratePCH:            return llvm::make_unique&lt;GeneratePCHAction&gt;();</span><br><span class="line">  case GeneratePTH:            return llvm::make_unique&lt;GeneratePTHAction&gt;();</span><br><span class="line">  case InitOnly:               return llvm::make_unique&lt;InitOnlyAction&gt;();</span><br><span class="line">  case ParseSyntaxOnly:        return llvm::make_unique&lt;SyntaxOnlyAction&gt;();</span><br><span class="line">  case ModuleFileInfo:         return llvm::make_unique&lt;DumpModuleInfoAction&gt;();</span><br><span class="line">  case VerifyPCH:              return llvm::make_unique&lt;VerifyPCHAction&gt;();</span><br></pre></td></tr></table></figure><p>在这里，就可以找到所有的 <code>Action</code> 方便后面使用。</p><p><code>ExecuteAction</code> 中通过对每一个文件执行一次 <code>Execute</code> 来进行编译：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">for (const FrontendInputFile &amp;FIF : getFrontendOpts().Inputs) &#123;</span><br><span class="line">  // Reset the ID tables if we are reusing the SourceManager and parsing</span><br><span class="line">  // regular files.</span><br><span class="line">  if (hasSourceManager() &amp;&amp; !Act.isModelParsingAction())</span><br><span class="line">    getSourceManager().clearIDTables();</span><br><span class="line"></span><br><span class="line">  if (Act.BeginSourceFile(*this, FIF)) &#123;</span><br><span class="line">    Act.Execute();</span><br><span class="line">    Act.EndSourceFile();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Execute</code> 中，通过进一步调用所对应实例的 <code>ExecuteAction</code> 来具体执行，所以这里紧接着关心的便是每个 <code>Action</code> 对应的 <code>ExecuteAction</code> 部分。到此为止，工作流程部分告一段落，接下来具体分析的是对应的 <code>Action</code>。 </p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;读 Clang 源代码是最近一直想做的事情，无奈种种原因一直拖到现在。正好这几天获得了几天喘息时间，便开始了 Clang 源码阅读之旅。&lt;/p&gt;
    
    </summary>
    
      <category term="Clang 源码分析" scheme="http://www.hashcoding.net/categories/Clang-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    
      <category term="Compile" scheme="http://www.hashcoding.net/tags/Compile/"/>
    
  </entry>
  
  <entry>
    <title>Laravel5.2+Dingo/API+JWTauth 的坑</title>
    <link href="http://www.hashcoding.net/2016/04/28/Laravel5-2-Dingo-API-JWTauth-%E7%9A%84%E5%9D%91/"/>
    <id>http://www.hashcoding.net/2016/04/28/Laravel5-2-Dingo-API-JWTauth-的坑/</id>
    <published>2016-04-28T09:41:15.000Z</published>
    <updated>2016-06-29T07:33:24.248Z</updated>
    
    <content type="html"><![CDATA[<p>最近着手做一款应用后端，在否定了 BaaS 后，决定用 Laravel 框架自己做一个 RESTful API。我的环境是 Laravel 5.2 ，另外使用了 Dingo/API 和 JWTAuth。不过在使用的过程中遇到了很多的坑，所以在这里记录一下。</p><a id="more"></a><p>JWTAuth 默认使用 Users 表做为登录认证的表。而我的需求比较奇葩，共有两个不同的表；除此之外，还需要对 JWTAuth 的错误进行自定义。在搜索无果后，只好自己动手实现这两个需求。</p><p>首先解决第二个问题，对 JWTAuth 进行错误自定义。这种情况下，我们可以自己去添加一个中间件处理身份认证。</p><h3 id="添加中间件处理身份验证"><a href="#添加中间件处理身份验证" class="headerlink" title="添加中间件处理身份验证"></a>添加中间件处理身份验证</h3><p>1、添加一个 Middleware</p><p>可以使用命令行添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan make:middleware GetUserFromToken</span><br></pre></td></tr></table></figure><p>此命令将会在 <code>app/Http/Middleware</code> 目录内置立一个名称为 <code>GetUserFromToken</code> 的类。</p><p>2、在 <code>GetUserFromToken</code> 中编辑代码，这里仿照 JWTAuth 写了 <code>Middleware</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">namespace App\Http\Middleware;</span><br><span class="line"></span><br><span class="line">use Closure;</span><br><span class="line">use JWTAuth;</span><br><span class="line">use Tymon\JWTAuth\Exceptions\JWTException;</span><br><span class="line">use Tymon\JWTAuth\Exceptions\TokenExpiredException;</span><br><span class="line">use Tymon\JWTAuth\Exceptions\TokenInvalidException;</span><br><span class="line"></span><br><span class="line">class GetUserFromToken</span><br><span class="line">&#123;</span><br><span class="line">    public function handle($request, Closure $next)</span><br><span class="line">    &#123;</span><br><span class="line">        $auth = JWTAuth::parseToken();</span><br><span class="line">        if (! $token = $auth-&gt;setRequest($request)-&gt;getToken()) &#123;</span><br><span class="line">            return response()-&gt;json([</span><br><span class="line">                &apos;code&apos; =&gt; &apos;&apos;,</span><br><span class="line">                &apos;message&apos; =&gt; &apos;token_not_provided&apos;,</span><br><span class="line">                &apos;data&apos; =&gt; &apos;&apos;,</span><br><span class="line">            ]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        try &#123;</span><br><span class="line">            $user = $auth-&gt;authenticate($token);</span><br><span class="line">        &#125; catch (TokenExpiredException $e) &#123;</span><br><span class="line">            return response()-&gt;json([</span><br><span class="line">                &apos;code&apos; =&gt; &apos;&apos;,</span><br><span class="line">                &apos;message&apos; =&gt; &apos;token_expired&apos;,</span><br><span class="line">                &apos;data&apos; =&gt; &apos;&apos;,</span><br><span class="line">            ]);</span><br><span class="line">        &#125; catch (JWTException $e) &#123;</span><br><span class="line">            return response()-&gt;json([</span><br><span class="line">                &apos;code&apos; =&gt; &apos;&apos;,</span><br><span class="line">                &apos;message&apos; =&gt; &apos;token_invalid&apos;,</span><br><span class="line">                &apos;data&apos; =&gt; &apos;&apos;,</span><br><span class="line">            ]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (! $user) &#123;</span><br><span class="line">            return response()-&gt;json([</span><br><span class="line">                &apos;code&apos; =&gt; &apos;&apos;,</span><br><span class="line">                &apos;message&apos; =&gt; &apos;user_not_found&apos;,</span><br><span class="line">                &apos;data&apos; =&gt; &apos;&apos;,</span><br><span class="line">            ]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //$this-&gt;events-&gt;fire(&apos;tymon.jwt.valid&apos;, $user);</span><br><span class="line"></span><br><span class="line">        return $next($request);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我将每次错误返回数据替换成自己设置的错误信息。</p><p>3、在 <code>/app/Http/Kernel.php</code> 中 <code>$routeMiddleware</code> 新增如下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">protected $routeMiddleware = [</span><br><span class="line">    ...</span><br><span class="line">    &apos;jwt.api.auth&apos; =&gt; \App\Http\Middleware\GetUserFromToken::class, //新增注册的中间件</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>4、在路由中指定使用 <code>jwt.api.auth</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&apos;middleware&apos; =&gt; &apos;jwt.api.auth&apos;]</span><br></pre></td></tr></table></figure><p>完成上面的操作，我们新增处理接口身份认证中间件就完成了。</p><p>现在需要处理前一个问题。</p><h3 id="多表配置"><a href="#多表配置" class="headerlink" title="多表配置"></a>多表配置</h3><p>在 JWTAuth 中，可以在配置文件 jwt.php 中设置 <code>User Model namespace</code>，所以可以在 <code>Middleware</code> 中 <code>handle</code> 部分添加如下代码来动态配置 <code>User Model namespace</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">config([&apos;jwt.user&apos; =&gt; &apos;App\Models\User&apos;]);</span><br></pre></td></tr></table></figure><p>这里，我把 User 表放到了 <code>App\Models\</code> 中和其他的统一进行管理。不过我在测试中一直出现 <code>App\User</code> 未定义错误。然后就开始了漫长的定位之旅。首先在访问 <code>authenticate</code> 得到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public function authenticate($token = false)</span><br><span class="line">&#123;</span><br><span class="line">    $id = $this-&gt;getPayload($token)-&gt;get(&apos;sub&apos;);</span><br><span class="line"></span><br><span class="line">    if (! $this-&gt;auth-&gt;byId($id)) &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return $this-&gt;auth-&gt;user();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，在 <code>Tymon\JWTAuth\Providers\Auth\IlluminateAuthAdapter</code> 中找到 <code>byId</code> 和 <code>user</code> 对应代码如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public function byId($id)</span><br><span class="line">&#123;</span><br><span class="line">    return $this-&gt;auth-&gt;onceUsingId($id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public function user()</span><br><span class="line">&#123;</span><br><span class="line">    return $this-&gt;auth-&gt;user();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过测试发现 auth 实际上是一个 <code>Illuminate\Auth\SessionGuard</code> 实例，然后在其中发现了 <code>onceUsingId</code> 和 <code>user</code> 部分代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public function onceUsingId($id)</span><br><span class="line">&#123;</span><br><span class="line">    if (! is_null($user = $this-&gt;provider-&gt;retrieveById($id))) &#123;</span><br><span class="line">        $this-&gt;setUser($user);</span><br><span class="line"></span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在查找 <code>provider</code> 所在位置时定位到文件 <code>Illuminate\Auth\CreatesUserProviders.php</code> 中找到如下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public function createUserProvider($provider)</span><br><span class="line">&#123;</span><br><span class="line">    $config = $this-&gt;app[&apos;config&apos;][&apos;auth.providers.&apos;.$provider];</span><br><span class="line">    if (isset($this-&gt;customProviderCreators[$config[&apos;driver&apos;]])) &#123;</span><br><span class="line">        return call_user_func(</span><br><span class="line">            $this-&gt;customProviderCreators[$config[&apos;driver&apos;]], $this-&gt;app, $config</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    switch ($config[&apos;driver&apos;]) &#123;</span><br><span class="line">        case &apos;database&apos;:</span><br><span class="line">            return $this-&gt;createDatabaseProvider($config);</span><br><span class="line">        case &apos;eloquent&apos;:</span><br><span class="line">            return $this-&gt;createEloquentProvider($config);</span><br><span class="line">        default:</span><br><span class="line">            throw new InvalidArgumentException(&quot;Authentication user provider [&#123;$config[&apos;driver&apos;]&#125;] is not defined.&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里通过 <code>auth.providers.users</code> 配置设置 <code>$config</code>，而 <code>auth.providers.users</code> 在文件 auth.php 中默认配置如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&apos;providers&apos; =&gt; [</span><br><span class="line">    &apos;users&apos; =&gt; [</span><br><span class="line">        &apos;driver&apos; =&gt; &apos;eloquent&apos;,</span><br><span class="line">        &apos;model&apos; =&gt; App\User::class,</span><br><span class="line">    ],</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>所以程序走到了 <code>return $this-&gt;createEloquentProvider($config);</code> 这一步，继续跟踪得到:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">protected function createEloquentProvider($config)</span><br><span class="line">&#123;</span><br><span class="line">    return new EloquentUserProvider($this-&gt;app[&apos;hash&apos;], $config[&apos;model&apos;]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中 <code>$config[&#39;model&#39;]</code> 则就是原型:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public function __construct(HasherContract $hasher, $model)</span><br><span class="line">&#123;</span><br><span class="line">    $this-&gt;model = $model;</span><br><span class="line">    $this-&gt;hasher = $hasher;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到此，确定了 <code>model</code> 所在位置，只需要在 <code>Middleware</code> 中添加如下配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">config([&apos;auth.providers.users.model&apos; =&gt; \App\Models\User::class]);</span><br></pre></td></tr></table></figure><p>最终代码如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">config([&apos;jwt.user&apos; =&gt; &apos;\App\Models\User&apos;]);</span><br><span class="line">config([&apos;auth.providers.users.model&apos; =&gt; \App\Models\User::class]);</span><br><span class="line">$auth = JWTAuth::parseToken();</span><br><span class="line">if (! $token = $auth-&gt;setRequest($request)-&gt;getToken()) &#123;</span><br><span class="line">    return response()-&gt;json([</span><br><span class="line">        &apos;code&apos; =&gt; &apos;&apos;,</span><br><span class="line">        &apos;message&apos; =&gt; &apos;token_not_provided&apos;,</span><br><span class="line">        &apos;data&apos; =&gt; &apos;&apos;,</span><br><span class="line">    ]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line">    $user = $auth-&gt;authenticate($token);</span><br><span class="line">&#125; catch (TokenExpiredException $e) &#123;</span><br><span class="line">    return response()-&gt;json([</span><br><span class="line">        &apos;code&apos; =&gt; &apos;&apos;,</span><br><span class="line">        &apos;message&apos; =&gt; &apos;token_expired&apos;,</span><br><span class="line">        &apos;data&apos; =&gt; &apos;&apos;,</span><br><span class="line">    ]);</span><br><span class="line">&#125; catch (JWTException $e) &#123;</span><br><span class="line">    return response()-&gt;json([</span><br><span class="line">        &apos;code&apos; =&gt; &apos;&apos;,</span><br><span class="line">        &apos;message&apos; =&gt; &apos;token_invalid&apos;,</span><br><span class="line">        &apos;data&apos; =&gt; &apos;&apos;,</span><br><span class="line">    ]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (! $user) &#123;</span><br><span class="line">    return response()-&gt;json([</span><br><span class="line">        &apos;code&apos; =&gt; &apos;&apos;,</span><br><span class="line">        &apos;message&apos; =&gt; &apos;user_not_found&apos;,</span><br><span class="line">        &apos;data&apos; =&gt; &apos;&apos;,</span><br><span class="line">    ]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//$this-&gt;events-&gt;fire(&apos;tymon.jwt.valid&apos;, $user);</span><br><span class="line"></span><br><span class="line">return $next($request);</span><br></pre></td></tr></table></figure><p>到这里为止，实现了自定义表名功能，在结合自定义 <code>Middleware</code> 部分，就可以实现多表认证。只需要对每一种认证都实现对应的 <code>Middleware</code> ，在接口处分别对不同接口使用不同的 <code>Middleware</code> 进行验证就好。</p><p>当然，这样的实现肯定不完美，因为所有的事件部分代码全部删除了。这部分还没有想到什么好的解决办法，自己实现 event 应该是可行的，这里就么有尝试。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近着手做一款应用后端，在否定了 BaaS 后，决定用 Laravel 框架自己做一个 RESTful API。我的环境是 Laravel 5.2 ，另外使用了 Dingo/API 和 JWTAuth。不过在使用的过程中遇到了很多的坑，所以在这里记录一下。&lt;/p&gt;
    
    </summary>
    
    
      <category term="PHP" scheme="http://www.hashcoding.net/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>MySql 架构学习</title>
    <link href="http://www.hashcoding.net/2016/04/22/MySql-%E6%9E%B6%E6%9E%84/"/>
    <id>http://www.hashcoding.net/2016/04/22/MySql-架构/</id>
    <published>2016-04-22T10:55:41.000Z</published>
    <updated>2016-04-22T10:56:43.426Z</updated>
    
    <content type="html"><![CDATA[<p>Mysql 支持的数据类型非常之多，如何选择正确的数据类型对于获得高性能至关重要。下面是几个简单原则，用于帮助选择数据类型。</p><a id="more"></a><ol><li>更小的通常更好： 应当尽量使用可以储存数据的最小类型，因为其通常占用资源更少。但是不要低估存储值的范围，因为在 schema 中的多个地方增加数据类型的范围是一个非常耗时和痛苦的操作；</li><li>简单就好： 比如应该使用内置类型而不是字符串来存储时间和日期，因为这样操作代价更低。</li><li>尽量避免 NULL： 通常情况下最好指定 NOT NULL，除非真的需要 NULL 值。</li></ol><p>在架构的时候首先确定大类型，然后具体到基本类型。</p><h2 id="数字类型"><a href="#数字类型" class="headerlink" title="数字类型"></a>数字类型</h2><p>mysql 中有两种不同类型的数字，整数和实数。</p><h3 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h3><p>整数类型有：TINYINT, SMALLINT, MEDIUMINT, INT, BIGINT。其分别占用 8, 16, 24, 32, 64 位存储空间，值范围为 [-2^(n-1), 2^(n-1))，其中 N 是储存空间位数。</p><p>整数类型有可选的 UNSIGNED 属性，表示没有负数。有符号和无符号使用相同储存空间，并有相同性能。另外，mysql 中可以为整数类型指定宽度（int(10)），但是实际上并不会影响到储存和计算。</p><h3 id="实数类型"><a href="#实数类型" class="headerlink" title="实数类型"></a>实数类型</h3><p>FLOAT 和 DOUBLE 支持使用标准的浮点运算进行近似计算。DECIMAL 类型用于存储精确的小数，其精确计算开销过大，这里不讲。另外，在存储固定位数的小数如金额，可以转换为整数改用 BIGINT 存储，这样可以同时避免浮点数计算不精确和 DECIMAL 精确计算开销大。</p><h2 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h2><p>VARCHAR 和 CHAR 是最主要的两种字符串类型，具体实现方式与储存引擎有关。下面以 InnoDB 为储存引擎。BLOB 和 TEXT 都是为储存很大的数据而设计的字符串数据类型，分别采用二进制和字符方式进行储存。</p><h3 id="VARCHAR"><a href="#VARCHAR" class="headerlink" title="VARCHAR"></a>VARCHAR</h3><p>VARCHAR 类型用于储存可变长字符串，是最常见的字符串数据类型，它比定常类型更节省空间。VARCHAR 需要使用1或2个字节用于记录字符串长度，如果列的最大长度小于或等于255字节，则只使用1个字节表示，否则使用两个字节。需要注意的是由于行是变长的，那么在 UPDATE 或者其他操作过程中使得行变得比原来更长，就会导致额外的工作。所以 VARCHAR 比较实用于字符串列的最大长度比平均长度大得很多；列的更新很少的情况。</p><h3 id="CHAR"><a href="#CHAR" class="headerlink" title="CHAR"></a>CHAR</h3><p>CHAR 是定长类型，当储存 CHAR 值时，mysql 会删除所有的末尾空格。CHAR 适合储存很短的字符串，或者所有值都接近同一个长度的值。</p><h2 id="日期和时间类型"><a href="#日期和时间类型" class="headerlink" title="日期和时间类型"></a>日期和时间类型</h2><p>DATETIME 这个类型能保存大范围的值，从 1001 年到 9999 年，精度为秒。它把日期和时间装到格式 YYYYMMDDHHMMSS 的整数中，与时区无关。使用 8 个字节的存储空间。TIMESTAMP 保存了从 1970 年 1 月 1 日午夜以来的描述，它和 UNIX 时间戳相同。TIMESTAMP 只使用4个字节的储存空间。所以其范围比 DATETIME 小得多，只能表示从 1970 年到 2038 年。除特殊行为之外，通常也应该尽量使用 TIMESTAMP ，因为它比 DATETIME 空间效率更高。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Mysql 支持的数据类型非常之多，如何选择正确的数据类型对于获得高性能至关重要。下面是几个简单原则，用于帮助选择数据类型。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Database" scheme="http://www.hashcoding.net/tags/Database/"/>
    
  </entry>
  
  <entry>
    <title>Y组合子(Y combinator)与匿名Lambda</title>
    <link href="http://www.hashcoding.net/2016/02/29/Y%E7%BB%84%E5%90%88%E5%AD%90-Y-combinator-%E4%B8%8E%E5%8C%BF%E5%90%8DLambda/"/>
    <id>http://www.hashcoding.net/2016/02/29/Y组合子-Y-combinator-与匿名Lambda/</id>
    <published>2016-02-29T08:35:12.000Z</published>
    <updated>2017-06-12T12:01:16.305Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Y组合子-Y-combinator-与匿名-Lambda"><a href="#Y组合子-Y-combinator-与匿名-Lambda" class="headerlink" title="Y组合子(Y combinator)与匿名 Lambda"></a>Y组合子(Y combinator)与匿名 Lambda</h2><p>Y组合子是函数编程的理论基础，lambda 演算的一部分。它的作用就是把匿名 lambda 函数自身给计算出来。</p><a id="more"></a><p>在介绍组合子之前需要先介绍不动点：不动点（fixed point）是指函数的某种输入和函数本身相等，也就是 f(x) 等于 x 。当然，继续之前你还得了解 first class function 中的高阶函数和柯里化(currying)的概念。</p><p>现在，尝试使用前面设计的语言来做一个例子解释 Y 组合子的用途，该语言中名字只有在定义完成后才可见，也就是定义函数时无法知道自己的名字，这样就导致了无法进行递归。那么如何在这门语言中使用递归呢？</p><p>所谓 Y 组合子即一个 Y 函数，它用于计算高阶函数的不动点。假设有函数 f(x) 和高阶函数 g(x)，我们用 t 来表示 g(x) 的不动点。那么就有 <code>g(Y(g)) = Y(g)</code> 等价于 <code>g(t) = t</code>，其中 Y(g) 得到的是 g(x) 的不动点。</p><p>下面，我们来计算 Y 的形式，定义斐波拉契函数如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">define f = function(fib) &#123;</span><br><span class="line">  return function(n) &#123;</span><br><span class="line">    if (n &lt;= 2) return 1;</span><br><span class="line">    return fib(n-1) + fib(n-2);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>现在，只需要将 <code>fib</code> 函数传递给 <code>f</code> 就能得到 <code>fib</code>…显然这种办法是行不通的。我们进行如下改写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">define fib = function(h, x) &#123;</span><br><span class="line">  if (x &lt;= 2) return 1;</span><br><span class="line">  return h(h, x-1) + h(h, x-2);</span><br><span class="line">&#125;;</span><br><span class="line">fib(fib, 10);</span><br></pre></td></tr></table></figure><p>虽然实现了递归，但是这种办法没有那么优美。我希望能够像其他语言一样，使用 <code>fib(10)</code> 进行调用。现在将函数柯里化:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">define fib = function(h) &#123;</span><br><span class="line">  return function(x) &#123;</span><br><span class="line">    if (x &lt;= 2) return 1;</span><br><span class="line">    return h(h)(x-1) + h(h)(x-2);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line">fib(fib)(10);</span><br></pre></td></tr></table></figure><p>这样的方式仍然不够好，我们进一步将内部的 <code>h(h)</code> 部分改为 <code>fib(x)</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">define fib = function(h) &#123;</span><br><span class="line">  return function(x) &#123;</span><br><span class="line">    let f = function(fib) &#123;</span><br><span class="line">      if (x &lt;= 2) return 1;</span><br><span class="line">      return fib(x-1) + fib(x-2);</span><br><span class="line">    &#125;;</span><br><span class="line">    return f(h(h));</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line">fib(fib)(10);</span><br></pre></td></tr></table></figure><p>现在发现其中的 <code>f</code> 定义的部分与最开始的代码相似，改写如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">define fib = function(h) &#123;</span><br><span class="line">  return function(x) &#123;</span><br><span class="line">    let f = function(fib) &#123;</span><br><span class="line">      return function(n) &#123;</span><br><span class="line">        if (n &lt;= 2) return 1;</span><br><span class="line">        return fib(n-1) + fib(n-2);</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">    return f(h(h))(x);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line">fib(fib)(10);</span><br></pre></td></tr></table></figure><p>然后将 <code>f</code> 部分提取出来：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">define f = function(fib) &#123;</span><br><span class="line">  return function(n) &#123;</span><br><span class="line">    if (n &lt;= 2) return 1;</span><br><span class="line">    return fib(n-1) + fib(n-2);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">define fib = function(h) &#123;</span><br><span class="line">  return function(x) &#123;</span><br><span class="line">    return f(h(h))(x);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line">fib(fib)(10);</span><br></pre></td></tr></table></figure><p>这里发现，利用柯里化，就能得到 Y 组合子，现在对其进行包装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">define f = function(fib) &#123;</span><br><span class="line">  return function(n) &#123;</span><br><span class="line">    if (n &lt;= 2) return 1;</span><br><span class="line">    return fib(n-1) + fib(n-2);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">define Y = function(f) &#123;</span><br><span class="line">  let warp = function(h) &#123;</span><br><span class="line">    return function(x) &#123;</span><br><span class="line">      return f(h(h))(x);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">  return warp(warp);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">define fib = Y(f);</span><br><span class="line">fib(10);</span><br></pre></td></tr></table></figure><p>现在回头看 Y 组合子的定义，Y(f) 就得到了 f 的不动点。那么现在就可以很友好的得到 <code>fib</code> 函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">define Y = function(f) &#123;</span><br><span class="line">  let warp = function(h) &#123;</span><br><span class="line">    return function(x) &#123;</span><br><span class="line">      return f(h(h))(x);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">  return warp(warp);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">define fib = Y(function(fib) &#123;</span><br><span class="line">  return function(n) &#123;</span><br><span class="line">    if (n &lt;= 2) return 1;</span><br><span class="line">    return fib(n-1) + fib(n-2);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br><span class="line">fib(10);</span><br></pre></td></tr></table></figure><p>现在，当然这样的 Y 函数依然有限制，不过已经实现了预期的需求：匿名递归 lambda。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Y组合子-Y-combinator-与匿名-Lambda&quot;&gt;&lt;a href=&quot;#Y组合子-Y-combinator-与匿名-Lambda&quot; class=&quot;headerlink&quot; title=&quot;Y组合子(Y combinator)与匿名 Lambda&quot;&gt;&lt;/a&gt;Y组合子(Y combinator)与匿名 Lambda&lt;/h2&gt;&lt;p&gt;Y组合子是函数编程的理论基础，lambda 演算的一部分。它的作用就是把匿名 lambda 函数自身给计算出来。&lt;/p&gt;
    
    </summary>
    
      <category term="编译器实现" scheme="http://www.hashcoding.net/categories/%E7%BC%96%E8%AF%91%E5%99%A8%E5%AE%9E%E7%8E%B0/"/>
    
    
      <category term="Compile" scheme="http://www.hashcoding.net/tags/Compile/"/>
    
  </entry>
  
  <entry>
    <title>C++0x:Copy And Move</title>
    <link href="http://www.hashcoding.net/2016/01/07/C-Copy-And-Move/"/>
    <id>http://www.hashcoding.net/2016/01/07/C-Copy-And-Move/</id>
    <published>2016-01-07T04:53:51.000Z</published>
    <updated>2017-06-12T11:58:37.036Z</updated>
    
    <content type="html"><![CDATA[<p>C++ 提供了5种特殊的成员函数来控制对象的拷贝、移动、赋值和销毁，统称为<em>拷贝控制操作(copy control)</em>。这几个函数分别是<em>拷贝构造函数(copy constructor)</em>、<em>拷贝赋值运算符(copy assignment operator)</em>、<em>移动构造函数(move constructor)</em>、<em>移动复制运算符(move assignment operator)</em>和<em>析构函数(destructor)</em>。</p><a id="more"></a><h2 id="拷贝构造函数"><a href="#拷贝构造函数" class="headerlink" title="拷贝构造函数"></a>拷贝构造函数</h2><p>如果一个构造函数的第一个参数是自身类型的引用，且任何额外的参数都有默认值，则此函数是<em>拷贝构造函数</em>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">class test &#123;</span><br><span class="line">public:</span><br><span class="line">  test(const test&amp;);  // copy constructor</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>如果我们没有为一个类定义<em>拷贝构造函数</em>，编译器会为我们定义一个<em>合成拷贝构造函数(synthesized copy constructor)</em>。对于<em>合成拷贝构造函数</em>，在发生拷贝时，每个成员的类型会决定其拷贝方式，类成员使用其拷贝构造函数，内置类型成员直接拷贝，数组会逐个元素地拷贝。</p><h2 id="拷贝构造时机"><a href="#拷贝构造时机" class="headerlink" title="拷贝构造时机"></a>拷贝构造时机</h2><p>对于没有进行函数调用的初始化，如果使用等号(=)初始化一个变量，则实际上执行的是<em>拷贝初始化(copy initialization)</em>，如果不使用等号，则执行<em>直接初始化(direct initialization)</em>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">string s1(&quot;direct initialization&quot;);</span><br><span class="line">string s2(s1);    // direct initialization</span><br><span class="line">string s3 = &quot;copy initialization&quot;; </span><br><span class="line">string s4 = s2;   // copy initialization</span><br></pre></td></tr></table></figure><p>如果初始化中涉及到函数调用，那么在下列情况也会发生<em>拷贝初始化</em>：</p><ul><li>将一个对象作为实参传递给一个非引用类型的形参</li><li>从一个返回值类型为非引用类型的函数返回一个对象</li><li>花括号列表初始化一个数组中的元素或者一个聚合类中的成员</li></ul><blockquote><p>如果一个类满足下列条件，则称为聚合类：</p><ul><li>所有成员都是 <code>public</code>的</li><li>没有定义任何构造函数</li><li>没有类内初始值</li><li>没有基类，也没有 <code>virtual</code> 函数</li></ul><p>对于聚合类，可以使用花括号括起来的成员初始值列表进行初始化：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; struct data &#123;</span><br><span class="line">&gt;   int ival;</span><br><span class="line">&gt;   string s;</span><br><span class="line">&gt; &#125;;</span><br><span class="line">&gt; data val = &#123; 1, &quot;string&quot; &#125;;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>其中初始顺序必须和申明顺序一致，如果初始列表中的元素个数少于类成员的个数，则靠后的成员被值初始化。且初始化列表中的元素个数不能多于成员数量。</p></blockquote><p>需要注意的是，标准允许编译器在初始化过程中跳过<em>拷贝/移动构造函数</em>直接创建对象。</p><h2 id="拷贝赋值运算符"><a href="#拷贝赋值运算符" class="headerlink" title="拷贝赋值运算符"></a>拷贝赋值运算符</h2><p><em>拷贝赋值运算符</em>接受一个与其所在类型相同的参数。如果没有定义其<em>拷贝赋值运算符</em>，编译器会为它生成一个<em>合成拷贝赋值运算符(synthesized copy assignment operator)</em>。</p><h2 id="安全的拷贝赋值运算符"><a href="#安全的拷贝赋值运算符" class="headerlink" title="安全的拷贝赋值运算符"></a>安全的拷贝赋值运算符</h2><p>编写拷贝赋值运算符时，有两点需要注意：1、自我拷贝 2、异常安全。下面精心构造的例子可以说明这些问题：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class Bitmap &#123; &#125;;</span><br><span class="line">class Widget &#123;</span><br><span class="line">  Bitmap *pb;</span><br><span class="line">  </span><br><span class="line">public:</span><br><span class="line">  Widget(Bitmap *p) : pb(p) &#123;&#125;</span><br><span class="line">  </span><br><span class="line">  Widget &amp;operator = (const Widget &amp;rhs) &#123;</span><br><span class="line">    delete pb;</span><br><span class="line">    pb = new Bitmap(*rhs.pb);</span><br><span class="line">    return *this;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>假设有某用户创建一个对象后对自己进行赋值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Bitmap *b;</span><br><span class="line">Widget w(b);</span><br><span class="line">w = w;  // error;</span><br></pre></td></tr></table></figure><p>或者编写 <code>Bitmap</code> 的设计者在内存不足时抛出异常：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class Bitmap &#123;</span><br><span class="line">public:</span><br><span class="line">  Bitmap(const Bitmap&amp; obj) &#123;</span><br><span class="line">    throw ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>那么在 <code>new Bitmap</code> 操作失败，而原来的备份也被删除。</p><p>简单的解决方案是将<em>拷贝复制运算符</em>实现代码进行如下修改：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Widget &amp;operator = (const Widget &amp;rhs) &#123;</span><br><span class="line">  Bitmap *old = pb;</span><br><span class="line">  pb = new Bitmap(*rhs.pb);</span><br><span class="line">  delete old;</span><br><span class="line">  return *this;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样的代码首先保证了异常安全，并且顺带解决了自我赋值(拷贝了一份原来的数据)。另一个替代方案是 <em>copy and swap</em> 技术：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Widget &amp;operator = (Widget rhs) &#123;</span><br><span class="line">  this-&gt;swap(rhs);</span><br><span class="line">  return *this;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中假设 <code>swap</code> 函数不会抛出异常。这种方法利用以下依据：</p><ul><li>某 class 的 copy assignment 操作可能被申明为 “以 by value 方式接受实参”</li><li>以 by value 方式传递东西会造成一件副本</li></ul><p>这种方法将 “copying” 动作从函数本体内移到 <em>函数参数构造阶段</em>。</p><h2 id="对象移动"><a href="#对象移动" class="headerlink" title="对象移动"></a>对象移动</h2><p>对于某些场景，比如 <code>vector&lt;string&gt;</code> 增长时，将旧元素拷贝到新内存是不必要的，而某些对象如 IO 类或 <code>unique_ptr</code> 则不能拷贝。为了解决这些问题，新标准引入了移动语义 - <em>右值引用(rvalue reference)</em>。</p><h2 id="右值引用"><a href="#右值引用" class="headerlink" title="右值引用"></a>右值引用</h2><p>所谓右值引用就是必须绑定到右值的引用，类似于任何引用，一个右值引用也不过是某个对象的另一个名字。左值和右值都是针对表达式而言的，左值是指表达式结束后依然存在的持久对象，右值是指表达式结束时就不再存在的临时对象。一个区分左值与右值的便捷方法是：看能不能对表达式取地址，如果能，则为左值，否则为右值。左值有持久状态，而右值要么是字面常量，要么是表达式求值过程中创建的临时对象，所以使用右值引用可以自由的接管所引用对象的资源。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int i = 1;</span><br><span class="line">int &amp;&amp;rr = i * 2;</span><br></pre></td></tr></table></figure><p>基于可以看作是将 <code>i * 2</code> 产生的临时变量绑定到 <code>rr</code> 上。而这里的 <code>rr</code> 是右值引用，但其却是一个变量，对于这种情况，标准中提到：</p><blockquote><p>Things that are declared as rvalue reference can be lvalues or rvalues. The distinguishing criterion is: if it has a name, then it is an lvalue. Otherwise, it is an rvalue.</p></blockquote><p>所以， <code>rr</code> 也是一个左值。这里也就是所谓的绑定到右值的引用。理解右值引用是理解移动语义的基础。</p><h2 id="移动构造函数和移动赋值操作符"><a href="#移动构造函数和移动赋值操作符" class="headerlink" title="移动构造函数和移动赋值操作符"></a>移动构造函数和移动赋值操作符</h2><p>类似于<em>拷贝构造函数</em>，<em>移动构造函数</em>第一个参数必须是该类型的一个右值引用，其余参数都必须有默认实参。而<em>移动赋值操作符</em>则是接受本类型的右值。需要注意的是使用移动语义后必须保证源对象处于销毁无害的状态，即该对象拥有的资源转移给了赋值对象。所以一般的移动构造函数都会将原对象的指针等设置为 <code>nullptr</code>。</p><p>在移动操作中允许抛出异常，但是通常不会抛出异常。而标准容器库能对异常发生时其自身的行为提供保障，所以如果元素的移动构造函数没有 <code>noexcept</code> 修饰时，容器库在从新分配内存时会选择<em>拷贝构造函数</em>而不是<em>移动构造函数</em>。因此，如无必要，移动构造函数应当加 <code>noexcept</code> 修饰。</p><p>需要注意到的是合成版本的<em>移动构造函数</em>和<em>移动赋值操作符</em>合成条件比较多，这里没有涉及。如果一个类定义了右值构造，那么我们可以通过给它传递右值参数调用其移动构造函数。如果想要对左值也进行移动，这需要进行转义。这种转义可以看作 <code>static_cast&lt;T&amp;&amp;&gt;(lvalue);</code>，在标准中由 <code>std::move(lvaule)</code> 提供支持。值得一提的是，被转化的左值，其生命期并没有随着左右值的转化而改变。也就是说，其实仍然是左值，只是变相调用了移动语义。这也是前面之所以强调的<em>必须保证源对象处于销毁无害的状态</em>。所以调用 <code>move</code> 就意味着承诺：*除了对 <code>lvalue</code> 进行赋值或者销毁它以外，我们将不在使用它`。</p><h2 id="成员函数与右值"><a href="#成员函数与右值" class="headerlink" title="成员函数与右值"></a>成员函数与右值</h2><p>与 <code>const</code> 修饰的成员函数一致，我们可以在参数列表后放置一个<em>引用限定符(reference qualifier)</em>来指定调用者是左值还是右值。引用限定符可以是 &amp; 或 &amp;&amp;，分别指出 <code>this</code> 可以指向一个左值或者右值。如果一个函数已经有 <code>const</code> 修饰，那么引用修饰必须出现在其后面的位置。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>通过以上内容可以看到，C++的许多灵活性来自于其强大的类型系统和精巧的设计理念。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;C++ 提供了5种特殊的成员函数来控制对象的拷贝、移动、赋值和销毁，统称为&lt;em&gt;拷贝控制操作(copy control)&lt;/em&gt;。这几个函数分别是&lt;em&gt;拷贝构造函数(copy constructor)&lt;/em&gt;、&lt;em&gt;拷贝赋值运算符(copy assignment operator)&lt;/em&gt;、&lt;em&gt;移动构造函数(move constructor)&lt;/em&gt;、&lt;em&gt;移动复制运算符(move assignment operator)&lt;/em&gt;和&lt;em&gt;析构函数(destructor)&lt;/em&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="C++" scheme="http://www.hashcoding.net/categories/C/"/>
    
    
      <category term="C++" scheme="http://www.hashcoding.net/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>七、function as first class</title>
    <link href="http://www.hashcoding.net/2015/12/24/%E4%B8%83%E3%80%81function-as-first-class/"/>
    <id>http://www.hashcoding.net/2015/12/24/七、function-as-first-class/</id>
    <published>2015-12-24T13:20:49.000Z</published>
    <updated>2017-06-12T12:01:30.760Z</updated>
    
    <content type="html"><![CDATA[<p>当设计一门语言时，函数部分设计五花八门，各种设计所对应的实现方式也各有千秋。</p><a id="more"></a><h2 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h2><p><em>函数式编程</em> 是一种编程范式(programming paradigm)，也就是如何写程序的方法论。它将计算机运算看作是数学中函数的计算，并且避免了状态以及变量的概念。在函数式编程语言中，函数跟其他数据类型一样，处于平等地位，可以赋值给其他变量，也可以作为参数，传入另一个函数，或者作为别的函数的返回值。且函数中没有副作用(函数内部与外部互动，如内部修改全局变量值)，因此函数只返回新的值，不修改系统变量。在输入参数相同的情况下，得到的结果总是相同的。</p><h2 id="C语言中的函数"><a href="#C语言中的函数" class="headerlink" title="C语言中的函数"></a>C语言中的函数</h2><p>C语言中的函数并不是严格意义上的函数，它具有副作用。这种函数的实现方式十分简单，对于函数体部分，生成相关代码，保存在静态区域即可。对于函数调用部分，可以将参数压入栈，然后调用。</p><p>比如 <code>printf(1, 2, 2);</code> 可以翻译成如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">push 2</span><br><span class="line">push 2</span><br><span class="line">push 1</span><br><span class="line">call printf</span><br></pre></td></tr></table></figure><h2 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h2><p>我们把接受一个或多个函数作为参数，或者能返回函数的函数叫做高阶函数。在C语言中可以通过函数指针进行传递函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">typedef void(*func)();</span><br><span class="line">void test() &#123;&#125;</span><br><span class="line">void call(func f) &#123;</span><br><span class="line">    f();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样是将函数地址传递给调用函数，可以用汇编简要解释：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">push offset _test</span><br><span class="line">call _call</span><br><span class="line"></span><br><span class="line">; in call</span><br><span class="line">call [ebp-4]</span><br></pre></td></tr></table></figure><h2 id="嵌套函数"><a href="#嵌套函数" class="headerlink" title="嵌套函数"></a>嵌套函数</h2><p>pascal 之类的语言就支持嵌套函数，所谓嵌套，就是可以在函数内部定义函数。C语言并不支持嵌套函数，我们假设其支持嵌套函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">void global_func() &#123;</span><br><span class="line">    int a = 20;</span><br><span class="line">    void nest_func() &#123;</span><br><span class="line">        a = 10;</span><br><span class="line">    &#125;</span><br><span class="line">    void nest_func1() &#123;</span><br><span class="line">        int a = 40;</span><br><span class="line">        void test() &#123;</span><br><span class="line">            nest_func();</span><br><span class="line">            a = 30;</span><br><span class="line">        &#125;</span><br><span class="line">        a == 40;</span><br><span class="line">        test();</span><br><span class="line">        a == 30;</span><br><span class="line">    &#125;</span><br><span class="line">    nest_func();</span><br><span class="line">    a == 10;</span><br><span class="line">    a = 20;</span><br><span class="line">    nest_func1();</span><br><span class="line">    a == 10;</span><br><span class="line">&#125;</span><br><span class="line">nest_func(); /* error */</span><br></pre></td></tr></table></figure><p>可以看到的是，嵌套定义函数可以访问外部作用域，并产生副作用。不同作用域相互之间屏蔽。嵌套作用域给函数实现带来了不少麻烦，比如在查找变量所在作用域时，需要沿着栈帧回溯。如上诉例子，<code>test</code> 在查找变量 <code>a</code> 时，应该找到 <code>nest_func1</code> 中的变量 <code>a</code> ，而 <code>test</code> 中调用的 <code>nest_func</code> 所查找的 <code>a</code> 却应该是 <code>global_func</code> 中的 <code>a</code>。(这里假定使用的是 <em>词法作用域</em>， 而不是 <em>动态作用域</em>)这样就不能直接使用原有的向上回溯查找变量的方法，不过这有相应的解决办法。对于每个函数的帧，我们加入一个访问链指针，其指向当前调用栈中，该函数定义所在的外层函数最近一次调用的帧。比如对于上面的例子，在调用 <code>nest_func1()</code> 中的 <code>test()</code> 时，<code>test</code> 中的指针应当指向其直接上层 <code>nest_func1</code> , 但是对于 <code>test()</code> 调用中的函数 <code>nest_func</code> ，其上层不应当是 <code>test()</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">top -&gt;  nest_func()</span><br><span class="line">        test()</span><br><span class="line">        nest_func1()</span><br><span class="line">        global_func()</span><br><span class="line">bottom -&gt;</span><br><span class="line">简单的函数调用栈</span><br></pre></td></tr></table></figure><p>这里 <code>nest_func</code> 访问链应当指向最上面的 <code>global_func()</code>。这样，函数在查找变量时，就可以通过访问链回溯而不是调用栈回溯。关于访问链的具体实现，可以参考龙紫书。还需要注意的是如果嵌套函数中有引用外层变量，那么是无法将内层函数当作返回值返回，所以这里需要引入闭包的概念。</p><h2 id="柯里化函数"><a href="#柯里化函数" class="headerlink" title="柯里化函数"></a>柯里化函数</h2><p>在闭包之前需要了解柯里化函数(Currying)，简单来说柯里化函数就是函数生成的函数，比如以下C++代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int func(int a, int b) &#123;</span><br><span class="line">    return a + b;</span><br><span class="line">&#125;</span><br><span class="line">auto call = std::bind(func, 1, _1);</span><br><span class="line">call(1);</span><br></pre></td></tr></table></figure><p>在这里我们传递给函数 <code>func</code> 一个参数，然后生成一个保存了当前状态的函数，然后再后续补完全部参数时调用，这就是一个简单的柯里化函数应用。现在来考虑如何实现柯里化函数，柯里化函数需要保存当前已有的状态，那么我们对每一个函数包括普通函数定义一个 frame ，在每一次调用时，检测参数数目，如果满足所有参数都有对应的实参，那么就调用，否则生成一个新函数，将原有的 frame 拷贝一份，并加入新的参数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if (args.size() == params.size())</span><br><span class="line">    call function;</span><br><span class="line">else </span><br><span class="line">    insert new function</span><br><span class="line">    copy frame to new frame and insert params</span><br></pre></td></tr></table></figure><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p>闭包是指可以包含自由(未绑定到特定对象)变量的代码块，这些变量不是在这个代码块内或者任何全局上下文中定义的，而是在定义代码块的环境中定义。可以把闭包当作嵌套的高阶柯里化函数，嵌套对应着代码块或全局上下文，柯里化函数则是保存当前上下文状态，高阶使得函数可以通过参数或返回值进行传递。对于闭包有多种实现方式，这里紧紧讨论一种非常 native 的实现方式。首先需要对闭包中访问的自由变量进行捕获，然后隐式地作用参数传递给闭包体，生成新函数返回。这样变换以后，新生成的函数并不依赖于其父作用域，使得函数可以在任意地方调用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(define (func x) </span><br><span class="line">    (lambda (a) （+ a x))</span><br><span class="line">    </span><br><span class="line">可以改为</span><br><span class="line"></span><br><span class="line">(define (func x)</span><br><span class="line">    ((define (nest_func x a)</span><br><span class="line">        (+ a x)) x))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当设计一门语言时，函数部分设计五花八门，各种设计所对应的实现方式也各有千秋。&lt;/p&gt;
    
    </summary>
    
      <category term="编译器实现" scheme="http://www.hashcoding.net/categories/%E7%BC%96%E8%AF%91%E5%99%A8%E5%AE%9E%E7%8E%B0/"/>
    
    
      <category term="Compile" scheme="http://www.hashcoding.net/tags/Compile/"/>
    
  </entry>
  
  <entry>
    <title>Clang for windows</title>
    <link href="http://www.hashcoding.net/2015/12/23/Clang-for-windows/"/>
    <id>http://www.hashcoding.net/2015/12/23/Clang-for-windows/</id>
    <published>2015-12-23T13:27:06.000Z</published>
    <updated>2015-12-24T13:19:44.306Z</updated>
    
    <content type="html"><![CDATA[<p>G++ 编译产生的错误信息非常不人性化，所以准备转到 Clang，在这中途折腾了许久，仅仅是为了将 Clang 安装在 windows 上。所以在这里记录下该过程，以后再遇到相关问题可以快速解决。</p><a id="more"></a><h2 id="Clang"><a href="#Clang" class="headerlink" title="Clang"></a>Clang</h2><p>Clang 是一个 C 语言、C++、Objective-C、Objective-C++ 语言的轻量级编译器，相对于 GCC ，其编译速度更快，编译产出错误提示更友好。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>这里介绍的安装方法需要下面的工具，CMake、GIT、VisualStudio。有关于 CMake 的介绍，可以看<a href="http://www.hahack.com/codes/cmake/" target="_blank" rel="noopener">CMake入门</a>。git 是一个免费的、分布式的版本控制工具，或是一个强调了速度快的源代码管理工具。Git最初被Linus Torvalds开发出来用于管理Linux内核的开发。关于 git 入门教程可以参考<a href="http://www.bootcss.com/p/git-guide/" target="_blank" rel="noopener">git快速入门</a>。</p><p>首先是下载 Clang 的源代码，Clang 编译需要依赖 llvm。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mkdir llvm</span><br><span class="line">cd llvm</span><br><span class="line">git clone http://llvm.org/git/llvm.git</span><br><span class="line">mv llvm source</span><br><span class="line">cd source/tools</span><br><span class="line">git clone http://llvm.org/git/clang.git</span><br></pre></td></tr></table></figure><p>现在使用CMake将其转换为VS工程。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd ../../</span><br><span class="line">mkdir debug+asserts</span><br><span class="line">cd debug+asserts</span><br><span class="line">cmake -G &quot;Visual Studio 14&quot; ../source -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DLLVM_ENABLE_ASSERTIONS=ON -DCMAKE_BUILD_TYPE=RelWithDebInfo</span><br></pre></td></tr></table></figure><p>这样，等待相关信息准备完毕后，就会在当前目录下就会生成 VS 工程。这里我使用的是 VS2015 ，你在自己使用的时候，需要针对性的修改一下。</p><p>现在可以打开进行编译，普通的机器编译过程比较长.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;G++ 编译产生的错误信息非常不人性化，所以准备转到 Clang，在这中途折腾了许久，仅仅是为了将 Clang 安装在 windows 上。所以在这里记录下该过程，以后再遇到相关问题可以快速解决。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Compile" scheme="http://www.hashcoding.net/tags/Compile/"/>
    
  </entry>
  
  <entry>
    <title>SFINAE、std::declval杂谈</title>
    <link href="http://www.hashcoding.net/2015/12/21/SFINAE%E3%80%81std-declval%E6%9D%82%E8%B0%88/"/>
    <id>http://www.hashcoding.net/2015/12/21/SFINAE、std-declval杂谈/</id>
    <published>2015-12-21T13:16:32.000Z</published>
    <updated>2015-12-22T11:41:38.236Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在<a href="http://purecpp.org/" target="_blank" rel="noopener">知行一</a>社区上看到一篇文章介绍设计 UnitTest 的文章。在看其源代码时，发现有处代码并不是很懂。通过查找相关资料，解决了该问题，记录在此。</p><a id="more"></a><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>作者在谈到其设计目标时，提供了一些用例，其中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">TEST_REQUIRE(condition, &quot;这样&quot;, &quot;可以&quot;, &quot;打印&quot;, &quot;很多&quot;， &quot;行&quot;); </span><br><span class="line">TEST_CHECK(condigion, []&#123; /** 这里可以做些事 */ &#125;);</span><br><span class="line">TEST_REQUIRE(condition, logger, args_to_logger);    /**&lt; logger can be any callable object */</span><br></pre></td></tr></table></figure><p>这样的用法让我或多或少有些疑惑。于是看了其实现，其中关键问题部分代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">template &lt;typename F, typename... Args, typename = decltype(std::declval&lt;F&gt;()(std::declval&lt;Args&gt;()...))&gt;</span><br><span class="line">void do_check_failed(F&amp;&amp; f, Args&amp;&amp;... args)</span><br><span class="line">&#123;</span><br><span class="line">    f(std::forward&lt;Args&gt;(args)...);    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template &lt;typename... Msgs&gt;</span><br><span class="line">void do_check_failed(Msgs&amp;&amp;... msgs)</span><br><span class="line">&#123;</span><br><span class="line">    std::initializer_list&lt;int&gt;&#123;(std::cout &lt;&lt; msgs &lt;&lt; std::endl, 0)...&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这两个函数实现了传递多种参数的方式。其中令我疑惑的部分在于<code>typename = decltype(std::declval&lt;F&gt;()(std::declval&lt;Args&gt;()...))</code>部分的实现。现在让我一步一步展开。</p><h2 id="declval"><a href="#declval" class="headerlink" title="declval"></a>declval</h2><p>declval主要用于配合decltype在模板形参构造函数不明确的情况下（也就是不需要通过构造函数构造变量）来使用模板形参的成员。在进一步探索前，先看一下declval的定义：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">template&lt;class T&gt;</span><br><span class="line">typename add_rvalue_reference&lt;T&gt;::type declval() noexcept;  // as unevaluated operand</span><br></pre></td></tr></table></figure><p>该函数并没有完整定义，所以只能在未发生函数调用(unevaluated)的上下文环境中使用。这正好就是用于配合decltype(decltype不求值)。假设有这么一个场景，你需要得到某类型中某函数返回值的类型，然而该函数并没有构造函数:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">struct Default &#123;</span><br><span class="line">    Default(const Default &amp;d) &#123;&#125;</span><br><span class="line">    int foo() const &#123; return 1; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    decltype(Default.foo()) n1 = 1;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样的代码无法通过编译。如果加上declval：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int main() &#123;</span><br><span class="line">    decltype(std::declval&lt;Default&gt;().foo()) n1 = 1;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就能顺利通过编译。当然，更多的使用场景是出现在模板的使用中。</p><h2 id="SFINAE"><a href="#SFINAE" class="headerlink" title="SFINAE"></a>SFINAE</h2><p>SFINAE(Subsitiution Failure Is Not an Error!)可以理解为匹配失败不是错误，更严格的说是参数匹配失败不是一个编译时错误。考虑下面的应用场景，我们定义一个模板函数<code>add</code>，它只为数值类型提供服务：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">template&lt;typename T&gt;</span><br><span class="line">T add(T &amp;t1, T &amp;t2) &#123;</span><br><span class="line">    if (T is arithmetic) </span><br><span class="line">        return t1 + t2;</span><br><span class="line">    else </span><br><span class="line">        // error</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>C++并没有提供反射机制，想实现这样的操作需要开动我们的脑筋。让我们看一下下面的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">template&lt;typename T, bool B&gt; struct enable_if_;</span><br><span class="line">template&lt;typename T&gt; struct is_arithmetic_;</span><br><span class="line"></span><br><span class="line">template&lt;typename T, bool B&gt;</span><br><span class="line">struct enable_if_ &#123;</span><br><span class="line">    typedef T type;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">template&lt;typename T&gt;</span><br><span class="line">struct enable_if_&lt;T, false&gt; &#123;&#125;;</span><br><span class="line"></span><br><span class="line">template&lt;typename T&gt;</span><br><span class="line">struct is_arithmetic_ &#123; </span><br><span class="line">    enum &#123; value = false &#125;; </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">template&lt;&gt;</span><br><span class="line">struct is_arithmetic_&lt;int&gt; &#123; </span><br><span class="line">    enum &#123; value = true &#125;; </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">template&lt;typename T&gt;</span><br><span class="line">typename enable_if_&lt;T, is_arithmetic_&lt;T&gt;::value&gt;::type add(T &amp;t1, T &amp;t2) &#123;</span><br><span class="line">    return t1 + t2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    int a = 1, b = 2;</span><br><span class="line">    cout &lt;&lt; &quot;add(a, b) = &quot; &lt;&lt; add(a, b) &lt;&lt; endl;</span><br><span class="line">    // add(&quot;string&quot;, &quot;string&quot;); error: no matching function for call to &apos;add(const char [7], const char [7])&apos;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在实现<code>add</code>函数时，通过<code>is_arithmetic_</code>判断是否可以计算，如果可以，则允许该次类型推导，否则拒绝并报错。<code>enable_if_</code>和<code>is_arithmetic_</code>的实现都使用了模板特例化，对于<code>is_arithmetic</code>，我们认为的将所有可以计算的实例化，将<code>value</code>的值改为<code>true</code>（这里仅作演示，只对int进行实例化）。对于<code>enable_if_</code>，能够成功推导的，则保存其原始类型，否则不保存。这样，对于<code>add(&quot;string&quot;, &quot;string&quot;);</code>在编译时，编译器通过推导出<code>is_arithmetic_::value == false</code>，那么就选择特例化版本，而特例化版本的<code>enable_if_</code>中并没有<code>type</code>类型，所以该次推导失败。而<code>add(a, b);</code>部分正好相反，成功推导。</p><h2 id="原始问题"><a href="#原始问题" class="headerlink" title="原始问题"></a>原始问题</h2><p>现在回到最初的问题当中，当定义一个模板参数时，可以为之匿名：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">template&lt;typename T, typename = void&gt;</span><br><span class="line">void foo(...) &#123;&#125;</span><br></pre></td></tr></table></figure><p>这样，对于<code>typename = decltype(std::declval&lt;F&gt;()(std::declval&lt;Args&gt;()...))</code>的作用就非常清楚了。如果传入参数为函数，那么就会选择该实例，否则选择另一实例。如果不太明白还可以看看下面的例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">//</span><br><span class="line">// 让*.equal_range支持range-based循环</span><br><span class="line">//</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;map&gt;</span><br><span class="line"></span><br><span class="line">namespace std</span><br><span class="line">&#123;</span><br><span class="line">    template&lt;typename Iter, typename = typename iterator_traits&lt;Iter&gt;::iterator_category&gt;</span><br><span class="line">    Iter begin(pair&lt;Iter, Iter&gt; const &amp;p)</span><br><span class="line">    &#123;</span><br><span class="line">        return p.first;</span><br><span class="line">    &#125;</span><br><span class="line">    template&lt;typename Iter, typename = typename iterator_traits&lt;Iter&gt;::iterator_category&gt;</span><br><span class="line">    Iter end(pair&lt;Iter, Iter&gt; const &amp;p)</span><br><span class="line">    &#123;</span><br><span class="line">        return p.second;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    std::multimap&lt;int, int&gt; mm &#123; &#123;1, 1&#125;, &#123;1, 2&#125;, &#123;2, 1&#125;, &#123;2, 2&#125; &#125;;</span><br><span class="line">    for(auto &amp;v : mm.equal_range(1)) &#123;</span><br><span class="line">        std::cout &lt;&lt; v.first &lt;&lt; &quot; -&gt; &quot; &lt;&lt; v.second &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该代码摘抄自stackoverflow。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在&lt;a href=&quot;http://purecpp.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;知行一&lt;/a&gt;社区上看到一篇文章介绍设计 UnitTest 的文章。在看其源代码时，发现有处代码并不是很懂。通过查找相关资料，解决了该问题，记录在此。&lt;/p&gt;
    
    </summary>
    
    
      <category term="C++" scheme="http://www.hashcoding.net/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++:构造函数异常</title>
    <link href="http://www.hashcoding.net/2015/12/12/CPlusPlus%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E5%BC%82%E5%B8%B8/"/>
    <id>http://www.hashcoding.net/2015/12/12/CPlusPlus构造函数异常/</id>
    <published>2015-12-12T13:51:34.000Z</published>
    <updated>2017-07-10T04:55:13.839Z</updated>
    
    <content type="html"><![CDATA[<p>C++语言认为：一个对象在出生的过程中发生异常问题，那这个对象就是一个没有生命的怪胎。既然它不是一个完整的对象，就根本不存在析构或释放的说法。因此，C++在执行构造函数过程中产生异常时，是不会调用对象的析构函数的，而仅仅清理和释放产生异常前的那些C++管理的变量空间等，之后就把异常抛给程序员处理。所以构造函数失败时，说明构造出的对象不是一个完整的对象，如果严重，可能要直接终止程序，或通过修正改参数等重新构造，总而言之，要在构造函数内部把问题解决。</p><a id="more"></a><p>对于C++语言来说，由于构造函数产生异常时不会调用对应的析构函数，那么在构造函数里发生异常前的代码所创建的其他东西就不能被析构函数内的相关释放代码所释放。例如：</p><pre><code>class throw_ {public:    throw_() { ... }};class Object {public:    Object() data(new int[100]) {        throw_ t = throw_();    }    ~Object() {        delete []data;    }private:    int *data;};</code></pre><p><code>throw_</code>类的构造函数没有承若不抛出异常，所以这段代码中<code>data</code>指向的内存空间不能得到释放。除此之外，还有下面这种情况也会抛出异常:</p><pre><code>class Object {public:    Object() {        for (size_t i = 0; i &lt; 100; ++i) {            data[i] = nullptr;        }        //...        for (size_t i = 0; i &lt; 100; ++i) {            data[i] = new int[1024 * 1024 * 1024];        }    }    ~Object() {        for (size_t i = 0; i &lt; 100; ++i) {            delete []data[i];        }    }private:    int *data[100];};</code></pre><p>如果在申请空间的时候抛出：bad_alloc 异常，那么前面申请的内存将得不到释放，造成内存泄漏。这样可以改写如下：</p><pre><code>try {    throw_ t = throw_();} catch (Exception &amp;e) {    delete []data;    throw e;}</code></pre><p>但是这么做只会使你的代码看上去混乱,而且会降低效率,这也是一直以来异常名声不大好的原因之一. 请借助于RAII技术来完成这样的工作:</p><pre><code>class throw_ {public:    throw_() { ... }};class Object {public:    Object() data(make_shared(new int[100])) {        throw_ t = throw_();    }    ~Object() { }private:    shared_ptr&lt;int&gt; data;};</code></pre><p>能这样做的原因是构造函数抛出异常时，已经构造的成员会逆序析构。</p><p>最后，其他人总结：</p><ol><li>C++中通知对象构造失败的唯一方法那就是在构造函数中抛出异常；</li><li>构造函数中抛出异常将导致对象的析构函数不被执行；</li><li>当对象发生部分构造时，已经构造完毕的子对象将会逆序地被析构；</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;C++语言认为：一个对象在出生的过程中发生异常问题，那这个对象就是一个没有生命的怪胎。既然它不是一个完整的对象，就根本不存在析构或释放的说法。因此，C++在执行构造函数过程中产生异常时，是不会调用对象的析构函数的，而仅仅清理和释放产生异常前的那些C++管理的变量空间等，之后就把异常抛给程序员处理。所以构造函数失败时，说明构造出的对象不是一个完整的对象，如果严重，可能要直接终止程序，或通过修正改参数等重新构造，总而言之，要在构造函数内部把问题解决。&lt;/p&gt;
    
    </summary>
    
      <category term="C++" scheme="http://www.hashcoding.net/categories/C/"/>
    
    
      <category term="C++" scheme="http://www.hashcoding.net/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>六、中间代码(IR)</title>
    <link href="http://www.hashcoding.net/2015/12/10/%E5%85%AD%E3%80%81%E4%B8%AD%E9%97%B4%E4%BB%A3%E7%A0%81-IR/"/>
    <id>http://www.hashcoding.net/2015/12/10/六、中间代码-IR/</id>
    <published>2015-12-10T03:52:14.000Z</published>
    <updated>2017-06-12T12:01:27.350Z</updated>
    
    <content type="html"><![CDATA[<h2 id="中间代码"><a href="#中间代码" class="headerlink" title="中间代码"></a>中间代码</h2><h3 id="中间代码的地位和作用"><a href="#中间代码的地位和作用" class="headerlink" title="中间代码的地位和作用"></a>中间代码的地位和作用</h3><p>中间代码的作用是可使程序的结构在逻辑上更为简单明确，特别是可使目标代码的优化比较容易实现中间代码，即为中间语言程序，中间语言的复杂性介于源程序语言和机器语言之间。</p><a id="more"></a><h3 id="中间代码形式"><a href="#中间代码形式" class="headerlink" title="中间代码形式"></a>中间代码形式</h3><p>1、树和有向无环图(DAG) 其优点是高层表示，使用与源程序代码。<br>2、三地址码 底层表示，接近于目标机器。<br>3、控制流图(CFG) 更精细的三地址码，程序的图状表示，适合做程序分析、程序优化。<br>4、静态单赋值形式(SSA) 更佳精细的控制流图，同时编码控制流信息和数据流信息。<br>5、连续传递风格(CPS) 多用于函数式编程中，更一般的SSA。可以表达跨模块、函数的控制流。</p><p>程序优化和代码优化正是基于中间代码进行的。不同的中间代码在不同优化方面各有优劣，所以在做优化时常常需要在多种IR中进行转换。</p><h3 id="DAG"><a href="#DAG" class="headerlink" title="DAG"></a>DAG</h3><p>DAG和抽象语法树的不同之处在于，如果DAG中的一个节点N表示一个公共表达式，则N可能有多个父节点。因此DAG不仅更简洁的表示了表达式，而且可以为最终生成的表达式的高效代码提供重要的信息。</p><h4 id="DAG构造"><a href="#DAG构造" class="headerlink" title="DAG构造"></a>DAG构造</h4><p>在处理表达式部分抽象语法树时，我们把所有节点放入一个数组中，父节点通过数组索引找到其子节点。这种就称为该表达式的值编码。这个时候，就可以改变语法制导翻译时的代码，使得在为表达式创建节点时，先在数组中寻找是否有指定的<code>&lt;op, l, r&gt;</code>节点，然后决定是否创建。需要注意到是，每次定位一个节点都需要搜索整个数组，这个开销是非常大的，当一个数组中存放了整个程序所用的表达式时更是如此。更高效的办法是使用散列表，将节点放入若干桶中，每个桶通常只包含少量的节点。要给DAG中的节点构造散列表，首先需要建立散列函数(hash function)h。这个函数为形如<code>&lt;op, l, r&gt;</code>的三元组计算桶的索引。</p><h3 id="三地址码"><a href="#三地址码" class="headerlink" title="三地址码"></a>三地址码</h3><p>三地址码拆分了多运算符算数表达式以及控制流语句嵌套的结构，所以适用于目标代码的生成和优化。其基于两个基本概念：地址和指令。地址描述了指令所在的位置信息，指令描述了该表达式进行的运算。</p><p>下面是常见的三地址指令形式：</p><ol><li>形如<code>x = y op z</code>的赋值指令；</li><li>单目运算<code>x = op y</code>；</li><li>赋值指令<code>x = y</code>；</li><li>无条件转移指令<code>goto L</code>, 其中<code>L</code>表示下一部将要执行的指令是带有标号<code>L</code>的三地址指令；</li><li>条件转移指令<code>if x goto L</code>和<code>iffalse x goto L</code>；</li><li>形如<code>if x relop y goto L</code>的条件转移指令。它对<code>x</code>和<code>y</code>应用于一个关系运算符(&lt;,&lt;=,&gt;,&gt;=,!=,==)，然后根据结果跳转；</li><li>过程调用和返回系列指令，<code>param x</code>进行参数传递，<code>call p, n</code>和<code>y = call p, n</code>表示进行过程调用(其中n表示参数数目)，<code>return x</code>表示返回操作<code>y</code>是返回值；</li><li>带下标的复制指令<code>x = y[i]</code>和<code>y[i] = x</code>；</li><li>形如<code>x = &amp;y</code>、<code>x = *y</code>和<code>*x = y</code>的指令及指针赋值指令；</li></ol><p>表示三地址码的表示方式有多种，如果需要有变量这个概念，则可以用四元组表示。</p><h4 id="四元组表示"><a href="#四元组表示" class="headerlink" title="四元组表示"></a>四元组表示</h4><p>一个四元式(quadruple)有四个字段，分别称为：op、arg1、arg2、result。这种方式表示的三地址码再做寄存器分配时会更优一点。该方法在描述三地址码是存在一些特例：</p><ol><li>形如<code>x = -y</code>的单目运算指令和复制指令都不使用arg2；</li><li><code>param x</code>这类指令既不是用arg2，也不使用<code>result</code>；</li><li>条件转移指令将目标标号放入result中；</li></ol><p>如果不需要变量概念，直接使用运算结果隐式地表示临时变量，则可以使用三元组表示。</p><h4 id="三元组表示"><a href="#三元组表示" class="headerlink" title="三元组表示"></a>三元组表示</h4><p>三元式(triple)只有三个字段，即没有<code>result</code>，而使用其位置来表示它的结果。也就是：</p><pre><code>对于 1 x = y op z2 a = x op 1可以写成1 y op z2 (1) op 1其中(1)表示该位置的值为位于地址1的指令的结果</code></pre><p>在高层优化时，使用这种方式会比较简单。需要注意的是，在优化编译器时，由于指令的位置常常会发生变化，四元式相对于三元式的优势就体现出来了。使用四元式时，可以不需要修改。使用三元式时需要修改所有引用其位置的指令。当然可以使用 <em>间接三元式</em> 来解决这个问题。间接三元式包含了一个指向三元式的指针列表，而不是三元式序列本身。这样，在修改时，只需要修改指针指向位置即可。</p><h3 id="控制流图"><a href="#控制流图" class="headerlink" title="控制流图"></a>控制流图</h3><p>三地址码结构并不明显，在控制流优化、数据流分析中并不方便。而控制流图则利于做控制流优化和数据流分析。在控制流图中，一个语句序列，能够从头执行到尾（即跳转指令只能出现在末尾）被称为基本块。而控制流图就是以基本块为节点，跳转信息为边的图。</p><h4 id="控制流图构造方法"><a href="#控制流图构造方法" class="headerlink" title="控制流图构造方法"></a>控制流图构造方法</h4><p>首先找出基本块，然后建立连接。基本块算法如下：</p><ol><li>找基本块入口源代码的首行或者转移代码（有条件和无条件）或者转移代码的下一行</li><li>基本块构造：通过入口点开始，将其组成各自的基本块。基本块语句序列的特征：从不包含它本身的进入点到其他进入点或者到某条转移语句或者到某条停止语句</li><li>如果有语句不在任一基本块中，那么它为”死代码“，删除</li></ol><p>然后就是控制流图构造。如果在一个有序代码中，基本块B2跟在B1后，那么产生一个由B1到B2的有向边。</p><ol><li>有跳转点。这个点从B1的结束点跳到B2的开始点</li><li>无跳转点（有序代码中），B2跟在B1后，且B1的结束点不是无条件跳转语句</li></ol><h3 id="静态单赋值形式"><a href="#静态单赋值形式" class="headerlink" title="静态单赋值形式"></a>静态单赋值形式</h3><p>在数据流分析中需要寻找表达式中每个定值的使用点。定值-使用链(def-use chain)是一种能够高效获取这些信息的数据结构：对流图中的每条语句，编译器能够保存两个由指针组成的列表，其中一个列表中的指针指向在该语句中定值的变量的所有使用点，另一个列表中的指针指向该语句中使用的变量的所有定值点。而静态单赋值形式(static single assignment from)是对def-use chain的一种改进思想。SSA形式是这样一种中间表示：在程序正文中，每个变量只有一个定值，而这个定值可能位于一个可动态执行多次的循环中，因此称为静态单赋值形式，而不是单赋值。在用SSA形式表示的过程中，def-use chain是显示的：变量的使用可能用到一个特定定值产生的值，当且仅当在该过程的SSA形式中此变量的定值和使用具有完全相同的名字。</p><p>将普通代码转换为SSA形式代码标准方法是每一个赋值的变量带上一个下标，并在流图中的汇合点使用Ø函数（即形式为Ø（x,x,x…,x）的函数），以区分对一个变量的多种赋值。每一个函数具有的参数个数同汇合到那一点的该变量的不同版本个数一样多，并且每一个参数与该点的一个特定控制流前驱相对应。</p><h3 id="抽象语法书到三地址码"><a href="#抽象语法书到三地址码" class="headerlink" title="抽象语法书到三地址码"></a>抽象语法书到三地址码</h3><p>首先是设计三地址码，这里采用的三地址码和龙书提到的并不完全一样，为了简化工作，将<code>Relop</code>部分和数组相关部分也译成运算，即没有<code>IfRelop</code>运算。三地址部分结构如下：</p><pre><code>public class IR {    public static abstract class Quad implements Acceptable {        public Quad prev = null;        public Quad next = null;        public Quad() { prev = this; next = this; }    }    public static class Var {    }    public static class FVar extends Var {        public Float fnum;        public FVar(float f) {            this.fnum = f;        }        public String toString() {            return &quot;&quot; + this.fnum;        }    }    public static class IVar extends Var {        public Integer num;        public IVar(int num) {            this.num = num;        }        public String toString() {            return &quot;&quot; + this.num;        }    }    public static class CVar extends Var {        public char c;        public CVar(char c) {            this.c = c;        }        public String toString() {            return &quot;&quot; + c;        }    }    public static class ID extends Var {        public String name;        public ID(String name) {            this.name = name;        }        public String toString() { return name; }    }    public static class Str extends Var {        public String str;        public Str(String str) {            this.str = str;        }        public String toString() { return &quot;\&quot;&quot; + str + &quot;\&quot;&quot;; }    }    public static class Temp extends Var {        public String name;        public Temp() {            name = &quot;t&quot; + getIndex();        }        public static int index = 0;        public static int getIndex() { return index++; }        public String toString() { return name; }    }    public static class Array extends Var {        public Var exp;        public Var index;        public Array(Var e, Var i) {            this.exp = e;            this.index = i;        }        public String toString() {             return exp.toString() + &quot;[&quot; + index.toString() + &quot;]&quot;;        }    }    public static class Label extends Quad {        public String address;        public Label() {            address = &quot;L&quot; + getIndex();        }        public void accept(Visitor v) {        v.visit(this);        }        public static int index = 0;        public static int getIndex() { return index++; }    }    public static class Assign extends Quad {        public Op op;        public Var arg1;        public Var arg2;        public Var result;        public Assign(Op o, Var a1, Var a2, Var res) {            this.op = o;            this.arg1 = a1;            this.arg2 = a2;            this.result = res;        }        public void accept(Visitor v) {            v.visit(this);        }        enum Op {            Add,            Sub,            Mul,            Div        }    }    public static class SingleAssign extends Quad {        public Var arg;        public Var result;        public SingleAssign(Var arg, Var res) {            this.arg = arg;            this.result = res;        }        public void accept(Visitor v) {            v.visit(this);        }    }    public static class Copy extends Quad {        public Var arg;        public Var result;        public Copy(Var arg, Var res) {            this.arg = arg;            this.result = res;        }        public void accept(Visitor v) {            v.visit(this);        }    }    public static class Goto extends Quad {        public Label label;        public Goto(Label label) {            this.label = label;        }        public void accept(Visitor v) {            v.visit(this);        }    }    public static class If extends Quad {        public Var condition;        public Label label;        public If(Var con, Label label) {            this.condition = con;            this.label = label;        }        public void accept(Visitor v) {            v.visit(this);        }    }    public static class IfFalse extends If {        public IfFalse(Var con, Label label) {            super(con, label);        }        public void accept(Visitor v) {            v.visit(this);        }    }    public static class RelopCopy extends Quad {        public Var arg1;        public Var arg2;        public Relop relop;        public Var result;        public RelopCopy(Var a1, Var a2, Relop relop, Var result) {            this.arg1 = a1;            this.arg2 = a2;            this.relop = relop;            this.result = result;        }        public void accept(Visitor v) {            v.visit(this);        }        enum Relop {            GT,            GEQT,            LT,            LEQT,            EQ,        }    }    public static class Param extends Quad {        public Var val;        public Param(Var v) {            val = v;        }        public void accept(Visitor v) {            v.accept(this);        }    }    public static class Call extends Quad {        public Var name;        public int num;        public Var result;        public Call(Var name, int num, Var res) {            this.name = name;            this.result = res;            this.num = num;        }        public Call(Var name, int num) {            this(name, num, null);        }        public void accept(Visitor v) {            v.visit(this);        }    }    public static class Return extends Quad {        public Var arg;        public Return(Var a) {            this.arg = a;        }        public void accept(Visitor v) {            v.visit(this);        }    }}</code></pre><p>其中关于值的部分设计是以<code>Var</code>作为父类，派生出不同的类型。其中<code>Temp</code>表示在翻译过程中产生的临时变量。所有的指令都继承自<code>Quad</code>，整体采用双向链表实现。需要注意的是为了方便起见，我将<code>Label</code>也加入<code>Quad</code>中。</p><p>再翻译过程中，使用<code>this.var</code>保存该语法树节点返回值。对于一般的运算，直接翻译并存储到临时变量中：</p><pre><code>public void visit(AddSubExp exp) {    exp.left.accept(this);    Var l = this.var;    exp.right.accept(this);    Var r = this.var;    this.var = new IR.Temp();    IR.Assign.Op op = exp.isAdd ? IR.Assign.Op.Add : IR.Assign.Op.Sub;    quad.add(new IR.Assign(op, l, r, this.var));}</code></pre><p>对于<code>if</code>需要记录条件成功和失败时跳转的标签位置(如果有<code>else</code>，还需要结束位置，而没有<code>else</code>时，结束位置就是失败时跳转位置)。为了处理嵌套结构，我是用栈来记录当前活跃的跳转地址：</p><pre><code>public void visit(IfStatement s) {    Label true_ = new Label();    Label false_ = new Label();    Label next = new Label();    stack.push(true_);    stack.push(false_);    s.condition.accept(this);    if (this.var != null) {        quad.add(new IR.If(this.var, true_));        quad.add(new IR.Goto(false_));    }    stack.pop();    stack.pop();    quad.add(true_);    s.ifStatements.accept(this);    if (s.hasElse) {        quad.add(new IR.Goto(next));        quad.add(false_);        s.elseStatements.accept(this);        quad.add(next);    } else {        quad.add(false_);    }}</code></pre><p>当我们后续处理完condition部分时，<code>this.var</code>为空，表示并没有返回值，而此处<code>if (this.var != null)</code>是为了处理<code>if (1)</code>这样的没有生成condition的节点。如果有<code>else</code>，需要在<code>else</code>所属语句块前加上跳转指令，以跳转到<code>if</code>结束。</p><p><code>while</code>部分结构和<code>if</code>类似，不过还需要记录整个语句开头位置，并在语句执行完下一句添加无条件转移，从而形成循环。当<code>while</code>中出现<code>break</code>和<code>continue</code>指令时，需要分别跳转到末尾和开头。</p><p>在处理与和或指令时，分别对前面记录的栈顶位置进行跳转即可：</p><pre><code>public void visit(AndOrExp exp) {    if (exp.isAnd) {        for (Exp.T t : exp.exps) {            t.accept(this);            if (this.var == null) continue;            quad.add(new IR.IfFalse(this.var, stack.peek()));        }        if (this.var == null) return;        quad.add(new IR.Goto(stack.elementAt(stack.size()-2)));    } else {        for (Exp.T t : exp.exps) {            t.accept(this);            if (this.var == null) continue;            quad.add(new IR.If(this.var, stack.elementAt(stack.size()-2)));        }        if (this.var == null) return;        quad.add(new IR.Goto(stack.peek()));    }    this.var = null;}</code></pre><p>其中如果出现嵌套结构，那么返回值可能为空，此时不需要生成相关指令，忽略。</p><p>最后需要注意到的是我对每一个作用于进行了命名，并且对在作用于声明的变量统一添加上该作用于名称的，这样做是为了防止名称冲突：</p><pre><code>var a = 0;if (a) {    var a = &quot;asdf&quot;;}</code></pre><p>上面部分展示了名称冲突。</p><p>当这里为止，前端部分基本上完成，关于后续部分，交给另外两个阶段完成。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;中间代码&quot;&gt;&lt;a href=&quot;#中间代码&quot; class=&quot;headerlink&quot; title=&quot;中间代码&quot;&gt;&lt;/a&gt;中间代码&lt;/h2&gt;&lt;h3 id=&quot;中间代码的地位和作用&quot;&gt;&lt;a href=&quot;#中间代码的地位和作用&quot; class=&quot;headerlink&quot; title=&quot;中间代码的地位和作用&quot;&gt;&lt;/a&gt;中间代码的地位和作用&lt;/h3&gt;&lt;p&gt;中间代码的作用是可使程序的结构在逻辑上更为简单明确，特别是可使目标代码的优化比较容易实现中间代码，即为中间语言程序，中间语言的复杂性介于源程序语言和机器语言之间。&lt;/p&gt;
    
    </summary>
    
      <category term="编译器实现" scheme="http://www.hashcoding.net/categories/%E7%BC%96%E8%AF%91%E5%99%A8%E5%AE%9E%E7%8E%B0/"/>
    
    
      <category term="Compile" scheme="http://www.hashcoding.net/tags/Compile/"/>
    
  </entry>
  
  <entry>
    <title>五、语义分析</title>
    <link href="http://www.hashcoding.net/2015/12/10/%E4%BA%94%E3%80%81%E8%AF%AD%E4%B9%89%E5%88%86%E6%9E%90/"/>
    <id>http://www.hashcoding.net/2015/12/10/五、语义分析/</id>
    <published>2015-12-10T01:35:16.000Z</published>
    <updated>2017-06-12T12:01:42.302Z</updated>
    
    <content type="html"><![CDATA[<h2 id="语义分析"><a href="#语义分析" class="headerlink" title="语义分析"></a>语义分析</h2><p>语义分析是编译过程的一个逻辑阶段，语义分析的任务是对结构上正确的源程序进行上下文有关性质的审查，进行类型审查。语义分析是审查源程序有无语义错误，为代码生成阶段收集类型信息。比如语义分析的一个工作是进行类型审查，审查每个算符是否具有语言规范允许的运算对象，当不符合语言规范时，编译程序应报告错误。如有的编译程序要对实数用作数组下标的情况报告错误。又比如某些某些程序规定运算对象可被强制，那么当二目运算施于一整型和一实型对象时，编译程序应将整型转换为实型而不能认为是源程序的错误。</p><a id="more"></a><h3 id="符号表"><a href="#符号表" class="headerlink" title="符号表"></a>符号表</h3><p>符号表是用来存放源程序中出现的有关名字的属性信息，这些信息集中反映了名字的语义特征属性。符号表在编译全过程的地位和作用非常重要，是进行上下文合法性检查和语义处理及代码生成的依据。符号表总体结构的设计和实现是与源语言的复杂性（包括词法结构、语法结构的复杂性）有关，还与对于编译系统在时间效率和空间效率方面的要求有关。</p><p>符号表有多种表示方式，而该程序需要用到嵌套作用于，所以符号表应该如下：</p><pre><code>public class Scope {    public Scope parent;    private HashMap&lt;String, Type&gt; map;    public Scope(Scope parent) {        this.parent = parent;        this.map = new HashMap&lt;String, Type&gt;();    }    public void put(String name, Type type) {        this.map.put(name, type);    }    public Type findInCurrent(String name) {        if (!this.map.containsKey(name)) {            return Type.NOT_FOUND;        } else {            return this.map.get(name);        }    }    public Type find(String name) {        Type type = this.findInCurrent(name);        if (type == Type.NOT_FOUND) {            if (this.parent != null) {                return parent.find(name);            }        }        return type;    }    public enum Type {        ID,        INT,        CHAR,        FLOAT,        STRING,        ARRAY,        FUNCTION,        NOT_FOUND    }}</code></pre><p>整个符号表呈现树形状，不过其中通过 parent 与父节点建立连接，这也方便遍时后回溯。这样，在每次定义变量、函数时将其名称及相关数据记录进符号表：</p><pre><code>public void visit(VarDecl s) {    s.exp.accept(this);    scope.put(s.id, Type.ID);}</code></pre><p>其中如果当前scope中<code>s.id</code>的值已经定义则报错。每次使用时查找是否进行定义：</p><pre><code>public void visit(Id id) {    Type type = scope.find(id.id);    if (type == Type.NOT_FOUND) {        Error.instance().PrintMsg(&quot;var &quot; + id.id + &quot; not defined!&quot;);    }    this.type = type;}</code></pre><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><p>按照上面的符号表构建，当查找变量时，首先在当前作用于中遍历一次，没有找到则遍历父节点。通过这种方式，可以实现作用域屏蔽：</p><pre><code>var x = 1;function func() {    var x = 1.0f;}x == 1;</code></pre><p>在内层作用域中，并不会对外部数据进行覆盖。</p><h3 id="类型检查"><a href="#类型检查" class="headerlink" title="类型检查"></a>类型检查</h3><p>类型检查主要在两个部分：语义分析、运行时类型检查。语义分析部分主要针对的是常量部分的类型检查如<code>&quot;string&quot; + 1</code>这样的用法错误。而变量等存在如下情况：</p><pre><code>var x = 1;if (condition) {    x = &quot;string&quot;;}func(x);</code></pre><p>在调用<code>func(x)</code>时，无法得知当前的<code>x</code>的具体类型，所以这部分需要交给运行时类型检查完成。而对于如下的运算，需要进行类型转换：</p><pre><code>var x = 1 + 0.5;var y = &apos;c&apos; + 1;</code></pre><p>因为只有数值类型可以进行类型相互转换，所以在判断时：</p><pre><code>private boolean numberic(Type type) {    return (type == Type.CHAR || type == Type.INT || type == Type.FLOAT);}private void needType(Type type) {    if (this.type != type &amp;&amp; this.type != Type.ID) {        if (!numberic(type) || !numberic(this.type)) {            Error.instance().PrintMsg(&quot;need &quot; + type.toString() + &quot; but get &quot; + this.type.toString());        }    }}private Type maxType(Type left, Type right) {    if (left == right) {        return left;    } else if (left == Type.FLOAT || right == Type.FLOAT) {        return Type.FLOAT;    } else if (left == Type.INT || right == Type.INT) {        return Type.INT;    } else {        return Type.CHAR;    }}</code></pre><p>在判断是否指定类型(<code>needType</code>)时，如果不是相同类型、并且当前类型并不是ID(即不能判断)，且双方都不是数值类型，那么肯定错误。当双方都是数值类型时，可以通过<code>maxType</code>计算返回值类型(其中有类型提升)。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;语义分析&quot;&gt;&lt;a href=&quot;#语义分析&quot; class=&quot;headerlink&quot; title=&quot;语义分析&quot;&gt;&lt;/a&gt;语义分析&lt;/h2&gt;&lt;p&gt;语义分析是编译过程的一个逻辑阶段，语义分析的任务是对结构上正确的源程序进行上下文有关性质的审查，进行类型审查。语义分析是审查源程序有无语义错误，为代码生成阶段收集类型信息。比如语义分析的一个工作是进行类型审查，审查每个算符是否具有语言规范允许的运算对象，当不符合语言规范时，编译程序应报告错误。如有的编译程序要对实数用作数组下标的情况报告错误。又比如某些某些程序规定运算对象可被强制，那么当二目运算施于一整型和一实型对象时，编译程序应将整型转换为实型而不能认为是源程序的错误。&lt;/p&gt;
    
    </summary>
    
      <category term="编译器实现" scheme="http://www.hashcoding.net/categories/%E7%BC%96%E8%AF%91%E5%99%A8%E5%AE%9E%E7%8E%B0/"/>
    
    
      <category term="Compile" scheme="http://www.hashcoding.net/tags/Compile/"/>
    
  </entry>
  
  <entry>
    <title>四、语法制导翻译</title>
    <link href="http://www.hashcoding.net/2015/12/07/%E5%9B%9B%E3%80%81%E8%AF%AD%E6%B3%95%E5%88%B6%E5%AF%BC%E7%BF%BB%E8%AF%91/"/>
    <id>http://www.hashcoding.net/2015/12/07/四、语法制导翻译/</id>
    <published>2015-12-07T15:12:09.000Z</published>
    <updated>2017-06-12T12:01:38.577Z</updated>
    
    <content type="html"><![CDATA[<h2 id="语法制导翻译"><a href="#语法制导翻译" class="headerlink" title="语法制导翻译"></a>语法制导翻译</h2><h3 id="分析树"><a href="#分析树" class="headerlink" title="分析树"></a>分析树</h3><p>在语法知道翻译之前，先来了解程序代码在内存中的表示方法。大部分程序员对于树形结构肯定是并不陌生，而树形结构也正好适合程序结构的表达。</p><a id="more"></a><p>比如<code>if</code>语句的树形表示如下：</p><pre><code>root +---- condtion---- if_statement---- else_statement</code></pre><p>分析树表示方法有多种，而这里选择使用异形树来表示，因为它更加直观。下面就是异形树表示<code>if</code>的例子：</p><pre><code>public static class IfStatement extends T {    public Exp.T condition;    public Stm.T ifStatements;    public boolean hasElse;    public Stm.T elseStatements;    public IfStatement(Exp.T condition, Stm.T ifStatement, Stm.T elseStatement) {        this.condition = condition;        this.ifStatements = ifStatement;        this.hasElse = elseStatement != null;        this.elseStatements = elseStatement;    }    public IfStatement(Exp.T condition, Stm.T ifStatement) {        this(condition, ifStatement, null);    }    @Override    public void accept(Visitor v) {        v.visit(this);    }}</code></pre><p>其中的<code>T</code>是所有<code>Statement</code>的基类。异形树的代码非常直观，能够一眼就明白具体是做什么！然而，异形树充斥着大量冗余操作。你必须为每一个产生式都写出相应的生成代码以及访问代码。</p><p>其中的<code>accept(Visitor v)</code>方法属于 Visitor 模式的应用，Visitor 属于 interface ，这样不仅解决了向下转型的问题，还使得对于多种生成树遍历方法，不需要修改原有的代码。如果使用解释器模式，就无法实现解耦。</p><h3 id="制导动作"><a href="#制导动作" class="headerlink" title="制导动作"></a>制导动作</h3><p>在语法分析的部分，关于<code>if</code>分析部分的代码如下：</p><pre><code>// &quot;if&quot; &quot;(&quot; assign_exp &quot;)&quot; statement [&quot;else&quot; statement]//case KEYWORD_IF: {    advance();    eatToken(Kind.TOKEN_LPAREN);    parseAssignExp();    eatToken(Kind.TOKEN_RPAREN);    parseStatement();    if (current.kind == Kind.TOKEN_KEYWORD &amp;&amp;        current.keyword == Keyword.KEYWORD_ELSE) {        advance();        parseStatement();    }    return;}</code></pre><p>可以看到的是，在分析语法时，直接抛弃了源代码中的信息而不是储存下来。那么只需要在该部分添加相应的语法分析动作，来生成分析树即可。修改后代码如下：</p><pre><code>case KEYWORD_IF: {    advance();    eatToken(Kind.TOKEN_LPAREN);    Exp.T exp = parseAssignExp();    eatToken(Kind.TOKEN_RPAREN);    Stm.T if_ = parseStatement();    Stm.T else_ = null;    if (current.kind == Kind.TOKEN_KEYWORD &amp;&amp; current.keyword == Keyword.KEYWORD_ELSE) {        advance();        else_ = parseStatement();    }    return new Stm.IfStatement(exp, if_, else_);}</code></pre><p>也就是我们在分析阶段，将所有的非终结符信息记录下来，并填入相应的生成树节点中。</p><h3 id="抽象语法树"><a href="#抽象语法树" class="headerlink" title="抽象语法树"></a>抽象语法树</h3><p>生成树极大的保留了程序源代码的结构，使得我们可以轻松的恢复其原先的代码。不过，多数时候，我们所做的工作并不关心其中的大部分数据，这就造成了大量冗余代码的产生。</p><p>举个例子，假设有调用函数：<code>id(exp);</code>语句，其产生分析树应该如下：</p><pre><code>exp +    and or exp +        condition exp +            add sub exp +                mul div exp +                    ...</code></pre><p>其中有很大一部分属于冗余信息，即我们并不关心这部分数据。下面是我们希望见到的语法树：</p><pre><code>call +---- id---- exp</code></pre><p>这就是抽象语法树。相比语法树，抽象语法树在时间和空间方面都有极大的优化。关于抽象语法树的建立，只需要在 parse 部分稍稍修改，就能极大地化简分析树：</p><pre><code>private Exp.T parseConditionExp() {    Exp.T exp = parseAddSubExp();    while (current.kind == Kind.TOKEN_ADD || current.kind == Kind.TOKEN_SUB) {        Kind kind = current.kind;        advance();        exp = new Exp.AddSubExp(kind == Kind.TOKEN_ADD, exp, parseAddSubExp());    }    return exp;}</code></pre><p>这段代码用于分析 + - 法。可以看到如果当前节点并不关加减法什么卵事，就会跳过<code>AddSubExp</code>的构造。按照这个步骤，最终程序返回的就是一棵非常精简的树。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;语法制导翻译&quot;&gt;&lt;a href=&quot;#语法制导翻译&quot; class=&quot;headerlink&quot; title=&quot;语法制导翻译&quot;&gt;&lt;/a&gt;语法制导翻译&lt;/h2&gt;&lt;h3 id=&quot;分析树&quot;&gt;&lt;a href=&quot;#分析树&quot; class=&quot;headerlink&quot; title=&quot;分析树&quot;&gt;&lt;/a&gt;分析树&lt;/h3&gt;&lt;p&gt;在语法知道翻译之前，先来了解程序代码在内存中的表示方法。大部分程序员对于树形结构肯定是并不陌生，而树形结构也正好适合程序结构的表达。&lt;/p&gt;
    
    </summary>
    
      <category term="编译器实现" scheme="http://www.hashcoding.net/categories/%E7%BC%96%E8%AF%91%E5%99%A8%E5%AE%9E%E7%8E%B0/"/>
    
    
      <category term="Compile" scheme="http://www.hashcoding.net/tags/Compile/"/>
    
  </entry>
  
  <entry>
    <title>三、语法分析</title>
    <link href="http://www.hashcoding.net/2015/12/04/%E4%B8%89%E3%80%81%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90/"/>
    <id>http://www.hashcoding.net/2015/12/04/三、语法分析/</id>
    <published>2015-12-04T15:01:10.000Z</published>
    <updated>2017-06-12T12:01:34.647Z</updated>
    
    <content type="html"><![CDATA[<h2 id="自顶向下的语法分析"><a href="#自顶向下的语法分析" class="headerlink" title="自顶向下的语法分析"></a>自顶向下的语法分析</h2><p>自顶向下语法分析器从语法分析树的根开始，系统化地向下扩展树，直至树的叶节点与词法分析器返回的以归类单词相匹配。该过程在树的下边缘选择一个非终结符，选定某个适用于该非终结符的产生式，用与该产生式右侧相对应的子树扩展结点。</p><a id="more"></a><h3 id="自顶向下语法分析器的优化"><a href="#自顶向下语法分析器的优化" class="headerlink" title="自顶向下语法分析器的优化"></a>自顶向下语法分析器的优化</h3><p>而自顶向下语法分析器的效率极其依赖于其在扩展非终结符时选择正确产生式的能力。如果语法分析其总是做出正确的选择，那么其效率是非常高的；如果与之相反，那么分析代价将直线上升。在编程语言实现模式一书中，提到通过记忆化，可以使得回溯变代价变小。</p><h3 id="递归下降分析算法"><a href="#递归下降分析算法" class="headerlink" title="递归下降分析算法"></a>递归下降分析算法</h3><p>语法分析器可以利用一个简单的修改来避免回溯。在语法分析器去选择下一条规则时，他可以同时考虑当前关注的符号以及下一个输入符号，称为前瞻符号。通过前瞻一个符号，可以消除在解析右递归表达式语法时多种选择造成的不确定性。</p><pre><code>// 递归下降语法框架假设有如下文法产生式：    A -&gt; B11 ... B1i        | B21 ... B2j        | B31 ... B3k        | ...那么就可以为 A 写出如下分析代码：parse_A()     token = nextToken()    switch (token)    case ...: // B11 ... B1i    case ...: // B21 ... B2j    case ...: // B31 ... B3k    ...    default: error(...);</code></pre><p>为了描述这个前瞻符号，需要引入 FIRST 集合和 FOLLOW 集合。对于每个语法符号 a, 集合 FIRST(A) 为：从 A 推导出的每个符号串的第一个单词所对应的终结符的集合；而对于 FOLLOW(A) 表示紧跟在 A 导出的符号串之后的所有可能单词。使用 FIRST 和 FOLLOW 集合，可以准确的使得某个语法对自顶向下语法分析器无回溯的条件。对于产生式 A -&gt; B ，定义其增强 FIRST 集合 FIRST+ 如下：</p><pre><code>FIRST+(A-&gt;B) = FIRST(B)     如果 FIRST(B) 不包含空产生式                FIRST(B) U FOLLOW(A)     否则</code></pre><p>在介绍 FIRST 集构造方法之前，需要引入 NULLABLE 集合的概念。如果一个非终结符X属于集合 NULLABLE ，当且仅当：</p><ol><li>基本情况：X -&gt; </li><li>归纳情况：X -&gt; Y1 …. Yn 中， Y1, ….Yn 是 n 个非终结符，且都属于 NULLABLE 集</li></ol><p>下面看到的是 NULLABLE 集合算法：</p><pre><code>NULLABLE = {}while (nullable is still changing)     foreach (production p : x -&gt; B)        if (B == null)            NULABLE U= {X}        if (B == Y1 ... Yn)             if (Y1 belong NULLABLE &amp;&amp; .... &amp;&amp; Yn belong NULLABLE)                NULLABLE U= {X}</code></pre><p>下面，展示 First 集的不动点算法：</p><pre><code>foreach (nonterminal N)     FIRST(N) = {}while (some set is changing)     foreach (production p : N-&gt;B1 ... Bn)        foreach (Bi form B1 upto Bn)            if (B1 == a)                FIRST(N) U= {a}                break;            if (Bi == M)                 FIRST(N) U= FIRST(M)                if (M is not in NULLABLE)                    break;</code></pre><p>刚开始的时候每个非终结符都为空集。如果每次遍历完成，仍然有集合被改变时，可能会影响到其他的非终结符的集合，所以仍然需要遍历。对于每一个产生式，第一个元素如果是终结符，把该终结符加入 FIRST 集合；如果第一个是非终结符，那么把该非终结符加入 FIRST 集合，如果该非终结符属于 NULLABLE ，那么还需要再次判断紧接着的符号。</p><p>现在来看 FOLLOW 集的不动点算法：</p><pre><code>foreach (nonterminal N)    FOLLOW(N) = {}while (some set is changing)     foreach (production p : N -&gt; B1 ... Bn)        temp = FOLLOW(N)        foreach (B1 form Bn downto B1)            if (Bi == a)                temp = {a}            if (Bi == M)                FOLLOW(M) U= temp;                if (M is not NULLABLE)                    temp = FIRST(M)                else temp U= FIRST(M)</code></pre><p>其中 <code>temp</code> 表示的是当前位置的 FOLLOW 集，初始时为当前产生式的 FOLLOW 集。现在计算该产生式关联到的非终结符的 FOLLOW 集。因此从产生式后往前看，如果是终结符，则把 <code>temp</code> 更新为当前终结符。如果当前为非终结符 M ，由于 <code>temp</code> 是当前位置的 FOLLOW 集，所以将其加入 M 的 FOLLOW 集中。现在考虑 <code>temp</code> 位置移动，如果当前 M 不属于 NULLABLE ，那么表示不会穿过 M ，所以 <code>temp = FIRST(M)</code> ，否则应该 <code>temp U= FIRST(M)</code> 。</p><p>通过 FIRST 和 FOLLOW 集合，可以得到 FIRST+ 集合，这样就可以编写程序实现了。当然，并不是所有的语法都是无回溯的。这个时候需要重写产生式，将公共左因子提取出来，从而消除回溯。</p><h3 id="左递归"><a href="#左递归" class="headerlink" title="左递归"></a>左递归</h3><p>在自顶向下分析中，如果产生式中有做递归的情况，分析器将出现无限循环的现象。这个时候，需要将左递归转换为右递归。对于直接做递归，引入一个新的非终结符即可解决，对于间接左递归，需要先重写为直接左递归，然后再修改右递归。</p><h3 id="程序实现"><a href="#程序实现" class="headerlink" title="程序实现"></a>程序实现</h3><p>这里给出描述的这门语言的文法产生式，可以看到该语言文法产生式十分简单，对于手写来说，并不算复杂。</p><pre><code>atom_exp:    ID    | FLOAT_LITERAL    | INTEGER_LITERAL    | CHAR    | STRING    | &quot;(&quot; exp &quot;)&quot;    | ID &quot;(&quot; exp_list　&quot;)&quot;    | &quot;[&quot; exp_list &quot;]&quot;exp_list:    exp { &quot;,&quot; exp }not_exp:    atom_exp [ &quot;[&quot; exp &quot;]&quot; ]mul_div_exp:    &quot;!&quot; mul_div_exp    | not_exp    add_sub_exp:    mul_div_exp (&quot;*&quot; | &quot;/&quot; | &quot;%&quot;) mul_div_exp    | mul_div_exp    conditon_exp:    add_sub_exp (&quot;+&quot; | &quot;-&quot;) add_sub_exp    | add_sub_exp    and_exp:    condition_exp (&quot;&lt;&quot; | &quot;&gt;&quot; | &quot;&gt;=&quot; | &quot;&lt;=&quot; | &quot;==&quot;) condition_exp     | conditoin_expor_exp:    and_exp &quot;&amp;&amp;&quot; and_exp     | and_expexp:    or_exp &quot;||&quot; or_exp     | or_expassign_exp:    exp &quot;=&quot; exp    | expvar_decl:    &quot;var&quot; ID &quot;=&quot; assign_exp &quot;;&quot; statement:    block    | &quot;if&quot; &quot;(&quot; assign_exp &quot;)&quot; statement [&quot;else&quot; statement]    | &quot;while&quot; &quot;(&quot; assign_exp &quot;)&quot; statement    | &quot;return&quot; assign_exp &quot;;&quot;    | &quot;break&quot; &quot;;&quot;    | &quot;continue&quot; &quot;;&quot;    | assign_exp &quot;;&quot;    | var_declblock:    &quot;{&quot; { statement} &quot;}&quot;formal_list:    ID { &quot;,&quot;  ID }function_decl:    &quot;function&quot; ID &quot;(&quot; formal_list &quot;)&quot; blockprogram:     { function_decl }</code></pre><p>这里使用 EBNF 进行描述。在写代码时，对于每一个非终结符，都有与之对应的 <code>parseXXX</code> 函数对它进行解析。这里使用 <code>if</code> 语句的文法产生式，能够很清楚的看到编码方式：</p><pre><code>//statement://    block//    | &quot;if&quot; &quot;(&quot; assign_exp &quot;)&quot; statement [&quot;else&quot; statement]//    | &quot;while&quot; &quot;(&quot; assign_exp &quot;)&quot; statement//    | &quot;return&quot; assign_exp &quot;;&quot;//    | &quot;break&quot; &quot;;&quot;//    | &quot;continue&quot; &quot;;&quot;//    | assign_exp &quot;;&quot;//    | var_decl//private void parseStatement() {    //System.out.println(current.toString());    if (current.kind == Kind.TOKEN_LBRACE) {        parseBlock();        return;    } else if (current.kind == Kind.TOKEN_KEYWORD) {        switch (current.keyword) {        case KEYWORD_IF: {            advance();            eatToken(Kind.TOKEN_LPAREN);            parseAssignExp();            eatToken(Kind.TOKEN_RPAREN);            parseStatement();            if (current.kind == Kind.TOKEN_KEYWORD &amp;&amp;                current.keyword == Keyword.KEYWORD_ELSE) {                advance();                parseStatement();            }            return;        }        case KEYWORD_WHILE: {            advance();            eatToken(Kind.TOKEN_LPAREN);            parseAssignExp();            eatToken(Kind.TOKEN_RPAREN);            parseStatement();            return;        }        case KEYWORD_RETURN: {            advance();            if (current.kind != Kind.TOKEN_SEMI) {                parseAssignExp();            }             eatToken(Kind.TOKEN_SEMI);            return;        }        case KEYWORD_CONTINUE: {            advance();            eatToken(Kind.TOKEN_SEMI);            return;        }        case KEYWORD_BREAK: {            advance();            eatToken(Kind.TOKEN_SEMI);            return;        }        case KEYWORD_VAR:            parseVarDecl();            return;        default:            error();            break;        }    } else {        parseAssignExp();        eatToken(Kind.TOKEN_SEMI);        return;    }}</code></pre><p>代码中的 <code>advance()</code> 部分如下：</p><pre><code>private void advance() {    current = lexer.nextToken();}</code></pre><p><code>eatToken()</code> 一部分如下：</p><pre><code>private void eatToken(Kind kind) {    if (kind == current.kind)        advance();    else {        // 错误处理    }}</code></pre><p>那么可以清晰的看到，我们每次都通过当前读入的 Token ，选择相应的文法树。一直重复这个过程，就可以实现语法分析。需要注意的是，这里面关于表达式的匹配的部分也是使用文法定义，导致这部分代码占据了大部分的内容。且还要注意各个符号的结合性（将在下一部分看到）。关于表达式中代码是隐含了运算符的优先级，所以不需要单独判断。不过有部分 parse 在实现表达式解析的时候，单独采用了表达式解析法，而不是递归下降分析法。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;自顶向下的语法分析&quot;&gt;&lt;a href=&quot;#自顶向下的语法分析&quot; class=&quot;headerlink&quot; title=&quot;自顶向下的语法分析&quot;&gt;&lt;/a&gt;自顶向下的语法分析&lt;/h2&gt;&lt;p&gt;自顶向下语法分析器从语法分析树的根开始，系统化地向下扩展树，直至树的叶节点与词法分析器返回的以归类单词相匹配。该过程在树的下边缘选择一个非终结符，选定某个适用于该非终结符的产生式，用与该产生式右侧相对应的子树扩展结点。&lt;/p&gt;
    
    </summary>
    
      <category term="编译器实现" scheme="http://www.hashcoding.net/categories/%E7%BC%96%E8%AF%91%E5%99%A8%E5%AE%9E%E7%8E%B0/"/>
    
    
      <category term="Compile" scheme="http://www.hashcoding.net/tags/Compile/"/>
    
  </entry>
  
  <entry>
    <title>二、词法分析</title>
    <link href="http://www.hashcoding.net/2015/12/03/%E4%BA%8C%E3%80%81%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90/"/>
    <id>http://www.hashcoding.net/2015/12/03/二、词法分析/</id>
    <published>2015-12-03T09:58:02.000Z</published>
    <updated>2017-06-12T12:01:21.205Z</updated>
    
    <content type="html"><![CDATA[<h1 id="词法分析"><a href="#词法分析" class="headerlink" title="词法分析"></a>词法分析</h1><p>词法分析是编译器前段的第一个阶段，它将源代码按照一定的规则分割为记号流，然后传递给语法分析器进行下一步处理。在词法分析中，需要记录下源代码的信息，以供后续阶段使用。</p><a id="more"></a><p>词法分析有ad-hoc和自动机识别两种方式。自动机识别时，需要手工构造正则表达式并输入自动机，然后自动机根据正则表达式生成NFA。直接解析NFA开销过大，所以需要把NFA转化成为DFA。这时候得到的DFA有许多可以精简的状态，所以可以做DFA最小化，然后得到最小的DFA。这样自动机就可以自动识别并返回记号。</p><h2 id="正则表达式到-NFA"><a href="#正则表达式到-NFA" class="headerlink" title="正则表达式到 NFA"></a>正则表达式到 NFA</h2><p>正则表达式到 NFA 有 McMaughton-Yamada-Thompson 算法，涉及到贴图原因，这里就不讲了。</p><h2 id="从-NFA-到-DFA-的转换"><a href="#从-NFA-到-DFA-的转换" class="headerlink" title="从 NFA 到 DFA 的转换"></a>从 NFA 到 DFA 的转换</h2><p>由于 NFA 对于一个输入符号可以选择不同的转换，它还可以执行输入上的 ε 转换，所以直接对 NFA 进行模拟不方便，需要转换成 DFA。NFA 到 DFA 可以由子集构造法（subset construction）构造。</p><p>输入：一个 NFA N;<br>输出：一个 DFA D;<br>方法：该算法为 D 构造一个转换表 Dtran。D 的每一个状态是 NFA 中状态的集合。在该算法之前需要引入如下几个操作：</p><pre><code>ε-closure(s)     能够从 NFA 的 s 状态只通过 ε 转换到达的状态集合；ε-closure(T)    能够从 T 中某个 NFA 状态 s 开始，只通过 ε 转换达到的状态集合；move(T, a)        能够从 T 中某个状态 s 出发通过标号为 a 的转换到达的 NFA 状态的集合；</code></pre><p>该算法有一个记录新产生的 D 的状态的表：Dstates，在算法开始时，为 ε-closure(s) 产生一个状态做为起始状态。将起始状态放入工作列表。对于工作列表中的状态 T ，找出任意输入 a 能到达的集合 C = move(T, a) ，求得 C 对应的状态 ε-closure(C)， 如果 ε-closure(T) 状态没有包含在 Dstates 中，则创建一个新状态并加入工作列表。最后将 Dtran[T, a] = C。</p><p>该算法伪代码如下：</p><pre><code>A = ε-closure(s0);Dstate.insert(A);queue.push(A);while (!queue.empty()) {    T = queue.front(); queue.pop();    for (auto i : input) {        C = ε-closure(move(T, i));        if (Dstate.count(C) == 0) {            Dstate.insert(C);        }        Dtran[T][i] = C;    }}return Dtran;</code></pre><p>其中的 ε-closure(T) 可以通过下面的代码得到</p><pre><code>ε-closure(T) {    stack.push(T.states);    res = null;    while (!stack.empty()) {        s = stack.pop();        for (auto i : 所有NFA状态) {            if (s 有一条 ε 转换到 i &amp;&amp; res.count(i) == 0) {                res.insert(i);                stack.push(i);            }        }    }    return res;}</code></pre><h2 id="DFA-状态最小化"><a href="#DFA-状态最小化" class="headerlink" title="DFA 状态最小化"></a>DFA 状态最小化</h2><p>对于一个NFA，当把它确定化之后，得到的DFA所具有的状态数可能并不是最小的。其原因之一，就在于上面所给出的确定化算法没有考虑到DFA中具有某种“同一性“的一些状态可加以合并的问题。所谓一个DFA M状态数的最小化，是指构造一个等价的DFA M′，而后者有最小的状态数。所谓状态数最小，指的是对于原来状态中任意两个状态，能被划分到一组当且仅当对于所有输入，这两个状态都到达同一个组，这样所得到的分组组成的状态，即状态数最小化。</p><p>现在，让我们来看一下简单的 Hopcroft 算法：</p><pre><code>// 基于等价类的思想split(S)     foreach (character c)         if (c can split S)            split S into T1, ..., TKhopcroft()     split all nodes into N, A    while (set is still changes)         split(all S)</code></pre><p><code>c can split S</code> 的意思是如果 S 集合中存在两个状态可以通过 <code>c</code> 转移到不同的目标状态，那么就是可以切分（split）的。而一开始的 split 的目的是将一般状态和接受状态，这样做的目的是为了保证最后切分完成后，不存在任意一个由接受状态和一般状态组成的状态（因为这样就不知道这里是不是该接受）。</p><h2 id="DFA-模拟"><a href="#DFA-模拟" class="headerlink" title="DFA 模拟"></a>DFA 模拟</h2><p>输入：一个以eof结尾的字符串x，DFA 的开始状态为 s0 ，接受状态为 F ，转换函数为 move;<br>输出：如果 D 接受 x ，返回 yes，否则返回 No；<br>方法：对于每一个输入字符 c ，当前状态的值 s 由状态 move 函数得到，直到文件尾。如果 s 在 F 中，则返回 yes，否则返回 no ；</p><p>算法伪代码如下：</p><pre><code>s = s0;c = nextChar();while (c != eof) {    s = move(s, c);    c = nextChar();}if (F.contain(s))     return &quot;yes&quot;;else     return &quot;no&quot;;</code></pre><p>因为这里得到的 DFA 其实就是一个有向图，所以程序可以使用有向图表示方式来表示 <code>move</code> 。</p><h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><p>在实践中，需要处理标识符、关键字、字符串常量等进行特殊处理。关键字有多种表示方法，可以硬编码到 <code>TOKEN</code> 中，如 <code>TOKEN_IF</code> ，也可以当作标识符处理，也就是说，当词法分析器分析出标识符后，与已知的关键字进行比较，从而区分关键字和标识符。</p><p>在这里我采用单独编码关键字部分，那么Token部分设计就分为<code>Kind</code>、<code>Keyword</code>:</p><pre><code>public enum Keyword {    KEYWORD_ELSE,         // &quot;else&quot;    KEYWORD_IF,         // &quot;if&quot;    KEYWORD_RETURN,     // &quot;return&quot;    KEYWORD_WHILE,         // &quot;while&quot;    KEYWORD_BREAK,        // &quot;break&quot;    KEYWORD_CONTINUE,    // &quot;continue&quot;    KEYWORD_FUNCTION,    KEYWORD_VAR,        // var}public enum Kind {    TOKEN_ADD,         // &quot;+&quot;    TOKEN_DIV,        // /    TOKEN_MOD,        // %    TOKEN_AND,         // &quot;&amp;&amp;&quot;    TOKEN_OR,        // ||    TOKEN_ASSIGN,     // &quot;=&quot;    TOKEN_EQ,        // &quot;eq&quot;    TOKEN_COMMER,     // &quot;,&quot;    TOKEN_DOT,         // &quot;.&quot;    TOKEN_EOF,         // EOF    TOKEN_ID,         // Identifier    TOKEN_LBRACE,     // &quot;{&quot;    TOKEN_LBRACK,     // &quot;[&quot;    TOKEN_LPAREN,     // &quot;(&quot;    TOKEN_LT,         // &quot;&lt;&quot;    TOKEN_GT,        // &quot;&gt;&quot;    TOKEN_LEQT,        // &quot;&lt;=&quot;    TOKEN_GEQT,        // &quot;&gt;=&quot;    TOKEN_NOT,         // &quot;!&quot;    TOKEN_NUM,         // IntegerLiteral    TOKEN_FLOAT,    // float literal    TOKEN_RBRACE,     // &quot;}&quot;    TOKEN_RBRACK,     // &quot;]&quot;    TOKEN_RPAREN,     // &quot;)&quot;    TOKEN_SEMI,     // &quot;;&quot;    TOKEN_SUB,         // &quot;-&quot;    TOKEN_TIMES,     // &quot;*&quot;    TOKEN_KEYWORD,    //     TOKEN_CHAR,    TOKEN_STRING,}</code></pre><p><code>Token</code>部分需要记录相关信息：</p><pre><code>public class Token {    public Kind kind;             public Keyword keyword;    public char c;    public Integer num;    public Float fnum;    public String lexeme;         public Integer lineNum;    public Integer col;}</code></pre><p>当然，这样设计肯定不合理的，考虑到这部分内容更多是为了完成，就采取这种编码方式更少的了。</p><p>在lexer中，主要采用ad-hoc，即手工编写：</p><pre><code>switch (c) {case &apos;%&apos;:    kind = Kind.TOKEN_MOD;    break;case &apos;+&apos;:    kind = Kind.TOKEN_ADD;    break;case &apos;-&apos;:    kind = Kind.TOKEN_SUB;    break;...}</code></pre><p>这里对数据的处理方式肯定是不对的，要使用String table才是好办法。</p><h3 id="string-table"><a href="#string-table" class="headerlink" title="string table"></a>string table</h3><p>字符串比较耗时比较大，并且代码中标识符重用率也比较多，所以可以使用 string table 来记录出现过的标识符，这样不仅省了空间，在判断是否相等时的时间开销也降低了。</p><p>比较简单的实现方式是对每个标识符进行 <code>hash</code> ，然后将每个 <code>hash</code> 值放入一个桶中进行分类。每次插入的时候就在桶中进行匹配，没有找到则插入，否则返回原来实例的索引即可。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;词法分析&quot;&gt;&lt;a href=&quot;#词法分析&quot; class=&quot;headerlink&quot; title=&quot;词法分析&quot;&gt;&lt;/a&gt;词法分析&lt;/h1&gt;&lt;p&gt;词法分析是编译器前段的第一个阶段，它将源代码按照一定的规则分割为记号流，然后传递给语法分析器进行下一步处理。在词法分析中，需要记录下源代码的信息，以供后续阶段使用。&lt;/p&gt;
    
    </summary>
    
      <category term="编译器实现" scheme="http://www.hashcoding.net/categories/%E7%BC%96%E8%AF%91%E5%99%A8%E5%AE%9E%E7%8E%B0/"/>
    
    
      <category term="Compile" scheme="http://www.hashcoding.net/tags/Compile/"/>
    
  </entry>
  
  <entry>
    <title>一、语言基本要素</title>
    <link href="http://www.hashcoding.net/2015/12/02/%E4%B8%80%E3%80%81%E8%AF%AD%E8%A8%80%E5%9F%BA%E6%9C%AC%E8%A6%81%E7%B4%A0/"/>
    <id>http://www.hashcoding.net/2015/12/02/一、语言基本要素/</id>
    <published>2015-12-02T14:41:45.000Z</published>
    <updated>2017-06-12T12:01:45.998Z</updated>
    
    <content type="html"><![CDATA[<h1 id="来源"><a href="#来源" class="headerlink" title="来源"></a>来源</h1><p>学习编译原理之后，想尝试着用学习的知识写一个简单的编译器，并把它放在 <a href="https://github.com/thinkermao/TCompile" target="_blank" rel="noopener">github</a> 上，当作对自己学习成果的检验和练习。而写博客，则是一种鞭策，驱动我坚持不懈地写下去。所以准备从无到有写一个系列，希望能对后来的学习者有所帮助。</p><a id="more"></a><h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><p>首先写前端，然后翻译成字节码，构建运行时程序，并在这个基础上，进行代码优化相关内容。其中涉及到的知识有词法分析、语法分析、语义分析、类型检查、全文CPS变换、字节码解释器、垃圾回收、控制流程图、数据流分析。鉴于能力有限，不可能面面聚到，有的只能做一个简单介绍。</p><h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><p>这个目标分为三个阶段，第一个阶段是自己动手写一个编译器，将源代码翻译成中间代码。第二个阶段是设计一个Scheme解释器。第三个阶段是研究现有的编译器中间代码及优化等部分。</p><p>编译器实现的是一种简单的编程语言，在设计的时候尽可能的精简、方便实现。这个语言设计来源于虎书的 MiniJava , 代码则是采用的 <a href="Compile">http://staff.ustc.edu.cn/~bjhua/courses/compiler/2014/</a> 中提供的代码基础上进行了一定的修改，使用 java 实现。首先看一个简单的例子：</p><pre><code>function f(arg1, arg2) {    var condition = arg1;    if (condition) {        // todo    } else {        // todo    }    while (condition) {        // todo    }}function main() {    f(1, 2);}</code></pre><p>这是一门脚本语言，这样设计的目的是使得 parse 部分能够轻松的写出来。关于其他细节，在后续过程中进行阐述。</p><p>作为PLT领域的初学者，没有系统全面的掌握相关知识，那么设计的语言肯定是不合理、存在缺陷的。所以第二个阶段采用现有的语言为实现模板，而Scheme精简美丽，再加上能够应用到一些PLT中的理论，所以成为了不二之选。至于第三个阶段，通过现有的、已经比较成熟源码学习应该是比自己手写收获更大，所以选择使用现有源代码。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;来源&quot;&gt;&lt;a href=&quot;#来源&quot; class=&quot;headerlink&quot; title=&quot;来源&quot;&gt;&lt;/a&gt;来源&lt;/h1&gt;&lt;p&gt;学习编译原理之后，想尝试着用学习的知识写一个简单的编译器，并把它放在 &lt;a href=&quot;https://github.com/thinkermao/TCompile&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;github&lt;/a&gt; 上，当作对自己学习成果的检验和练习。而写博客，则是一种鞭策，驱动我坚持不懈地写下去。所以准备从无到有写一个系列，希望能对后来的学习者有所帮助。&lt;/p&gt;
    
    </summary>
    
      <category term="编译器实现" scheme="http://www.hashcoding.net/categories/%E7%BC%96%E8%AF%91%E5%99%A8%E5%AE%9E%E7%8E%B0/"/>
    
    
      <category term="Compile" scheme="http://www.hashcoding.net/tags/Compile/"/>
    
  </entry>
  
</feed>
